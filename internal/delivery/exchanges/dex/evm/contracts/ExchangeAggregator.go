// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"exchange-provider/pkg/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// IBridgeAggregatorbridgeInput is an auto generated low-level Go binding around an user-defined struct.
type IBridgeAggregatorbridgeInput struct {
	Bridge         common.Address
	TokenIn        common.Address
	Sender         common.Address
	BridgeFee      *big.Int
	AfterSwap      bool
	AmountIn       *big.Int
	FeeNumerator   *big.Int
	FeeDenominator *big.Int
	BridgeData     []byte
}

// IExchangeAggregatorswapInput is an auto generated low-level Go binding around an user-defined struct.
type IExchangeAggregatorswapInput struct {
	TokenIn     common.Address
	TotalAmount *big.Int
	FeeAmount   *big.Int
	AmountIn    *big.Int
	Swapper     common.Address
	SwapperData []byte
	Sender      common.Address
	Native      bool
}

// ContractsMetaData contains all meta data concerning the Contracts contract.
var ContractsMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceProvider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bridgeFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"afterSwap\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeDenominator\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"bridgeData\",\"type\":\"bytes\"}],\"internalType\":\"structIBridgeAggregator.bridgeInput\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"Bridge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapperData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"native\",\"type\":\"bool\"}],\"internalType\":\"structIExchangeAggregator.swapInput\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"Swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeReciever\",\"type\":\"address\"}],\"name\":\"changeFeeReciever\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceProvider\",\"type\":\"address\"}],\"name\":\"changePriceProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"estimateAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReciever\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040516200311f3803806200311f833981810160405281019062000037919062000216565b620000576200004b620000e060201b60201c565b620000e860201b60201c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000248565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001de82620001b1565b9050919050565b620001f081620001d1565b8114620001fc57600080fd5b50565b6000815190506200021081620001e5565b92915050565b6000602082840312156200022f576200022e620001ac565b5b60006200023f84828501620001ff565b91505092915050565b612ec780620002586000396000f3fe60806040526004361061009c5760003560e01c8063ac9650d811610064578063ac9650d814610166578063ae4f5be814610196578063b888879e146101bf578063dd5129b8146101ea578063f2fde38b14610206578063f61db7401461022f5761009c565b806315109660146100a1578063421fcefa146100ca5780636110358d146100e6578063715018a6146101245780638da5cb5b1461013b575b600080fd5b3480156100ad57600080fd5b506100c860048036038101906100c3919061187a565b61025a565b005b6100e460048036038101906100df9190611931565b6102a6565b005b3480156100f257600080fd5b5061010d60048036038101906101089190611a1c565b61067f565b60405161011b929190611ac4565b60405180910390f35b34801561013057600080fd5b50610139610733565b005b34801561014757600080fd5b50610150610747565b60405161015d9190611afc565b60405180910390f35b610180600480360381019061017b9190611b6d565b610770565b60405161018d9190611d0c565b60405180910390f35b3480156101a257600080fd5b506101bd60048036038101906101b8919061187a565b61090a565b005b3480156101cb57600080fd5b506101d4610956565b6040516101e19190611afc565b60405180910390f35b61020460048036038101906101ff9190611d4e565b61097c565b005b34801561021257600080fd5b5061022d6004803603810190610228919061187a565b610c1c565b005b34801561023b57600080fd5b50610244610c9f565b6040516102519190611afc565b60405180910390f35b610262610cc5565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b3373ffffffffffffffffffffffffffffffffffffffff168360400160208101906102d0919061187a565b73ffffffffffffffffffffffffffffffffffffffff1614610326576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031d90611e27565b60405180910390fd5b826060013534101561036d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036490611e93565b60405180910390fd5b6103e2610378610747565b84604051602001610389919061211a565b60405160208183030381529060405284848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610d43565b60008360800160208101906103f7919061213c565b1561048f5783602001602081019061040f919061187a565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104479190611afc565b602060405180830381865afa158015610464573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610488919061217e565b90506104b5565b8360a0013590506104b48460200160208101906104ac919061187a565b333084610eaf565b5b60008460c001351180156104cd575060008460e00135115b80156104e057508360c001358460e00135115b156105b55760008460e001358560c00135836104fc91906121da565b610506919061224b565b905084608001602081019061051b919061213c565b156105645761055f856020016020810190610536919061187a565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683610fe8565b6105a5565b6105a485602001602081019061057a919061187a565b33600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684610eaf565b5b80826105b1919061227c565b9150505b6105e48460200160208101906105cb919061187a565b8560000160208101906105de919061187a565b8361111e565b8360000160208101906105f7919061187a565b73ffffffffffffffffffffffffffffffffffffffff16630a2fb37485606001358680610100019061062891906122bf565b856040518563ffffffff1660e01b815260040161064793929190612360565b6000604051808303818588803b15801561066057600080fd5b505af1158015610674573d6000803e3d6000fd5b505050505050505050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636110358d88888888886040518663ffffffff1660e01b81526004016106e59594939291906123a1565b6040805180830381865afa158015610701573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107259190612420565b915091509550959350505050565b61073b610cc5565b6107456000611254565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60608282905067ffffffffffffffff81111561078f5761078e612460565b5b6040519080825280602002602001820160405280156107c257816020015b60608152602001906001900390816107ad5790505b50905060005b83839050811015610903576000803073ffffffffffffffffffffffffffffffffffffffff16868685818110610800576107ff61248f565b5b905060200281019061081291906122bf565b6040516108209291906124ee565b600060405180830381855af49150503d806000811461085b576040519150601f19603f3d011682016040523d82523d6000602084013e610860565b606091505b5091509150816108cf5760448151101561087957600080fd5b6004810190508080602001905181019061089391906125f9565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c69190612686565b60405180910390fd5b808484815181106108e3576108e261248f565b5b6020026020010181905250505080806108fb906126a8565b9150506107c8565b5092915050565b610912610cc5565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff168360c00160208101906109a6919061187a565b73ffffffffffffffffffffffffffffffffffffffff16146109fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f390611e27565b60405180910390fd5b610a71610a07610747565b84604051602001610a1891906127e2565b60405160208183030381529060405284848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610d43565b60008360e0016020810190610a86919061213c565b610b2857610aac846000016020810190610aa0919061187a565b33308760600135610eaf565b610af0846000016020810190610ac2919061187a565b33600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168760400135610eaf565b610b23846000016020810190610b06919061187a565b856080016020810190610b19919061187a565b866060013561111e565b610ba7565b8360200135341015610b6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6690611e93565b60405180910390fd5b610b9f600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168560400135611318565b836060013590505b610c16846080016020810190610bbd919061187a565b82868060a00190610bce91906122bf565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611418565b50505050565b610c24610cc5565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8a90612876565b60405180910390fd5b610c9c81611254565b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610ccd61152f565b73ffffffffffffffffffffffffffffffffffffffff16610ceb610747565b73ffffffffffffffffffffffffffffffffffffffff1614610d41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d38906128e2565b60405180910390fd5b565b601b60f81b81604081518110610d5c57610d5b61248f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508273ffffffffffffffffffffffffffffffffffffffff16610dbd82610daf85611537565b61154890919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff160315610eaa57601c60f81b81604081518110610df257610df161248f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508273ffffffffffffffffffffffffffffffffffffffff16610e5382610e4585611537565b61154890919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff1614610ea9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea09061294e565b60405180910390fd5b5b505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd868686604051602401610ee39392919061296e565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610f3191906129d6565b6000604051808303816000865af19150503d8060008114610f6e576040519150601f19603f3d011682016040523d82523d6000602084013e610f73565b606091505b5091509150818015610fa15750600081511480610fa0575080806020019051810190610f9f9190612a02565b5b5b610fe0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd790612a7b565b60405180910390fd5b505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb858560405160240161101a929190612a9b565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161106891906129d6565b6000604051808303816000865af19150503d80600081146110a5576040519150601f19603f3d011682016040523d82523d6000602084013e6110aa565b606091505b50915091508180156110d857506000815114806110d75750808060200190518101906110d69190612a02565b5b5b611117576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110e90612b10565b60405180910390fd5b5050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b38585604051602401611150929190612a9b565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161119e91906129d6565b6000604051808303816000865af19150503d80600081146111db576040519150601f19603f3d011682016040523d82523d6000602084013e6111e0565b606091505b509150915081801561120e575060008151148061120d57508080602001905181019061120c9190612a02565b5b5b61124d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124490612b7c565b60405180910390fd5b5050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff81111561134d5761134c612460565b5b6040519080825280601f01601f19166020018201604052801561137f5781602001600182028036833780820191505090505b5060405161138d91906129d6565b60006040518083038185875af1925050503d80600081146113ca576040519150601f19603f3d011682016040523d82523d6000602084013e6113cf565b606091505b5050905080611413576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140a90612be8565b60405180910390fd5b505050565b6000808473ffffffffffffffffffffffffffffffffffffffff16848460405161144191906129d6565b60006040518083038185875af1925050503d806000811461147e576040519150601f19603f3d011682016040523d82523d6000602084013e611483565b606091505b509150915081611528576044815110156114d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c990612c7a565b60405180910390fd5b600481019050808060200190518101906114ec91906125f9565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151f9190612686565b60405180910390fd5b5050505050565b600033905090565b600081805190602001209050919050565b6000806000611557858561156f565b91509150611564816115c0565b819250505092915050565b60008060418351036115b05760008060006020860151925060408601519150606086015160001a90506115a487828585611726565b945094505050506115b9565b60006002915091505b9250929050565b600060048111156115d4576115d3612c9a565b5b8160048111156115e7576115e6612c9a565b5b0315611723576001600481111561160157611600612c9a565b5b81600481111561161457611613612c9a565b5b03611654576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164b90612d15565b60405180910390fd5b6002600481111561166857611667612c9a565b5b81600481111561167b5761167a612c9a565b5b036116bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b290612d81565b60405180910390fd5b600360048111156116cf576116ce612c9a565b5b8160048111156116e2576116e1612c9a565b5b03611722576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171990612e13565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156117615760006003915091506117ff565b6000600187878787604051600081526020016040526040516117869493929190612e4c565b6020604051602081039080840390855afa1580156117a8573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036117f6576000600192509250506117ff565b80600092509250505b94509492505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006118478261181c565b9050919050565b6118578161183c565b811461186257600080fd5b50565b6000813590506118748161184e565b92915050565b6000602082840312156118905761188f611812565b5b600061189e84828501611865565b91505092915050565b600080fd5b600061012082840312156118c3576118c26118a7565b5b81905092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126118f1576118f06118cc565b5b8235905067ffffffffffffffff81111561190e5761190d6118d1565b5b60208301915083600182028301111561192a576119296118d6565b5b9250929050565b60008060006040848603121561194a57611949611812565b5b600084013567ffffffffffffffff81111561196857611967611817565b5b611974868287016118ac565b935050602084013567ffffffffffffffff81111561199557611994611817565b5b6119a1868287016118db565b92509250509250925092565b6000819050919050565b6119c0816119ad565b81146119cb57600080fd5b50565b6000813590506119dd816119b7565b92915050565b600060ff82169050919050565b6119f9816119e3565b8114611a0457600080fd5b50565b600081359050611a16816119f0565b92915050565b600080600080600060a08688031215611a3857611a37611812565b5b6000611a4688828901611865565b9550506020611a5788828901611865565b9450506040611a6888828901611865565b9350506060611a79888289016119ce565b9250506080611a8a88828901611a07565b9150509295509295909350565b611aa0816119ad565b82525050565b600062ffffff82169050919050565b611abe81611aa6565b82525050565b6000604082019050611ad96000830185611a97565b611ae66020830184611ab5565b9392505050565b611af68161183c565b82525050565b6000602082019050611b116000830184611aed565b92915050565b60008083601f840112611b2d57611b2c6118cc565b5b8235905067ffffffffffffffff811115611b4a57611b496118d1565b5b602083019150836020820283011115611b6657611b656118d6565b5b9250929050565b60008060208385031215611b8457611b83611812565b5b600083013567ffffffffffffffff811115611ba257611ba1611817565b5b611bae85828601611b17565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611c20578082015181840152602081019050611c05565b60008484015250505050565b6000601f19601f8301169050919050565b6000611c4882611be6565b611c528185611bf1565b9350611c62818560208601611c02565b611c6b81611c2c565b840191505092915050565b6000611c828383611c3d565b905092915050565b6000602082019050919050565b6000611ca282611bba565b611cac8185611bc5565b935083602082028501611cbe85611bd6565b8060005b85811015611cfa5784840389528151611cdb8582611c76565b9450611ce683611c8a565b925060208a01995050600181019050611cc2565b50829750879550505050505092915050565b60006020820190508181036000830152611d268184611c97565b905092915050565b60006101008284031215611d4557611d446118a7565b5b81905092915050565b600080600060408486031215611d6757611d66611812565b5b600084013567ffffffffffffffff811115611d8557611d84611817565b5b611d9186828701611d2e565b935050602084013567ffffffffffffffff811115611db257611db1611817565b5b611dbe868287016118db565b92509250509250925092565b600082825260208201905092915050565b7f696e76616c69642073656e646572000000000000000000000000000000000000600082015250565b6000611e11600e83611dca565b9150611e1c82611ddb565b602082019050919050565b60006020820190508181036000830152611e4081611e04565b9050919050565b7f696e73756666696369656e742076616c75650000000000000000000000000000600082015250565b6000611e7d601283611dca565b9150611e8882611e47565b602082019050919050565b60006020820190508181036000830152611eac81611e70565b9050919050565b6000611ec26020840184611865565b905092915050565b611ed38161183c565b82525050565b6000611ee860208401846119ce565b905092915050565b611ef9816119ad565b82525050565b60008115159050919050565b611f1481611eff565b8114611f1f57600080fd5b50565b600081359050611f3181611f0b565b92915050565b6000611f466020840184611f22565b905092915050565b611f5781611eff565b82525050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112611f8957611f88611f67565b5b83810192508235915060208301925067ffffffffffffffff821115611fb157611fb0611f5d565b5b600182023603831315611fc757611fc6611f62565b5b509250929050565b82818337600083830152505050565b6000611fea8385611bf1565b9350611ff7838584611fcf565b61200083611c2c565b840190509392505050565b6000610120830161201f6000840184611eb3565b61202c6000860182611eca565b5061203a6020840184611eb3565b6120476020860182611eca565b506120556040840184611eb3565b6120626040860182611eca565b506120706060840184611ed9565b61207d6060860182611ef0565b5061208b6080840184611f37565b6120986080860182611f4e565b506120a660a0840184611ed9565b6120b360a0860182611ef0565b506120c160c0840184611ed9565b6120ce60c0860182611ef0565b506120dc60e0840184611ed9565b6120e960e0860182611ef0565b506120f8610100840184611f6c565b85830361010087015261210c838284611fde565b925050508091505092915050565b60006020820190508181036000830152612134818461200b565b905092915050565b60006020828403121561215257612151611812565b5b600061216084828501611f22565b91505092915050565b600081519050612178816119b7565b92915050565b60006020828403121561219457612193611812565b5b60006121a284828501612169565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006121e5826119ad565b91506121f0836119ad565b92508282026121fe816119ad565b91508282048414831517612215576122146121ab565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612256826119ad565b9150612261836119ad565b9250826122715761227061221c565b5b828204905092915050565b6000612287826119ad565b9150612292836119ad565b92508282039050818111156122aa576122a96121ab565b5b92915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126122dc576122db6122b0565b5b80840192508235915067ffffffffffffffff8211156122fe576122fd6122b5565b5b60208301925060018202360383131561231a576123196122ba565b5b509250929050565b600082825260208201905092915050565b600061233f8385612322565b935061234c838584611fcf565b61235583611c2c565b840190509392505050565b6000604082019050818103600083015261237b818587612333565b905061238a6020830184611a97565b949350505050565b61239b816119e3565b82525050565b600060a0820190506123b66000830188611aed565b6123c36020830187611aed565b6123d06040830186611aed565b6123dd6060830185611a97565b6123ea6080830184612392565b9695505050505050565b6123fd81611aa6565b811461240857600080fd5b50565b60008151905061241a816123f4565b92915050565b6000806040838503121561243757612436611812565b5b600061244585828601612169565b92505060206124568582860161240b565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b60006124d583856124be565b93506124e2838584611fcf565b82840190509392505050565b60006124fb8284866124c9565b91508190509392505050565b600080fd5b61251582611c2c565b810181811067ffffffffffffffff8211171561253457612533612460565b5b80604052505050565b6000612547611808565b9050612553828261250c565b919050565b600067ffffffffffffffff82111561257357612572612460565b5b61257c82611c2c565b9050602081019050919050565b600061259c61259784612558565b61253d565b9050828152602081018484840111156125b8576125b7612507565b5b6125c3848285611c02565b509392505050565b600082601f8301126125e0576125df6118cc565b5b81516125f0848260208601612589565b91505092915050565b60006020828403121561260f5761260e611812565b5b600082015167ffffffffffffffff81111561262d5761262c611817565b5b612639848285016125cb565b91505092915050565b600081519050919050565b600061265882612642565b6126628185611dca565b9350612672818560208601611c02565b61267b81611c2c565b840191505092915050565b600060208201905081810360008301526126a0818461264d565b905092915050565b60006126b3826119ad565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036126e5576126e46121ab565b5b600182019050919050565b600061010083016127046000840184611eb3565b6127116000860182611eca565b5061271f6020840184611ed9565b61272c6020860182611ef0565b5061273a6040840184611ed9565b6127476040860182611ef0565b506127556060840184611ed9565b6127626060860182611ef0565b506127706080840184611eb3565b61277d6080860182611eca565b5061278b60a0840184611f6c565b85830360a087015261279e838284611fde565b925050506127af60c0840184611eb3565b6127bc60c0860182611eca565b506127ca60e0840184611f37565b6127d760e0860182611f4e565b508091505092915050565b600060208201905081810360008301526127fc81846126f0565b905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612860602683611dca565b915061286b82612804565b604082019050919050565b6000602082019050818103600083015261288f81612853565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006128cc602083611dca565b91506128d782612896565b602082019050919050565b600060208201905081810360008301526128fb816128bf565b9050919050565b7f646174612074616d706572656400000000000000000000000000000000000000600082015250565b6000612938600d83611dca565b915061294382612902565b602082019050919050565b600060208201905081810360008301526129678161292b565b9050919050565b60006060820190506129836000830186611aed565b6129906020830185611aed565b61299d6040830184611a97565b949350505050565b60006129b082611be6565b6129ba81856124be565b93506129ca818560208601611c02565b80840191505092915050565b60006129e282846129a5565b915081905092915050565b6000815190506129fc81611f0b565b92915050565b600060208284031215612a1857612a17611812565b5b6000612a26848285016129ed565b91505092915050565b7f5472616e7366657248656c7065723a736166655472616e7366657246726f6d00600082015250565b6000612a65601f83611dca565b9150612a7082612a2f565b602082019050919050565b60006020820190508181036000830152612a9481612a58565b9050919050565b6000604082019050612ab06000830185611aed565b612abd6020830184611a97565b9392505050565b7f5472616e7366657248656c7065723a736166655472616e736665720000000000600082015250565b6000612afa601b83611dca565b9150612b0582612ac4565b602082019050919050565b60006020820190508181036000830152612b2981612aed565b9050919050565b7f5472616e7366657248656c7065723a73616665417070726f7665000000000000600082015250565b6000612b66601a83611dca565b9150612b7182612b30565b602082019050919050565b60006020820190508181036000830152612b9581612b59565b9050919050565b7f5472616e7366657248656c7065723a736166655472616e736665724554480000600082015250565b6000612bd2601e83611dca565b9150612bdd82612b9c565b602082019050919050565b60006020820190508181036000830152612c0181612bc5565b9050919050565b7f45786368616e676541676772656761746f723a3a5361666543616c6c65723a7360008201527f61666543616c6c00000000000000000000000000000000000000000000000000602082015250565b6000612c64602783611dca565b9150612c6f82612c08565b604082019050919050565b60006020820190508181036000830152612c9381612c57565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000612cff601883611dca565b9150612d0a82612cc9565b602082019050919050565b60006020820190508181036000830152612d2e81612cf2565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000612d6b601f83611dca565b9150612d7682612d35565b602082019050919050565b60006020820190508181036000830152612d9a81612d5e565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000612dfd602283611dca565b9150612e0882612da1565b604082019050919050565b60006020820190508181036000830152612e2c81612df0565b9050919050565b6000819050919050565b612e4681612e33565b82525050565b6000608082019050612e616000830187612e3d565b612e6e6020830186612392565b612e7b6040830185612e3d565b612e886060830184612e3d565b9594505050505056fea2646970667358221220d8e6be66e33ea4d41eb69e6c6a7a257c87fde8f12d3cd6485147f6f9f05613d064736f6c63430008120033",
}

// ContractsABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractsMetaData.ABI instead.
var ContractsABI = ContractsMetaData.ABI

// ContractsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractsMetaData.Bin instead.
var ContractsBin = ContractsMetaData.Bin

// DeployContracts deploys a new Ethereum contract, binding an instance of Contracts to it.
func DeployContracts(auth *bind.TransactOpts, backend bind.ContractBackend, _priceProvider common.Address) (common.Address, *types.Transaction, *Contracts, error) {
	parsed, err := ContractsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractsBin), backend, _priceProvider)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Contracts{ContractsCaller: ContractsCaller{contract: contract}, ContractsTransactor: ContractsTransactor{contract: contract}, ContractsFilterer: ContractsFilterer{contract: contract}}, nil
}

// Contracts is an auto generated Go binding around an Ethereum contract.
type Contracts struct {
	ContractsCaller     // Read-only binding to the contract
	ContractsTransactor // Write-only binding to the contract
	ContractsFilterer   // Log filterer for contract events
}

// ContractsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractsSession struct {
	Contract     *Contracts        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContractsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractsCallerSession struct {
	Contract *ContractsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ContractsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractsTransactorSession struct {
	Contract     *ContractsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ContractsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractsRaw struct {
	Contract *Contracts // Generic contract binding to access the raw methods on
}

// ContractsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractsCallerRaw struct {
	Contract *ContractsCaller // Generic read-only contract binding to access the raw methods on
}

// ContractsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractsTransactorRaw struct {
	Contract *ContractsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContracts creates a new instance of Contracts, bound to a specific deployed contract.
func NewContracts(address common.Address, backend bind.ContractBackend) (*Contracts, error) {
	contract, err := bindContracts(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Contracts{ContractsCaller: ContractsCaller{contract: contract}, ContractsTransactor: ContractsTransactor{contract: contract}, ContractsFilterer: ContractsFilterer{contract: contract}}, nil
}

// NewContractsCaller creates a new read-only instance of Contracts, bound to a specific deployed contract.
func NewContractsCaller(address common.Address, caller bind.ContractCaller) (*ContractsCaller, error) {
	contract, err := bindContracts(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractsCaller{contract: contract}, nil
}

// NewContractsTransactor creates a new write-only instance of Contracts, bound to a specific deployed contract.
func NewContractsTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractsTransactor, error) {
	contract, err := bindContracts(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractsTransactor{contract: contract}, nil
}

// NewContractsFilterer creates a new log filterer instance of Contracts, bound to a specific deployed contract.
func NewContractsFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractsFilterer, error) {
	contract, err := bindContracts(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractsFilterer{contract: contract}, nil
}

// bindContracts binds a generic wrapper to an already deployed contract.
func bindContracts(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ContractsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contracts *ContractsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contracts.Contract.ContractsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contracts *ContractsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contracts.Contract.ContractsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contracts *ContractsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contracts.Contract.ContractsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contracts *ContractsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contracts.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contracts *ContractsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contracts.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contracts *ContractsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contracts.Contract.contract.Transact(opts, method, params...)
}

// EstimateAmountOut is a free data retrieval call binding the contract method 0x6110358d.
//
// Solidity: function estimateAmountOut(address provider, address tA, address tB, uint256 amountIn, uint8 version) view returns(uint256 amountOut, uint24 fee)
func (_Contracts *ContractsCaller) EstimateAmountOut(opts *bind.CallOpts, provider common.Address, tA common.Address, tB common.Address, amountIn *big.Int, version uint8) (struct {
	AmountOut *big.Int
	Fee       *big.Int
}, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "estimateAmountOut", provider, tA, tB, amountIn, version)

	outstruct := new(struct {
		AmountOut *big.Int
		Fee       *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AmountOut = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Fee = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// EstimateAmountOut is a free data retrieval call binding the contract method 0x6110358d.
//
// Solidity: function estimateAmountOut(address provider, address tA, address tB, uint256 amountIn, uint8 version) view returns(uint256 amountOut, uint24 fee)
func (_Contracts *ContractsSession) EstimateAmountOut(provider common.Address, tA common.Address, tB common.Address, amountIn *big.Int, version uint8) (struct {
	AmountOut *big.Int
	Fee       *big.Int
}, error) {
	return _Contracts.Contract.EstimateAmountOut(&_Contracts.CallOpts, provider, tA, tB, amountIn, version)
}

// EstimateAmountOut is a free data retrieval call binding the contract method 0x6110358d.
//
// Solidity: function estimateAmountOut(address provider, address tA, address tB, uint256 amountIn, uint8 version) view returns(uint256 amountOut, uint24 fee)
func (_Contracts *ContractsCallerSession) EstimateAmountOut(provider common.Address, tA common.Address, tB common.Address, amountIn *big.Int, version uint8) (struct {
	AmountOut *big.Int
	Fee       *big.Int
}, error) {
	return _Contracts.Contract.EstimateAmountOut(&_Contracts.CallOpts, provider, tA, tB, amountIn, version)
}

// FeeReciever is a free data retrieval call binding the contract method 0xf61db740.
//
// Solidity: function feeReciever() view returns(address)
func (_Contracts *ContractsCaller) FeeReciever(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "feeReciever")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FeeReciever is a free data retrieval call binding the contract method 0xf61db740.
//
// Solidity: function feeReciever() view returns(address)
func (_Contracts *ContractsSession) FeeReciever() (common.Address, error) {
	return _Contracts.Contract.FeeReciever(&_Contracts.CallOpts)
}

// FeeReciever is a free data retrieval call binding the contract method 0xf61db740.
//
// Solidity: function feeReciever() view returns(address)
func (_Contracts *ContractsCallerSession) FeeReciever() (common.Address, error) {
	return _Contracts.Contract.FeeReciever(&_Contracts.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contracts *ContractsCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contracts *ContractsSession) Owner() (common.Address, error) {
	return _Contracts.Contract.Owner(&_Contracts.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contracts *ContractsCallerSession) Owner() (common.Address, error) {
	return _Contracts.Contract.Owner(&_Contracts.CallOpts)
}

// PriceProvider is a free data retrieval call binding the contract method 0xb888879e.
//
// Solidity: function priceProvider() view returns(address)
func (_Contracts *ContractsCaller) PriceProvider(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "priceProvider")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PriceProvider is a free data retrieval call binding the contract method 0xb888879e.
//
// Solidity: function priceProvider() view returns(address)
func (_Contracts *ContractsSession) PriceProvider() (common.Address, error) {
	return _Contracts.Contract.PriceProvider(&_Contracts.CallOpts)
}

// PriceProvider is a free data retrieval call binding the contract method 0xb888879e.
//
// Solidity: function priceProvider() view returns(address)
func (_Contracts *ContractsCallerSession) PriceProvider() (common.Address, error) {
	return _Contracts.Contract.PriceProvider(&_Contracts.CallOpts)
}

// Bridge is a paid mutator transaction binding the contract method 0x421fcefa.
//
// Solidity: function Bridge((address,address,address,uint256,bool,uint256,uint256,uint256,bytes) data, bytes sig) payable returns()
func (_Contracts *ContractsTransactor) Bridge(opts *bind.TransactOpts, data IBridgeAggregatorbridgeInput, sig []byte) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "Bridge", data, sig)
}

// Bridge is a paid mutator transaction binding the contract method 0x421fcefa.
//
// Solidity: function Bridge((address,address,address,uint256,bool,uint256,uint256,uint256,bytes) data, bytes sig) payable returns()
func (_Contracts *ContractsSession) Bridge(data IBridgeAggregatorbridgeInput, sig []byte) (*types.Transaction, error) {
	return _Contracts.Contract.Bridge(&_Contracts.TransactOpts, data, sig)
}

// Bridge is a paid mutator transaction binding the contract method 0x421fcefa.
//
// Solidity: function Bridge((address,address,address,uint256,bool,uint256,uint256,uint256,bytes) data, bytes sig) payable returns()
func (_Contracts *ContractsTransactorSession) Bridge(data IBridgeAggregatorbridgeInput, sig []byte) (*types.Transaction, error) {
	return _Contracts.Contract.Bridge(&_Contracts.TransactOpts, data, sig)
}

// Swap is a paid mutator transaction binding the contract method 0xdd5129b8.
//
// Solidity: function Swap((address,uint256,uint256,uint256,address,bytes,address,bool) data, bytes sig) payable returns()
func (_Contracts *ContractsTransactor) Swap(opts *bind.TransactOpts, data IExchangeAggregatorswapInput, sig []byte) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "Swap", data, sig)
}

// Swap is a paid mutator transaction binding the contract method 0xdd5129b8.
//
// Solidity: function Swap((address,uint256,uint256,uint256,address,bytes,address,bool) data, bytes sig) payable returns()
func (_Contracts *ContractsSession) Swap(data IExchangeAggregatorswapInput, sig []byte) (*types.Transaction, error) {
	return _Contracts.Contract.Swap(&_Contracts.TransactOpts, data, sig)
}

// Swap is a paid mutator transaction binding the contract method 0xdd5129b8.
//
// Solidity: function Swap((address,uint256,uint256,uint256,address,bytes,address,bool) data, bytes sig) payable returns()
func (_Contracts *ContractsTransactorSession) Swap(data IExchangeAggregatorswapInput, sig []byte) (*types.Transaction, error) {
	return _Contracts.Contract.Swap(&_Contracts.TransactOpts, data, sig)
}

// ChangeFeeReciever is a paid mutator transaction binding the contract method 0x15109660.
//
// Solidity: function changeFeeReciever(address _feeReciever) returns()
func (_Contracts *ContractsTransactor) ChangeFeeReciever(opts *bind.TransactOpts, _feeReciever common.Address) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "changeFeeReciever", _feeReciever)
}

// ChangeFeeReciever is a paid mutator transaction binding the contract method 0x15109660.
//
// Solidity: function changeFeeReciever(address _feeReciever) returns()
func (_Contracts *ContractsSession) ChangeFeeReciever(_feeReciever common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.ChangeFeeReciever(&_Contracts.TransactOpts, _feeReciever)
}

// ChangeFeeReciever is a paid mutator transaction binding the contract method 0x15109660.
//
// Solidity: function changeFeeReciever(address _feeReciever) returns()
func (_Contracts *ContractsTransactorSession) ChangeFeeReciever(_feeReciever common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.ChangeFeeReciever(&_Contracts.TransactOpts, _feeReciever)
}

// ChangePriceProvider is a paid mutator transaction binding the contract method 0xae4f5be8.
//
// Solidity: function changePriceProvider(address _priceProvider) returns()
func (_Contracts *ContractsTransactor) ChangePriceProvider(opts *bind.TransactOpts, _priceProvider common.Address) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "changePriceProvider", _priceProvider)
}

// ChangePriceProvider is a paid mutator transaction binding the contract method 0xae4f5be8.
//
// Solidity: function changePriceProvider(address _priceProvider) returns()
func (_Contracts *ContractsSession) ChangePriceProvider(_priceProvider common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.ChangePriceProvider(&_Contracts.TransactOpts, _priceProvider)
}

// ChangePriceProvider is a paid mutator transaction binding the contract method 0xae4f5be8.
//
// Solidity: function changePriceProvider(address _priceProvider) returns()
func (_Contracts *ContractsTransactorSession) ChangePriceProvider(_priceProvider common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.ChangePriceProvider(&_Contracts.TransactOpts, _priceProvider)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) payable returns(bytes[] results)
func (_Contracts *ContractsTransactor) Multicall(opts *bind.TransactOpts, data [][]byte) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "multicall", data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) payable returns(bytes[] results)
func (_Contracts *ContractsSession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _Contracts.Contract.Multicall(&_Contracts.TransactOpts, data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) payable returns(bytes[] results)
func (_Contracts *ContractsTransactorSession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _Contracts.Contract.Multicall(&_Contracts.TransactOpts, data)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Contracts *ContractsTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Contracts *ContractsSession) RenounceOwnership() (*types.Transaction, error) {
	return _Contracts.Contract.RenounceOwnership(&_Contracts.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Contracts *ContractsTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Contracts.Contract.RenounceOwnership(&_Contracts.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Contracts *ContractsTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Contracts *ContractsSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.TransferOwnership(&_Contracts.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Contracts *ContractsTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.TransferOwnership(&_Contracts.TransactOpts, newOwner)
}

// ContractsOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Contracts contract.
type ContractsOwnershipTransferredIterator struct {
	Event *ContractsOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsOwnershipTransferred represents a OwnershipTransferred event raised by the Contracts contract.
type ContractsOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Contracts *ContractsFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ContractsOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ContractsOwnershipTransferredIterator{contract: _Contracts.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Contracts *ContractsFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ContractsOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsOwnershipTransferred)
				if err := _Contracts.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Contracts *ContractsFilterer) ParseOwnershipTransferred(log types.Log) (*ContractsOwnershipTransferred, error) {
	event := new(ContractsOwnershipTransferred)
	if err := _Contracts.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
