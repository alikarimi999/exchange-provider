// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package AnyswapV6Router

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"exchange-provider/pkg/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ContractsMetaData contains all meta data concerning the Contracts contract.
var ContractsMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wNATIVE\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mpc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txhash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"LogAnySwapIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"LogAnySwapOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"to\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"LogAnySwapOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"LogAnySwapTradeTokensForNative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"LogAnySwapTradeTokensForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldMPC\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMPC\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"effectiveTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"LogChangeMPC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRouter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"LogChangeRouter\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"anySwapFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"txs\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fromChainIDs\",\"type\":\"uint256[]\"}],\"name\":\"anySwapIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txs\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainID\",\"type\":\"uint256\"}],\"name\":\"anySwapIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txs\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainID\",\"type\":\"uint256\"}],\"name\":\"anySwapInAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txs\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainID\",\"type\":\"uint256\"}],\"name\":\"anySwapInExactTokensForNative\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txs\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainID\",\"type\":\"uint256\"}],\"name\":\"anySwapInExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txs\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainID\",\"type\":\"uint256\"}],\"name\":\"anySwapInUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"anySwapOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"to\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"anySwapOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"toChainIDs\",\"type\":\"uint256[]\"}],\"name\":\"anySwapOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"anySwapOutExactTokensForNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"anySwapOutExactTokensForNativeUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"anySwapOutExactTokensForTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"anySwapOutExactTokensForTokensUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"to\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"anySwapOutNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"anySwapOutNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"to\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"anySwapOutUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"anySwapOutUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"applyMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMPC\",\"type\":\"address\"}],\"name\":\"changeMPC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newVault\",\"type\":\"address\"}],\"name\":\"changeVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"depositNative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSwapTrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mpc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_auth\",\"type\":\"address\"}],\"name\":\"revokeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setEnableSwapTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_auth\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wNATIVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawNative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60c06040523480156200001157600080fd5b506040516200445738038062004457833981016040819052620000349162000081565b600180546001600160a01b0319166001600160a01b03928316179055426002559182166080521660a052620000cb565b80516001600160a01b03811681146200007c57600080fd5b919050565b6000806000606084860312156200009757600080fd5b620000a28462000064565b9250620000b26020850162000064565b9150620000c26040850162000064565b90509250925092565b60805160a0516142c562000192600039600081816102230152818161055901528181610845015281816109050152818161125a0152818161144301528181611519015281816115cb0152818161165f01528181611afd01528181611baf01528181611c4301528181611d8b01528181611ec3015281816121690152818161221b01526122af01526000818161060b01528181610c5901528181610e2001528181610f38015281816113060152818161243d01528181612fe4015261303401526142c56000f3fe6080604052600436106102135760003560e01c8063825bb13c11610118578063ad615dec116100a0578063d8b9f6101161006f578063d8b9f6101461066d578063d9e35bb21461068d578063dcfb77b1146106ad578063edbdf5e2146106cd578063f75c2664146106ed57600080fd5b8063ad615dec146105d9578063c45a0155146105f9578063c604b0b81461062d578063d06ca61f1461064d57600080fd5b806387cc6e2f116100e757806387cc6e2f146105275780638fd903f51461054757806399a2f2d7146105935780639f122d6c146105a6578063a5e56571146105c657600080fd5b8063825bb13c146104a7578063832e9492146104c757806385f8c259146104e757806387bafe5f1461050757600080fd5b8063353cb3a81161019b578063540dd52c1161016a578063540dd52c146104215780635b7b018c1461043457806365782f56146104545780636a45397214610474578063701bb8911461049457600080fd5b8063353cb3a8146103975780633f88de89146103c1578063456862aa146103e157806352a397d51461040157600080fd5b80630bb57203116101e25780630bb57203146102ea5780631f00ca741461030a578063241dc2df1461033757806325121b76146103575780632fc1e7281461037757600080fd5b80630175b1c414610257578063049b4e7e14610277578063054d50d414610297578063085c6d5e146102ca57600080fd5b3661025257336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610250576102506136d7565b005b600080fd5b34801561026357600080fd5b50610250610272366004613702565b610702565b34801561028357600080fd5b5061025061029236600461380b565b6109f4565b3480156102a357600080fd5b506102b76102b236600461386b565b610abc565b6040519081526020015b60405180910390f35b3480156102d657600080fd5b506102506102e53660046138a5565b610ad1565b3480156102f657600080fd5b5061025061030536600461390e565b610b1c565b34801561031657600080fd5b5061032a61032536600461398b565b610c52565b6040516102c19190613a49565b34801561034357600080fd5b50610250610352366004613a8d565b610c88565b34801561036357600080fd5b50610250610372366004613ad3565b610c9b565b34801561038357600080fd5b5061032a610392366004613bc4565b610d9e565b3480156103a357600080fd5b506000546103b19060ff1681565b60405190151581526020016102c1565b3480156103cd57600080fd5b506102506103dc366004613702565b611019565b3480156103ed57600080fd5b506103b16103fc366004613c49565b6110d7565b34801561040d57600080fd5b5061032a61041c366004613bc4565b6111d3565b61025061042f366004613c82565b611517565b34801561044057600080fd5b506103b161044f366004613cdb565b611729565b34801561046057600080fd5b5061025061046f36600461390e565b611860565b34801561048057600080fd5b5061025061048f36600461390e565b611975565b6102b76104a2366004613c49565b611af9565b3480156104b357600080fd5b506102506104c2366004613702565b611d3b565b3480156104d357600080fd5b506102b76104e2366004613cf8565b611d87565b3480156104f357600080fd5b506102b761050236600461386b565b611f39565b34801561051357600080fd5b50610250610522366004613c49565b611f46565b34801561053357600080fd5b50610250610542366004613d3a565b611fd6565b34801561055357600080fd5b5061057b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102c1565b34801561059f57600080fd5b50466102b7565b3480156105b257600080fd5b506102506105c1366004613c49565b612101565b6102506105d4366004613d66565b612167565b3480156105e557600080fd5b506102b76105f436600461386b565b612383565b34801561060557600080fd5b5061057b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561063957600080fd5b5061025061064836600461380b565b612390565b34801561065957600080fd5b5061032a61066836600461398b565b612436565b34801561067957600080fd5b5061025061068836600461390e565b612463565b34801561069957600080fd5b506102506106a8366004613cdb565b61256c565b3480156106b957600080fd5b506102506106c8366004613da7565b6125f6565b3480156106d957600080fd5b506102506106e8366004613a8d565b6126a7565b3480156106f957600080fd5b5061057b612743565b61070a612743565b6001600160a01b0316336001600160a01b0316146107435760405162461bcd60e51b815260040161073a90613e6b565b60405180910390fd5b6107508585858585612773565b60008490506000816001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610795573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b99190613ea2565b90506001600160a01b0381161580159061083e57506040516370a0823160e01b81526001600160a01b0387811660048301528591908316906370a0823190602401602060405180830381865afa158015610817573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083b9190613ebf565b10155b156109eb577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316141561097857604051620e75bb60e21b81526001600160a01b038316906239d6ec906108ab90889088903090600401613ed8565b6020604051808303816000875af11580156108ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ee9190613ebf565b50604051632e1a7d4d60e01b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561095157600080fd5b505af1158015610965573d6000803e3d6000fd5b50505050610973858561284c565b6109eb565b604051620e75bb60e21b81526001600160a01b038316906239d6ec906109a690889088908290600401613ed8565b6020604051808303816000875af11580156109c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e99190613ebf565b505b50505050505050565b610a6d338584876001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5c9190613ea2565b6001600160a01b031692919061291d565b336001600160a01b0385167f409e0ad946b19f77602d6cf11d59e1796ddaa4828159a0b4fb7fa2ff6b161b798585465b86604051610aae9493929190613f53565b60405180910390a350505050565b6000610ac9848484612977565b949350505050565b610ad9612743565b6001600160a01b0316336001600160a01b031614610b095760405162461bcd60e51b815260040161073a90613e6b565b6000805460ff1916911515919091179055565b60005460ff16610b3e5760405162461bcd60e51b815260040161073a90613f82565b8142811015610b5f5760405162461bcd60e51b815260040161073a90613fc5565b85856000818110610b7257610b72613ffc565b9050602002016020810190610b879190613cdb565b604051632770a7eb60e21b8152336004820152602481018a90526001600160a01b039190911690639dc29fac906044016020604051808303816000875af1158015610bd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfa9190614012565b506001600160a01b038416337ffea6abdf4fd32f20966dff7619354cd82cd43dc78a3bee479f04c74dbfc585b388888c8c465b89604051610c409695949392919061402f565b60405180910390a35050505050505050565b6060610c7f7f00000000000000000000000000000000000000000000000000000000000000008484612a45565b90505b92915050565b610c953385858585612bdb565b50505050565b610ca3612743565b6001600160a01b0316336001600160a01b031614610cd35760405162461bcd60e51b815260040161073a90613e6b565b60005b87811015610d9157610d7f8b8b83818110610cf357610cf3613ffc565b905060200201358a8a84818110610d0c57610d0c613ffc565b9050602002016020810190610d219190613cdb565b898985818110610d3357610d33613ffc565b9050602002016020810190610d489190613cdb565b888886818110610d5a57610d5a613ffc565b90506020020135878787818110610d7357610d73613ffc565b90506020020135612773565b80610d89816140af565b915050610cd6565b5050505050505050505050565b6060610da8612743565b6001600160a01b0316336001600160a01b031614610dd85760405162461bcd60e51b815260040161073a90613e6b565b60005460ff16610dfa5760405162461bcd60e51b815260040161073a90613f82565b8242811015610e1b5760405162461bcd60e51b815260040161073a90613fc5565b610e797f00000000000000000000000000000000000000000000000000000000000000008a898980806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612cb292505050565b9150878260018451610e8b91906140ca565b81518110610e9b57610e9b613ffc565b60200260200101511015610f075760405162461bcd60e51b815260206004820152602d60248201527f5375736869737761705632526f757465723a20494e53554646494349454e545f60448201526c13d55514155517d05353d55395609a1b606482015260840161073a565b610fcd8a88886000818110610f1e57610f1e613ffc565b9050602002016020810190610f339190613cdb565b610fac7f00000000000000000000000000000000000000000000000000000000000000008b8b6000818110610f6a57610f6a613ffc565b9050602002016020810190610f7f9190613cdb565b8c8c6001818110610f9257610f92613ffc565b9050602002016020810190610fa79190613cdb565b612e28565b85600081518110610fbf57610fbf613ffc565b602002602001015187612773565b61100c828888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508a9250612f01915050565b5098975050505050505050565b611021612743565b6001600160a01b0316336001600160a01b0316146110515760405162461bcd60e51b815260040161073a90613e6b565b61105e8585858585612773565b604051620e75bb60e21b81526001600160a01b038516906239d6ec9061108c90869086908290600401613ed8565b6020604051808303816000875af11580156110ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cf9190613ebf565b505050505050565b60006110e1612743565b6001600160a01b0316336001600160a01b0316146111115760405162461bcd60e51b815260040161073a90613e6b565b6001600160a01b0382166111675760405162461bcd60e51b815260206004820152601d60248201527f416e79737761705633526f757465723a20616464726573732830783029000000604482015260640161073a565b6040516360e232a960e01b81526001600160a01b0383811660048301528416906360e232a9906024016020604051808303816000875af11580156111af573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7f9190614012565b60606111dd612743565b6001600160a01b0316336001600160a01b03161461120d5760405162461bcd60e51b815260040161073a90613e6b565b60005460ff1661122f5760405162461bcd60e51b815260040161073a90613f82565b82428110156112505760405162461bcd60e51b815260040161073a90613fc5565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001687876112876001826140ca565b81811061129657611296613ffc565b90506020020160208101906112ab9190613cdb565b6001600160a01b0316146113015760405162461bcd60e51b815260206004820152601d60248201527f416e79737761705633526f757465723a20494e56414c49445f50415448000000604482015260640161073a565b61135f7f00000000000000000000000000000000000000000000000000000000000000008a898980806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612cb292505050565b915087826001845161137191906140ca565b8151811061138157611381613ffc565b602002602001015110156113eb5760405162461bcd60e51b815260206004820152602b60248201527f416e79737761705633526f757465723a20494e53554646494349454e545f4f5560448201526a1514155517d05353d5539560aa1b606482015260840161073a565b6114028a88886000818110610f1e57610f1e613ffc565b61144182888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250309250612f01915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d836001855161147f91906140ca565b8151811061148f5761148f613ffc565b60200260200101516040518263ffffffff1660e01b81526004016114b591815260200190565b600060405180830381600087803b1580156114cf57600080fd5b505af11580156114e3573d6000803e3d6000fd5b5050505061100c8583600185516114fa91906140ca565b8151811061150a5761150a613ffc565b602002602001015161284c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561157f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a39190613ea2565b6001600160a01b0316146115c95760405162461bcd60e51b815260040161073a906140e1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561162457600080fd5b505af1158015611638573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b0387811660048301523460248301527f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb925060440190506020604051808303816000875af11580156116ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d09190614012565b6116dc576116dc6136d7565b336001600160a01b0384167f409e0ad946b19f77602d6cf11d59e1796ddaa4828159a0b4fb7fa2ff6b161b798434468660405161171c9493929190613f53565b60405180910390a3505050565b6000611733612743565b6001600160a01b0316336001600160a01b0316146117635760405162461bcd60e51b815260040161073a90613e6b565b6001600160a01b0382166117b95760405162461bcd60e51b815260206004820152601d60248201527f416e79737761705633526f757465723a20616464726573732830783029000000604482015260640161073a565b6117c1612743565b60008054610100600160a81b0319166101006001600160a01b0393841602179055600180546001600160a01b031916918416919091179055611806426202a30061412b565b60028190556001546000546001600160a01b0391821691610100909104167fcda32bc39904597666dfa9f9c845714756e1ffffad55b52e0d344673a21981214660405190815260200160405180910390a45060015b919050565b60005460ff166118825760405162461bcd60e51b815260040161073a90613f82565b81428110156118a35760405162461bcd60e51b815260040161073a90613fc5565b858560008181106118b6576118b6613ffc565b90506020020160208101906118cb9190613cdb565b604051632770a7eb60e21b8152336004820152602481018a90526001600160a01b039190911690639dc29fac906044016020604051808303816000875af115801561191a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193e9190614012565b506001600160a01b038416337f278277e0209c347189add7bd92411973b5f6b8644f7ac62ea1be984ce993f8f488888c8c46610c2d565b60005460ff166119975760405162461bcd60e51b815260040161073a90613f82565b81428110156119b85760405162461bcd60e51b815260040161073a90613fc5565b611a4a33878760008181106119cf576119cf613ffc565b90506020020160208101906119e49190613cdb565b8a898960008181106119f8576119f8613ffc565b9050602002016020810190611a0d9190613cdb565b6001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a38573d6000803e3d6000fd5b85856000818110611a5d57611a5d613ffc565b9050602002016020810190611a729190613cdb565b604051630bebbf4d60e41b8152600481018a90523360248201526001600160a01b03919091169063bebbf4d0906044016020604051808303816000875af1158015611ac1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae59190613ebf565b50858560008181106118b6576118b6613ffc565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b879190613ea2565b6001600160a01b031614611bad5760405162461bcd60e51b815260040161073a906140e1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015611c0857600080fd5b505af1158015611c1c573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b0387811660048301523460248301527f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb925060440190506020604051808303816000875af1158015611c90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb49190614012565b611cc057611cc06136d7565b604051630bebbf4d60e41b81523460048201526001600160a01b03838116602483015284169063bebbf4d0906044016020604051808303816000875af1158015611d0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d329190613ebf565b50349392505050565b611d43612743565b6001600160a01b0316336001600160a01b031614611d735760405162461bcd60e51b815260040161073a90613e6b565b611d808585858585612773565b5050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611df1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e159190613ea2565b6001600160a01b031614611e3b5760405162461bcd60e51b815260040161073a906140e1565b604051620e75bb60e21b81526001600160a01b038516906239d6ec90611e6990339087903090600401613ed8565b6020604051808303816000875af1158015611e88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eac9190613ebf565b50604051632e1a7d4d60e01b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015611f0f57600080fd5b505af1158015611f23573d6000803e3d6000fd5b50505050611f31828461284c565b509092915050565b6000610ac9848484613103565b611f4e612743565b6001600160a01b0316336001600160a01b031614611f7e5760405162461bcd60e51b815260040161073a90613e6b565b60405163cfbd488560e01b81526001600160a01b03828116600483015283169063cfbd4885906024015b600060405180830381600087803b158015611fc257600080fd5b505af11580156110cf573d6000803e3d6000fd5b611fde612743565b6001600160a01b0316336001600160a01b03161461200e5760405162461bcd60e51b815260040161073a90613e6b565b6000612018612743565b6040516340c10f1960e01b81526001600160a01b03808316600483015260248201859052919250908416906340c10f19906044016020604051808303816000875af115801561206b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061208f9190614012565b50604051620e75bb60e21b81526001600160a01b038416906239d6ec906120be90849086908290600401613ed8565b6020604051808303816000875af11580156120dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c959190613ebf565b612109612743565b6001600160a01b0316336001600160a01b0316146121395760405162461bcd60e51b815260040161073a90613e6b565b604051637e51dad560e11b81526001600160a01b03828116600483015283169063fca3b5aa90602401611fa8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f39190613ea2565b6001600160a01b0316146122195760405162461bcd60e51b815260040161073a906140e1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561227457600080fd5b505af1158015612288573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b0387811660048301523460248301527f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb925060440190506020604051808303816000875af11580156122fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123209190614012565b61232c5761232c6136d7565b6001600160a01b0380831690339085167f97116cf6cd4f6412bb47914d6db18da9e16ab2142f543b86e207c24fbd16b23a3446604080519283526020830191909152810186905260600160405180910390a4505050565b6000610ac98484846131cc565b604051632770a7eb60e21b8152336004820152602481018390526001600160a01b03851690639dc29fac906044016020604051808303816000875af11580156123dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124019190614012565b50336001600160a01b0385167f409e0ad946b19f77602d6cf11d59e1796ddaa4828159a0b4fb7fa2ff6b161b79858546610a9d565b6060610c7f7f00000000000000000000000000000000000000000000000000000000000000008484612cb2565b60005460ff166124855760405162461bcd60e51b815260040161073a90613f82565b81428110156124a65760405162461bcd60e51b815260040161073a90613fc5565b6124bd33878760008181106119cf576119cf613ffc565b858560008181106124d0576124d0613ffc565b90506020020160208101906124e59190613cdb565b604051630bebbf4d60e41b8152600481018a90523360248201526001600160a01b03919091169063bebbf4d0906044016020604051808303816000875af1158015612534573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125589190613ebf565b5085856000818110610b7257610b72613ffc565b612574612743565b6001600160a01b0316336001600160a01b0316146125a45760405162461bcd60e51b815260040161073a90613e6b565b806001600160a01b0316630d707df86040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156125df57600080fd5b505af1158015611d80573d6000803e3d6000fd5b50565b60005b8781101561269c5761268a338a8a8481811061261757612617613ffc565b905060200201602081019061262c9190613cdb565b89898581811061263e5761263e613ffc565b90506020020160208101906126539190613cdb565b88888681811061266557612665613ffc565b9050602002013587878781811061267e5761267e613ffc565b90506020020135612bdb565b80612694816140af565b9150506125f9565b505050505050505050565b6126eb338584876001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a38573d6000803e3d6000fd5b6001600160a01b0380841690339086167f97116cf6cd4f6412bb47914d6db18da9e16ab2142f543b86e207c24fbd16b23a8546604080519283526020830191909152810186905260600160405180910390a450505050565b6000600254421061275e57506001546001600160a01b031690565b5060005461010090046001600160a01b031690565b6040516340c10f1960e01b81526001600160a01b038481166004830152602482018490528516906340c10f19906044016020604051808303816000875af11580156127c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127e69190614012565b50826001600160a01b0316846001600160a01b0316867faac9ce45fe3adf5143598c4f18a369591a20a3384aedaf1b525d29127e1fcd5585856128264690565b604080519384526020840192909252908201526060015b60405180910390a45050505050565b604080516000808252602082019092526001600160a01b0384169083906040516128769190614143565b60006040518083038185875af1925050503d80600081146128b3576040519150601f19603f3d011682016040523d82523d6000602084013e6128b8565b606091505b50509050806129185760405162461bcd60e51b815260206004820152602660248201527f5472616e7366657248656c7065723a204e41544956455f5452414e534645525f60448201526511905253115160d21b606482015260840161073a565b505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610c9590859061325c565b60008084116129cc5760405162461bcd60e51b815260206004820152602d602482015260008051602061427083398151915260448201526c17d25394155517d05353d55395609a1b606482015260840161073a565b6000831180156129dc5750600082115b6129f85760405162461bcd60e51b815260040161073a9061415f565b6000612a06856103e56133e3565b90506000612a1482856133e3565b90506000612a2e83612a28886103e86133e3565b90613447565b9050612a3a81836141ad565b979650505050505050565b6060600282511015612a995760405162461bcd60e51b815260206004820181905260248201527f53757368697377617056324c6962726172793a20494e56414c49445f50415448604482015260640161073a565b815167ffffffffffffffff811115612ab357612ab3613754565b604051908082528060200260200182016040528015612adc578160200160208202803683370190505b509050828160018351612aef91906140ca565b81518110612aff57612aff613ffc565b602002602001018181525050600060018351612b1b91906140ca565b90505b8015612bd357600080612b6e8786612b376001876140ca565b81518110612b4757612b47613ffc565b6020026020010151878681518110612b6157612b61613ffc565b6020026020010151613491565b91509150612b96848481518110612b8757612b87613ffc565b60200260200101518383613103565b84612ba26001866140ca565b81518110612bb257612bb2613ffc565b60200260200101818152505050508080612bcb906141cf565b915050612b1e565b509392505050565b604051632770a7eb60e21b81526001600160a01b03868116600483015260248201849052851690639dc29fac906044016020604051808303816000875af1158015612c2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4e9190614012565b50826001600160a01b0316856001600160a01b0316856001600160a01b03167f97116cf6cd4f6412bb47914d6db18da9e16ab2142f543b86e207c24fbd16b23a85612c964690565b604080519283526020830191909152810186905260600161283d565b6060600282511015612d065760405162461bcd60e51b815260206004820181905260248201527f53757368697377617056324c6962726172793a20494e56414c49445f50415448604482015260640161073a565b815167ffffffffffffffff811115612d2057612d20613754565b604051908082528060200260200182016040528015612d49578160200160208202803683370190505b5090508281600081518110612d6057612d60613ffc565b60200260200101818152505060005b60018351612d7d91906140ca565b811015612bd357600080612dc387868581518110612d9d57612d9d613ffc565b602002602001015187866001612db3919061412b565b81518110612b6157612b61613ffc565b91509150612deb848481518110612ddc57612ddc613ffc565b60200260200101518383612977565b84612df785600161412b565b81518110612e0757612e07613ffc565b60200260200101818152505050508080612e20906140af565b915050612d6f565b6000806000612e37858561355b565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b1660348201529193509150869060480160405160208183030381529060405280519060200120604051602001612edf9291906001600160f81b0319815260609290921b6bffffffffffffffffffffffff1916600183015260158201527fe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303603582015260550190565b60408051601f1981840301815291905280516020909101209695505050505050565b60005b60018351612f1291906140ca565b811015610c9557600080848381518110612f2e57612f2e613ffc565b602002602001015185846001612f44919061412b565b81518110612f5457612f54613ffc565b6020026020010151915091506000612f6c838361355b565b509050600087612f7d86600161412b565b81518110612f8d57612f8d613ffc565b60200260200101519050600080836001600160a01b0316866001600160a01b031614612fbb57826000612fbf565b6000835b91509150600060028a51612fd391906140ca565b8810612fdf578861302d565b61302d7f0000000000000000000000000000000000000000000000000000000000000000878c6130108c600261412b565b8151811061302057613020613ffc565b6020026020010151612e28565b905061305a7f00000000000000000000000000000000000000000000000000000000000000008888612e28565b6001600160a01b031663022c0d9f84848460006040519080825280601f01601f191660200182016040528015613097576020820181803683370190505b506040518563ffffffff1660e01b81526004016130b794939291906141e6565b600060405180830381600087803b1580156130d157600080fd5b505af11580156130e5573d6000803e3d6000fd5b505050505050505050505080806130fb906140af565b915050612f04565b60008084116131595760405162461bcd60e51b815260206004820152602e602482015260008051602061427083398151915260448201526d17d3d55514155517d05353d5539560921b606482015260840161073a565b6000831180156131695750600082115b6131855760405162461bcd60e51b815260040161073a9061415f565b600061319d6103e861319786886133e3565b906133e3565b905060006131b16103e56131978689613655565b90506131c26001612a2883856141ad565b9695505050505050565b600080841161321b5760405162461bcd60e51b8152602060048201526027602482015260008051602061427083398151915260448201526617d05353d5539560ca1b606482015260840161073a565b60008311801561322b5750600082115b6132475760405162461bcd60e51b815260040161073a9061415f565b8261325285846133e3565b610ac991906141ad565b61326e826001600160a01b03166136a0565b6132ba5760405162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015260640161073a565b600080836001600160a01b0316836040516132d59190614143565b6000604051808303816000865af19150503d8060008114613312576040519150601f19603f3d011682016040523d82523d6000602084013e613317565b606091505b5091509150816133695760405162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015260640161073a565b805115610c9557808060200190518101906133849190614012565b610c955760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161073a565b60008115806134045750508082028282828161340157613401614197565b04145b610c825760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015260640161073a565b80820182811015610c825760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015260640161073a565b60008060006134a0858561355b565b5090506000806134b1888888612e28565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156134ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613512919061422a565b506001600160701b031691506001600160701b03169150826001600160a01b0316876001600160a01b03161461354957808261354c565b81815b90999098509650505050505050565b600080826001600160a01b0316846001600160a01b031614156135d05760405162461bcd60e51b815260206004820152602760248201527f53757368697377617056324c6962726172793a204944454e544943414c5f41446044820152664452455353455360c81b606482015260840161073a565b826001600160a01b0316846001600160a01b0316106135f05782846135f3565b83835b90925090506001600160a01b03821661364e5760405162461bcd60e51b815260206004820181905260248201527f53757368697377617056324c6962726172793a205a45524f5f41444452455353604482015260640161073a565b9250929050565b80820382811115610c825760405162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015260640161073a565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708115801590610ac95750141592915050565b634e487b7160e01b600052600160045260246000fd5b6001600160a01b03811681146125f357600080fd5b600080600080600060a0868803121561371a57600080fd5b85359450602086013561372c816136ed565b9350604086013561373c816136ed565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561379357613793613754565b604052919050565b600082601f8301126137ac57600080fd5b813567ffffffffffffffff8111156137c6576137c6613754565b6137d9601f8201601f191660200161376a565b8181528460208386010111156137ee57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561382157600080fd5b843561382c816136ed565b9350602085013567ffffffffffffffff81111561384857600080fd5b6138548782880161379b565b949794965050505060408301359260600135919050565b60008060006060848603121561388057600080fd5b505081359360208301359350604090920135919050565b80151581146125f357600080fd5b6000602082840312156138b757600080fd5b81356138c281613897565b9392505050565b60008083601f8401126138db57600080fd5b50813567ffffffffffffffff8111156138f357600080fd5b6020830191508360208260051b850101111561364e57600080fd5b600080600080600080600060c0888a03121561392957600080fd5b8735965060208801359550604088013567ffffffffffffffff81111561394e57600080fd5b61395a8a828b016138c9565b909650945050606088013561396e816136ed565b969995985093969295946080840135945060a09093013592915050565b6000806040838503121561399e57600080fd5b8235915060208084013567ffffffffffffffff808211156139be57600080fd5b818601915086601f8301126139d257600080fd5b8135818111156139e4576139e4613754565b8060051b91506139f584830161376a565b8181529183018401918481019089841115613a0f57600080fd5b938501935b83851015613a395784359250613a29836136ed565b8282529385019390850190613a14565b8096505050505050509250929050565b6020808252825182820181905260009190848201906040850190845b81811015613a8157835183529284019291840191600101613a65565b50909695505050505050565b60008060008060808587031215613aa357600080fd5b8435613aae816136ed565b93506020850135613abe816136ed565b93969395505050506040820135916060013590565b60008060008060008060008060008060a08b8d031215613af257600080fd5b8a3567ffffffffffffffff80821115613b0a57600080fd5b613b168e838f016138c9565b909c509a5060208d0135915080821115613b2f57600080fd5b613b3b8e838f016138c9565b909a50985060408d0135915080821115613b5457600080fd5b613b608e838f016138c9565b909850965060608d0135915080821115613b7957600080fd5b613b858e838f016138c9565b909650945060808d0135915080821115613b9e57600080fd5b50613bab8d828e016138c9565b915080935050809150509295989b9194979a5092959850565b60008060008060008060008060e0898b031215613be057600080fd5b883597506020890135965060408901359550606089013567ffffffffffffffff811115613c0c57600080fd5b613c188b828c016138c9565b9096509450506080890135613c2c816136ed565b979a969950949793969295929450505060a08201359160c0013590565b60008060408385031215613c5c57600080fd5b8235613c67816136ed565b91506020830135613c77816136ed565b809150509250929050565b600080600060608486031215613c9757600080fd5b8335613ca2816136ed565b9250602084013567ffffffffffffffff811115613cbe57600080fd5b613cca8682870161379b565b925050604084013590509250925092565b600060208284031215613ced57600080fd5b81356138c2816136ed565b600080600060608486031215613d0d57600080fd5b8335613d18816136ed565b9250602084013591506040840135613d2f816136ed565b809150509250925092565b60008060408385031215613d4d57600080fd5b8235613d58816136ed565b946020939093013593505050565b600080600060608486031215613d7b57600080fd5b8335613d86816136ed565b92506020840135613d96816136ed565b929592945050506040919091013590565b6000806000806000806000806080898b031215613dc357600080fd5b883567ffffffffffffffff80821115613ddb57600080fd5b613de78c838d016138c9565b909a50985060208b0135915080821115613e0057600080fd5b613e0c8c838d016138c9565b909850965060408b0135915080821115613e2557600080fd5b613e318c838d016138c9565b909650945060608b0135915080821115613e4a57600080fd5b50613e578b828c016138c9565b999c989b5096995094979396929594505050565b6020808252601a908201527f416e79737761705633526f757465723a20464f5242494444454e000000000000604082015260600190565b600060208284031215613eb457600080fd5b81516138c2816136ed565b600060208284031215613ed157600080fd5b5051919050565b6001600160a01b0393841681526020810192909252909116604082015260600190565b60005b83811015613f16578181015183820152602001613efe565b83811115610c955750506000910152565b60008151808452613f3f816020860160208601613efb565b601f01601f19169290920160200192915050565b608081526000613f666080830187613f27565b6020830195909552506040810192909252606090910152919050565b60208082526023908201527f416e79737761705636526f757465723a205377617054726164652064697361626040820152621b195960ea1b606082015260800190565b60208082526018908201527f416e79737761705633526f757465723a20455850495245440000000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561402457600080fd5b81516138c281613897565b60a0808252810186905260008760c08301825b89811015614072578235614055816136ed565b6001600160a01b0316825260209283019290910190600101614042565b50602084019790975250506040810193909352606083019190915260809091015292915050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156140c3576140c3614099565b5060010190565b6000828210156140dc576140dc614099565b500390565b6020808252602a908201527f416e79737761705633526f757465723a20756e6465726c79696e67206973206e6040820152696f7420774e415449564560b01b606082015260800190565b6000821982111561413e5761413e614099565b500190565b60008251614155818460208701613efb565b9190910192915050565b6020808252602a908201526000805160206142708339815191526040820152695f4c495155494449545960b01b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b6000826141ca57634e487b7160e01b600052601260045260246000fd5b500490565b6000816141de576141de614099565b506000190190565b84815283602082015260018060a01b03831660408201526080606082015260006131c26080830184613f27565b80516001600160701b038116811461185b57600080fd5b60008060006060848603121561423f57600080fd5b61424884614213565b925061425660208501614213565b9150604084015163ffffffff81168114613d2f57600080fdfe53757368697377617056324c6962726172793a20494e53554646494349454e54a2646970667358221220c17babedbab069763375fabccc1245cac6dcebfc453595e3a48e4d855008db3364736f6c634300080a0033000000000000000000000000c0aee478e3658e2610c5f7a4a2e1777ce9e4f2ac000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000002a038e100f8b85df21e4d44121bdbfe0c288a869",
}

// ContractsABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractsMetaData.ABI instead.
var ContractsABI = ContractsMetaData.ABI

// ContractsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractsMetaData.Bin instead.
var ContractsBin = ContractsMetaData.Bin

// DeployContracts deploys a new Ethereum contract, binding an instance of Contracts to it.
func DeployContracts(auth *bind.TransactOpts, backend bind.ContractBackend, _factory common.Address, _wNATIVE common.Address, _mpc common.Address) (common.Address, *types.Transaction, *Contracts, error) {
	parsed, err := ContractsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractsBin), backend, _factory, _wNATIVE, _mpc)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Contracts{ContractsCaller: ContractsCaller{contract: contract}, ContractsTransactor: ContractsTransactor{contract: contract}, ContractsFilterer: ContractsFilterer{contract: contract}}, nil
}

// Contracts is an auto generated Go binding around an Ethereum contract.
type Contracts struct {
	ContractsCaller     // Read-only binding to the contract
	ContractsTransactor // Write-only binding to the contract
	ContractsFilterer   // Log filterer for contract events
}

// ContractsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractsSession struct {
	Contract     *Contracts        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContractsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractsCallerSession struct {
	Contract *ContractsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ContractsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractsTransactorSession struct {
	Contract     *ContractsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ContractsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractsRaw struct {
	Contract *Contracts // Generic contract binding to access the raw methods on
}

// ContractsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractsCallerRaw struct {
	Contract *ContractsCaller // Generic read-only contract binding to access the raw methods on
}

// ContractsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractsTransactorRaw struct {
	Contract *ContractsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContracts creates a new instance of Contracts, bound to a specific deployed contract.
func NewContracts(address common.Address, backend bind.ContractBackend) (*Contracts, error) {
	contract, err := bindContracts(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Contracts{ContractsCaller: ContractsCaller{contract: contract}, ContractsTransactor: ContractsTransactor{contract: contract}, ContractsFilterer: ContractsFilterer{contract: contract}}, nil
}

// NewContractsCaller creates a new read-only instance of Contracts, bound to a specific deployed contract.
func NewContractsCaller(address common.Address, caller bind.ContractCaller) (*ContractsCaller, error) {
	contract, err := bindContracts(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractsCaller{contract: contract}, nil
}

// NewContractsTransactor creates a new write-only instance of Contracts, bound to a specific deployed contract.
func NewContractsTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractsTransactor, error) {
	contract, err := bindContracts(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractsTransactor{contract: contract}, nil
}

// NewContractsFilterer creates a new log filterer instance of Contracts, bound to a specific deployed contract.
func NewContractsFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractsFilterer, error) {
	contract, err := bindContracts(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractsFilterer{contract: contract}, nil
}

// bindContracts binds a generic wrapper to an already deployed contract.
func bindContracts(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ContractsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contracts *ContractsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contracts.Contract.ContractsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contracts *ContractsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contracts.Contract.ContractsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contracts *ContractsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contracts.Contract.ContractsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contracts *ContractsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contracts.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contracts *ContractsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contracts.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contracts *ContractsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contracts.Contract.contract.Transact(opts, method, params...)
}

// CID is a free data retrieval call binding the contract method 0x99a2f2d7.
//
// Solidity: function cID() view returns(uint256 id)
func (_Contracts *ContractsCaller) CID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "cID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CID is a free data retrieval call binding the contract method 0x99a2f2d7.
//
// Solidity: function cID() view returns(uint256 id)
func (_Contracts *ContractsSession) CID() (*big.Int, error) {
	return _Contracts.Contract.CID(&_Contracts.CallOpts)
}

// CID is a free data retrieval call binding the contract method 0x99a2f2d7.
//
// Solidity: function cID() view returns(uint256 id)
func (_Contracts *ContractsCallerSession) CID() (*big.Int, error) {
	return _Contracts.Contract.CID(&_Contracts.CallOpts)
}

// EnableSwapTrade is a free data retrieval call binding the contract method 0x353cb3a8.
//
// Solidity: function enableSwapTrade() view returns(bool)
func (_Contracts *ContractsCaller) EnableSwapTrade(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "enableSwapTrade")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// EnableSwapTrade is a free data retrieval call binding the contract method 0x353cb3a8.
//
// Solidity: function enableSwapTrade() view returns(bool)
func (_Contracts *ContractsSession) EnableSwapTrade() (bool, error) {
	return _Contracts.Contract.EnableSwapTrade(&_Contracts.CallOpts)
}

// EnableSwapTrade is a free data retrieval call binding the contract method 0x353cb3a8.
//
// Solidity: function enableSwapTrade() view returns(bool)
func (_Contracts *ContractsCallerSession) EnableSwapTrade() (bool, error) {
	return _Contracts.Contract.EnableSwapTrade(&_Contracts.CallOpts)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_Contracts *ContractsCaller) Factory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "factory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_Contracts *ContractsSession) Factory() (common.Address, error) {
	return _Contracts.Contract.Factory(&_Contracts.CallOpts)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_Contracts *ContractsCallerSession) Factory() (common.Address, error) {
	return _Contracts.Contract.Factory(&_Contracts.CallOpts)
}

// GetAmountIn is a free data retrieval call binding the contract method 0x85f8c259.
//
// Solidity: function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) pure returns(uint256 amountIn)
func (_Contracts *ContractsCaller) GetAmountIn(opts *bind.CallOpts, amountOut *big.Int, reserveIn *big.Int, reserveOut *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "getAmountIn", amountOut, reserveIn, reserveOut)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAmountIn is a free data retrieval call binding the contract method 0x85f8c259.
//
// Solidity: function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) pure returns(uint256 amountIn)
func (_Contracts *ContractsSession) GetAmountIn(amountOut *big.Int, reserveIn *big.Int, reserveOut *big.Int) (*big.Int, error) {
	return _Contracts.Contract.GetAmountIn(&_Contracts.CallOpts, amountOut, reserveIn, reserveOut)
}

// GetAmountIn is a free data retrieval call binding the contract method 0x85f8c259.
//
// Solidity: function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) pure returns(uint256 amountIn)
func (_Contracts *ContractsCallerSession) GetAmountIn(amountOut *big.Int, reserveIn *big.Int, reserveOut *big.Int) (*big.Int, error) {
	return _Contracts.Contract.GetAmountIn(&_Contracts.CallOpts, amountOut, reserveIn, reserveOut)
}

// GetAmountOut is a free data retrieval call binding the contract method 0x054d50d4.
//
// Solidity: function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) pure returns(uint256 amountOut)
func (_Contracts *ContractsCaller) GetAmountOut(opts *bind.CallOpts, amountIn *big.Int, reserveIn *big.Int, reserveOut *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "getAmountOut", amountIn, reserveIn, reserveOut)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAmountOut is a free data retrieval call binding the contract method 0x054d50d4.
//
// Solidity: function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) pure returns(uint256 amountOut)
func (_Contracts *ContractsSession) GetAmountOut(amountIn *big.Int, reserveIn *big.Int, reserveOut *big.Int) (*big.Int, error) {
	return _Contracts.Contract.GetAmountOut(&_Contracts.CallOpts, amountIn, reserveIn, reserveOut)
}

// GetAmountOut is a free data retrieval call binding the contract method 0x054d50d4.
//
// Solidity: function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) pure returns(uint256 amountOut)
func (_Contracts *ContractsCallerSession) GetAmountOut(amountIn *big.Int, reserveIn *big.Int, reserveOut *big.Int) (*big.Int, error) {
	return _Contracts.Contract.GetAmountOut(&_Contracts.CallOpts, amountIn, reserveIn, reserveOut)
}

// GetAmountsIn is a free data retrieval call binding the contract method 0x1f00ca74.
//
// Solidity: function getAmountsIn(uint256 amountOut, address[] path) view returns(uint256[] amounts)
func (_Contracts *ContractsCaller) GetAmountsIn(opts *bind.CallOpts, amountOut *big.Int, path []common.Address) ([]*big.Int, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "getAmountsIn", amountOut, path)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetAmountsIn is a free data retrieval call binding the contract method 0x1f00ca74.
//
// Solidity: function getAmountsIn(uint256 amountOut, address[] path) view returns(uint256[] amounts)
func (_Contracts *ContractsSession) GetAmountsIn(amountOut *big.Int, path []common.Address) ([]*big.Int, error) {
	return _Contracts.Contract.GetAmountsIn(&_Contracts.CallOpts, amountOut, path)
}

// GetAmountsIn is a free data retrieval call binding the contract method 0x1f00ca74.
//
// Solidity: function getAmountsIn(uint256 amountOut, address[] path) view returns(uint256[] amounts)
func (_Contracts *ContractsCallerSession) GetAmountsIn(amountOut *big.Int, path []common.Address) ([]*big.Int, error) {
	return _Contracts.Contract.GetAmountsIn(&_Contracts.CallOpts, amountOut, path)
}

// GetAmountsOut is a free data retrieval call binding the contract method 0xd06ca61f.
//
// Solidity: function getAmountsOut(uint256 amountIn, address[] path) view returns(uint256[] amounts)
func (_Contracts *ContractsCaller) GetAmountsOut(opts *bind.CallOpts, amountIn *big.Int, path []common.Address) ([]*big.Int, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "getAmountsOut", amountIn, path)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetAmountsOut is a free data retrieval call binding the contract method 0xd06ca61f.
//
// Solidity: function getAmountsOut(uint256 amountIn, address[] path) view returns(uint256[] amounts)
func (_Contracts *ContractsSession) GetAmountsOut(amountIn *big.Int, path []common.Address) ([]*big.Int, error) {
	return _Contracts.Contract.GetAmountsOut(&_Contracts.CallOpts, amountIn, path)
}

// GetAmountsOut is a free data retrieval call binding the contract method 0xd06ca61f.
//
// Solidity: function getAmountsOut(uint256 amountIn, address[] path) view returns(uint256[] amounts)
func (_Contracts *ContractsCallerSession) GetAmountsOut(amountIn *big.Int, path []common.Address) ([]*big.Int, error) {
	return _Contracts.Contract.GetAmountsOut(&_Contracts.CallOpts, amountIn, path)
}

// Mpc is a free data retrieval call binding the contract method 0xf75c2664.
//
// Solidity: function mpc() view returns(address)
func (_Contracts *ContractsCaller) Mpc(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "mpc")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Mpc is a free data retrieval call binding the contract method 0xf75c2664.
//
// Solidity: function mpc() view returns(address)
func (_Contracts *ContractsSession) Mpc() (common.Address, error) {
	return _Contracts.Contract.Mpc(&_Contracts.CallOpts)
}

// Mpc is a free data retrieval call binding the contract method 0xf75c2664.
//
// Solidity: function mpc() view returns(address)
func (_Contracts *ContractsCallerSession) Mpc() (common.Address, error) {
	return _Contracts.Contract.Mpc(&_Contracts.CallOpts)
}

// Quote is a free data retrieval call binding the contract method 0xad615dec.
//
// Solidity: function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) pure returns(uint256 amountB)
func (_Contracts *ContractsCaller) Quote(opts *bind.CallOpts, amountA *big.Int, reserveA *big.Int, reserveB *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "quote", amountA, reserveA, reserveB)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Quote is a free data retrieval call binding the contract method 0xad615dec.
//
// Solidity: function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) pure returns(uint256 amountB)
func (_Contracts *ContractsSession) Quote(amountA *big.Int, reserveA *big.Int, reserveB *big.Int) (*big.Int, error) {
	return _Contracts.Contract.Quote(&_Contracts.CallOpts, amountA, reserveA, reserveB)
}

// Quote is a free data retrieval call binding the contract method 0xad615dec.
//
// Solidity: function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) pure returns(uint256 amountB)
func (_Contracts *ContractsCallerSession) Quote(amountA *big.Int, reserveA *big.Int, reserveB *big.Int) (*big.Int, error) {
	return _Contracts.Contract.Quote(&_Contracts.CallOpts, amountA, reserveA, reserveB)
}

// WNATIVE is a free data retrieval call binding the contract method 0x8fd903f5.
//
// Solidity: function wNATIVE() view returns(address)
func (_Contracts *ContractsCaller) WNATIVE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "wNATIVE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// WNATIVE is a free data retrieval call binding the contract method 0x8fd903f5.
//
// Solidity: function wNATIVE() view returns(address)
func (_Contracts *ContractsSession) WNATIVE() (common.Address, error) {
	return _Contracts.Contract.WNATIVE(&_Contracts.CallOpts)
}

// WNATIVE is a free data retrieval call binding the contract method 0x8fd903f5.
//
// Solidity: function wNATIVE() view returns(address)
func (_Contracts *ContractsCallerSession) WNATIVE() (common.Address, error) {
	return _Contracts.Contract.WNATIVE(&_Contracts.CallOpts)
}

// AnySwapFeeTo is a paid mutator transaction binding the contract method 0x87cc6e2f.
//
// Solidity: function anySwapFeeTo(address token, uint256 amount) returns()
func (_Contracts *ContractsTransactor) AnySwapFeeTo(opts *bind.TransactOpts, token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "anySwapFeeTo", token, amount)
}

// AnySwapFeeTo is a paid mutator transaction binding the contract method 0x87cc6e2f.
//
// Solidity: function anySwapFeeTo(address token, uint256 amount) returns()
func (_Contracts *ContractsSession) AnySwapFeeTo(token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AnySwapFeeTo(&_Contracts.TransactOpts, token, amount)
}

// AnySwapFeeTo is a paid mutator transaction binding the contract method 0x87cc6e2f.
//
// Solidity: function anySwapFeeTo(address token, uint256 amount) returns()
func (_Contracts *ContractsTransactorSession) AnySwapFeeTo(token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AnySwapFeeTo(&_Contracts.TransactOpts, token, amount)
}

// AnySwapIn is a paid mutator transaction binding the contract method 0x25121b76.
//
// Solidity: function anySwapIn(bytes32[] txs, address[] tokens, address[] to, uint256[] amounts, uint256[] fromChainIDs) returns()
func (_Contracts *ContractsTransactor) AnySwapIn(opts *bind.TransactOpts, txs [][32]byte, tokens []common.Address, to []common.Address, amounts []*big.Int, fromChainIDs []*big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "anySwapIn", txs, tokens, to, amounts, fromChainIDs)
}

// AnySwapIn is a paid mutator transaction binding the contract method 0x25121b76.
//
// Solidity: function anySwapIn(bytes32[] txs, address[] tokens, address[] to, uint256[] amounts, uint256[] fromChainIDs) returns()
func (_Contracts *ContractsSession) AnySwapIn(txs [][32]byte, tokens []common.Address, to []common.Address, amounts []*big.Int, fromChainIDs []*big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AnySwapIn(&_Contracts.TransactOpts, txs, tokens, to, amounts, fromChainIDs)
}

// AnySwapIn is a paid mutator transaction binding the contract method 0x25121b76.
//
// Solidity: function anySwapIn(bytes32[] txs, address[] tokens, address[] to, uint256[] amounts, uint256[] fromChainIDs) returns()
func (_Contracts *ContractsTransactorSession) AnySwapIn(txs [][32]byte, tokens []common.Address, to []common.Address, amounts []*big.Int, fromChainIDs []*big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AnySwapIn(&_Contracts.TransactOpts, txs, tokens, to, amounts, fromChainIDs)
}

// AnySwapIn0 is a paid mutator transaction binding the contract method 0x825bb13c.
//
// Solidity: function anySwapIn(bytes32 txs, address token, address to, uint256 amount, uint256 fromChainID) returns()
func (_Contracts *ContractsTransactor) AnySwapIn0(opts *bind.TransactOpts, txs [32]byte, token common.Address, to common.Address, amount *big.Int, fromChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "anySwapIn0", txs, token, to, amount, fromChainID)
}

// AnySwapIn0 is a paid mutator transaction binding the contract method 0x825bb13c.
//
// Solidity: function anySwapIn(bytes32 txs, address token, address to, uint256 amount, uint256 fromChainID) returns()
func (_Contracts *ContractsSession) AnySwapIn0(txs [32]byte, token common.Address, to common.Address, amount *big.Int, fromChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AnySwapIn0(&_Contracts.TransactOpts, txs, token, to, amount, fromChainID)
}

// AnySwapIn0 is a paid mutator transaction binding the contract method 0x825bb13c.
//
// Solidity: function anySwapIn(bytes32 txs, address token, address to, uint256 amount, uint256 fromChainID) returns()
func (_Contracts *ContractsTransactorSession) AnySwapIn0(txs [32]byte, token common.Address, to common.Address, amount *big.Int, fromChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AnySwapIn0(&_Contracts.TransactOpts, txs, token, to, amount, fromChainID)
}

// AnySwapInAuto is a paid mutator transaction binding the contract method 0x0175b1c4.
//
// Solidity: function anySwapInAuto(bytes32 txs, address token, address to, uint256 amount, uint256 fromChainID) returns()
func (_Contracts *ContractsTransactor) AnySwapInAuto(opts *bind.TransactOpts, txs [32]byte, token common.Address, to common.Address, amount *big.Int, fromChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "anySwapInAuto", txs, token, to, amount, fromChainID)
}

// AnySwapInAuto is a paid mutator transaction binding the contract method 0x0175b1c4.
//
// Solidity: function anySwapInAuto(bytes32 txs, address token, address to, uint256 amount, uint256 fromChainID) returns()
func (_Contracts *ContractsSession) AnySwapInAuto(txs [32]byte, token common.Address, to common.Address, amount *big.Int, fromChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AnySwapInAuto(&_Contracts.TransactOpts, txs, token, to, amount, fromChainID)
}

// AnySwapInAuto is a paid mutator transaction binding the contract method 0x0175b1c4.
//
// Solidity: function anySwapInAuto(bytes32 txs, address token, address to, uint256 amount, uint256 fromChainID) returns()
func (_Contracts *ContractsTransactorSession) AnySwapInAuto(txs [32]byte, token common.Address, to common.Address, amount *big.Int, fromChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AnySwapInAuto(&_Contracts.TransactOpts, txs, token, to, amount, fromChainID)
}

// AnySwapInExactTokensForNative is a paid mutator transaction binding the contract method 0x52a397d5.
//
// Solidity: function anySwapInExactTokensForNative(bytes32 txs, uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline, uint256 fromChainID) returns(uint256[] amounts)
func (_Contracts *ContractsTransactor) AnySwapInExactTokensForNative(opts *bind.TransactOpts, txs [32]byte, amountIn *big.Int, amountOutMin *big.Int, path []common.Address, to common.Address, deadline *big.Int, fromChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "anySwapInExactTokensForNative", txs, amountIn, amountOutMin, path, to, deadline, fromChainID)
}

// AnySwapInExactTokensForNative is a paid mutator transaction binding the contract method 0x52a397d5.
//
// Solidity: function anySwapInExactTokensForNative(bytes32 txs, uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline, uint256 fromChainID) returns(uint256[] amounts)
func (_Contracts *ContractsSession) AnySwapInExactTokensForNative(txs [32]byte, amountIn *big.Int, amountOutMin *big.Int, path []common.Address, to common.Address, deadline *big.Int, fromChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AnySwapInExactTokensForNative(&_Contracts.TransactOpts, txs, amountIn, amountOutMin, path, to, deadline, fromChainID)
}

// AnySwapInExactTokensForNative is a paid mutator transaction binding the contract method 0x52a397d5.
//
// Solidity: function anySwapInExactTokensForNative(bytes32 txs, uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline, uint256 fromChainID) returns(uint256[] amounts)
func (_Contracts *ContractsTransactorSession) AnySwapInExactTokensForNative(txs [32]byte, amountIn *big.Int, amountOutMin *big.Int, path []common.Address, to common.Address, deadline *big.Int, fromChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AnySwapInExactTokensForNative(&_Contracts.TransactOpts, txs, amountIn, amountOutMin, path, to, deadline, fromChainID)
}

// AnySwapInExactTokensForTokens is a paid mutator transaction binding the contract method 0x2fc1e728.
//
// Solidity: function anySwapInExactTokensForTokens(bytes32 txs, uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline, uint256 fromChainID) returns(uint256[] amounts)
func (_Contracts *ContractsTransactor) AnySwapInExactTokensForTokens(opts *bind.TransactOpts, txs [32]byte, amountIn *big.Int, amountOutMin *big.Int, path []common.Address, to common.Address, deadline *big.Int, fromChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "anySwapInExactTokensForTokens", txs, amountIn, amountOutMin, path, to, deadline, fromChainID)
}

// AnySwapInExactTokensForTokens is a paid mutator transaction binding the contract method 0x2fc1e728.
//
// Solidity: function anySwapInExactTokensForTokens(bytes32 txs, uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline, uint256 fromChainID) returns(uint256[] amounts)
func (_Contracts *ContractsSession) AnySwapInExactTokensForTokens(txs [32]byte, amountIn *big.Int, amountOutMin *big.Int, path []common.Address, to common.Address, deadline *big.Int, fromChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AnySwapInExactTokensForTokens(&_Contracts.TransactOpts, txs, amountIn, amountOutMin, path, to, deadline, fromChainID)
}

// AnySwapInExactTokensForTokens is a paid mutator transaction binding the contract method 0x2fc1e728.
//
// Solidity: function anySwapInExactTokensForTokens(bytes32 txs, uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline, uint256 fromChainID) returns(uint256[] amounts)
func (_Contracts *ContractsTransactorSession) AnySwapInExactTokensForTokens(txs [32]byte, amountIn *big.Int, amountOutMin *big.Int, path []common.Address, to common.Address, deadline *big.Int, fromChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AnySwapInExactTokensForTokens(&_Contracts.TransactOpts, txs, amountIn, amountOutMin, path, to, deadline, fromChainID)
}

// AnySwapInUnderlying is a paid mutator transaction binding the contract method 0x3f88de89.
//
// Solidity: function anySwapInUnderlying(bytes32 txs, address token, address to, uint256 amount, uint256 fromChainID) returns()
func (_Contracts *ContractsTransactor) AnySwapInUnderlying(opts *bind.TransactOpts, txs [32]byte, token common.Address, to common.Address, amount *big.Int, fromChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "anySwapInUnderlying", txs, token, to, amount, fromChainID)
}

// AnySwapInUnderlying is a paid mutator transaction binding the contract method 0x3f88de89.
//
// Solidity: function anySwapInUnderlying(bytes32 txs, address token, address to, uint256 amount, uint256 fromChainID) returns()
func (_Contracts *ContractsSession) AnySwapInUnderlying(txs [32]byte, token common.Address, to common.Address, amount *big.Int, fromChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AnySwapInUnderlying(&_Contracts.TransactOpts, txs, token, to, amount, fromChainID)
}

// AnySwapInUnderlying is a paid mutator transaction binding the contract method 0x3f88de89.
//
// Solidity: function anySwapInUnderlying(bytes32 txs, address token, address to, uint256 amount, uint256 fromChainID) returns()
func (_Contracts *ContractsTransactorSession) AnySwapInUnderlying(txs [32]byte, token common.Address, to common.Address, amount *big.Int, fromChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AnySwapInUnderlying(&_Contracts.TransactOpts, txs, token, to, amount, fromChainID)
}

// AnySwapOut is a paid mutator transaction binding the contract method 0x241dc2df.
//
// Solidity: function anySwapOut(address token, address to, uint256 amount, uint256 toChainID) returns()
func (_Contracts *ContractsTransactor) AnySwapOut(opts *bind.TransactOpts, token common.Address, to common.Address, amount *big.Int, toChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "anySwapOut", token, to, amount, toChainID)
}

// AnySwapOut is a paid mutator transaction binding the contract method 0x241dc2df.
//
// Solidity: function anySwapOut(address token, address to, uint256 amount, uint256 toChainID) returns()
func (_Contracts *ContractsSession) AnySwapOut(token common.Address, to common.Address, amount *big.Int, toChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AnySwapOut(&_Contracts.TransactOpts, token, to, amount, toChainID)
}

// AnySwapOut is a paid mutator transaction binding the contract method 0x241dc2df.
//
// Solidity: function anySwapOut(address token, address to, uint256 amount, uint256 toChainID) returns()
func (_Contracts *ContractsTransactorSession) AnySwapOut(token common.Address, to common.Address, amount *big.Int, toChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AnySwapOut(&_Contracts.TransactOpts, token, to, amount, toChainID)
}

// AnySwapOut0 is a paid mutator transaction binding the contract method 0xc604b0b8.
//
// Solidity: function anySwapOut(address token, string to, uint256 amount, uint256 toChainID) returns()
func (_Contracts *ContractsTransactor) AnySwapOut0(opts *bind.TransactOpts, token common.Address, to string, amount *big.Int, toChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "anySwapOut0", token, to, amount, toChainID)
}

// AnySwapOut0 is a paid mutator transaction binding the contract method 0xc604b0b8.
//
// Solidity: function anySwapOut(address token, string to, uint256 amount, uint256 toChainID) returns()
func (_Contracts *ContractsSession) AnySwapOut0(token common.Address, to string, amount *big.Int, toChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AnySwapOut0(&_Contracts.TransactOpts, token, to, amount, toChainID)
}

// AnySwapOut0 is a paid mutator transaction binding the contract method 0xc604b0b8.
//
// Solidity: function anySwapOut(address token, string to, uint256 amount, uint256 toChainID) returns()
func (_Contracts *ContractsTransactorSession) AnySwapOut0(token common.Address, to string, amount *big.Int, toChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AnySwapOut0(&_Contracts.TransactOpts, token, to, amount, toChainID)
}

// AnySwapOut1 is a paid mutator transaction binding the contract method 0xdcfb77b1.
//
// Solidity: function anySwapOut(address[] tokens, address[] to, uint256[] amounts, uint256[] toChainIDs) returns()
func (_Contracts *ContractsTransactor) AnySwapOut1(opts *bind.TransactOpts, tokens []common.Address, to []common.Address, amounts []*big.Int, toChainIDs []*big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "anySwapOut1", tokens, to, amounts, toChainIDs)
}

// AnySwapOut1 is a paid mutator transaction binding the contract method 0xdcfb77b1.
//
// Solidity: function anySwapOut(address[] tokens, address[] to, uint256[] amounts, uint256[] toChainIDs) returns()
func (_Contracts *ContractsSession) AnySwapOut1(tokens []common.Address, to []common.Address, amounts []*big.Int, toChainIDs []*big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AnySwapOut1(&_Contracts.TransactOpts, tokens, to, amounts, toChainIDs)
}

// AnySwapOut1 is a paid mutator transaction binding the contract method 0xdcfb77b1.
//
// Solidity: function anySwapOut(address[] tokens, address[] to, uint256[] amounts, uint256[] toChainIDs) returns()
func (_Contracts *ContractsTransactorSession) AnySwapOut1(tokens []common.Address, to []common.Address, amounts []*big.Int, toChainIDs []*big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AnySwapOut1(&_Contracts.TransactOpts, tokens, to, amounts, toChainIDs)
}

// AnySwapOutExactTokensForNative is a paid mutator transaction binding the contract method 0x65782f56.
//
// Solidity: function anySwapOutExactTokensForNative(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline, uint256 toChainID) returns()
func (_Contracts *ContractsTransactor) AnySwapOutExactTokensForNative(opts *bind.TransactOpts, amountIn *big.Int, amountOutMin *big.Int, path []common.Address, to common.Address, deadline *big.Int, toChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "anySwapOutExactTokensForNative", amountIn, amountOutMin, path, to, deadline, toChainID)
}

// AnySwapOutExactTokensForNative is a paid mutator transaction binding the contract method 0x65782f56.
//
// Solidity: function anySwapOutExactTokensForNative(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline, uint256 toChainID) returns()
func (_Contracts *ContractsSession) AnySwapOutExactTokensForNative(amountIn *big.Int, amountOutMin *big.Int, path []common.Address, to common.Address, deadline *big.Int, toChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AnySwapOutExactTokensForNative(&_Contracts.TransactOpts, amountIn, amountOutMin, path, to, deadline, toChainID)
}

// AnySwapOutExactTokensForNative is a paid mutator transaction binding the contract method 0x65782f56.
//
// Solidity: function anySwapOutExactTokensForNative(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline, uint256 toChainID) returns()
func (_Contracts *ContractsTransactorSession) AnySwapOutExactTokensForNative(amountIn *big.Int, amountOutMin *big.Int, path []common.Address, to common.Address, deadline *big.Int, toChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AnySwapOutExactTokensForNative(&_Contracts.TransactOpts, amountIn, amountOutMin, path, to, deadline, toChainID)
}

// AnySwapOutExactTokensForNativeUnderlying is a paid mutator transaction binding the contract method 0x6a453972.
//
// Solidity: function anySwapOutExactTokensForNativeUnderlying(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline, uint256 toChainID) returns()
func (_Contracts *ContractsTransactor) AnySwapOutExactTokensForNativeUnderlying(opts *bind.TransactOpts, amountIn *big.Int, amountOutMin *big.Int, path []common.Address, to common.Address, deadline *big.Int, toChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "anySwapOutExactTokensForNativeUnderlying", amountIn, amountOutMin, path, to, deadline, toChainID)
}

// AnySwapOutExactTokensForNativeUnderlying is a paid mutator transaction binding the contract method 0x6a453972.
//
// Solidity: function anySwapOutExactTokensForNativeUnderlying(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline, uint256 toChainID) returns()
func (_Contracts *ContractsSession) AnySwapOutExactTokensForNativeUnderlying(amountIn *big.Int, amountOutMin *big.Int, path []common.Address, to common.Address, deadline *big.Int, toChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AnySwapOutExactTokensForNativeUnderlying(&_Contracts.TransactOpts, amountIn, amountOutMin, path, to, deadline, toChainID)
}

// AnySwapOutExactTokensForNativeUnderlying is a paid mutator transaction binding the contract method 0x6a453972.
//
// Solidity: function anySwapOutExactTokensForNativeUnderlying(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline, uint256 toChainID) returns()
func (_Contracts *ContractsTransactorSession) AnySwapOutExactTokensForNativeUnderlying(amountIn *big.Int, amountOutMin *big.Int, path []common.Address, to common.Address, deadline *big.Int, toChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AnySwapOutExactTokensForNativeUnderlying(&_Contracts.TransactOpts, amountIn, amountOutMin, path, to, deadline, toChainID)
}

// AnySwapOutExactTokensForTokens is a paid mutator transaction binding the contract method 0x0bb57203.
//
// Solidity: function anySwapOutExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline, uint256 toChainID) returns()
func (_Contracts *ContractsTransactor) AnySwapOutExactTokensForTokens(opts *bind.TransactOpts, amountIn *big.Int, amountOutMin *big.Int, path []common.Address, to common.Address, deadline *big.Int, toChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "anySwapOutExactTokensForTokens", amountIn, amountOutMin, path, to, deadline, toChainID)
}

// AnySwapOutExactTokensForTokens is a paid mutator transaction binding the contract method 0x0bb57203.
//
// Solidity: function anySwapOutExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline, uint256 toChainID) returns()
func (_Contracts *ContractsSession) AnySwapOutExactTokensForTokens(amountIn *big.Int, amountOutMin *big.Int, path []common.Address, to common.Address, deadline *big.Int, toChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AnySwapOutExactTokensForTokens(&_Contracts.TransactOpts, amountIn, amountOutMin, path, to, deadline, toChainID)
}

// AnySwapOutExactTokensForTokens is a paid mutator transaction binding the contract method 0x0bb57203.
//
// Solidity: function anySwapOutExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline, uint256 toChainID) returns()
func (_Contracts *ContractsTransactorSession) AnySwapOutExactTokensForTokens(amountIn *big.Int, amountOutMin *big.Int, path []common.Address, to common.Address, deadline *big.Int, toChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AnySwapOutExactTokensForTokens(&_Contracts.TransactOpts, amountIn, amountOutMin, path, to, deadline, toChainID)
}

// AnySwapOutExactTokensForTokensUnderlying is a paid mutator transaction binding the contract method 0xd8b9f610.
//
// Solidity: function anySwapOutExactTokensForTokensUnderlying(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline, uint256 toChainID) returns()
func (_Contracts *ContractsTransactor) AnySwapOutExactTokensForTokensUnderlying(opts *bind.TransactOpts, amountIn *big.Int, amountOutMin *big.Int, path []common.Address, to common.Address, deadline *big.Int, toChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "anySwapOutExactTokensForTokensUnderlying", amountIn, amountOutMin, path, to, deadline, toChainID)
}

// AnySwapOutExactTokensForTokensUnderlying is a paid mutator transaction binding the contract method 0xd8b9f610.
//
// Solidity: function anySwapOutExactTokensForTokensUnderlying(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline, uint256 toChainID) returns()
func (_Contracts *ContractsSession) AnySwapOutExactTokensForTokensUnderlying(amountIn *big.Int, amountOutMin *big.Int, path []common.Address, to common.Address, deadline *big.Int, toChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AnySwapOutExactTokensForTokensUnderlying(&_Contracts.TransactOpts, amountIn, amountOutMin, path, to, deadline, toChainID)
}

// AnySwapOutExactTokensForTokensUnderlying is a paid mutator transaction binding the contract method 0xd8b9f610.
//
// Solidity: function anySwapOutExactTokensForTokensUnderlying(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline, uint256 toChainID) returns()
func (_Contracts *ContractsTransactorSession) AnySwapOutExactTokensForTokensUnderlying(amountIn *big.Int, amountOutMin *big.Int, path []common.Address, to common.Address, deadline *big.Int, toChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AnySwapOutExactTokensForTokensUnderlying(&_Contracts.TransactOpts, amountIn, amountOutMin, path, to, deadline, toChainID)
}

// AnySwapOutNative is a paid mutator transaction binding the contract method 0x540dd52c.
//
// Solidity: function anySwapOutNative(address token, string to, uint256 toChainID) payable returns()
func (_Contracts *ContractsTransactor) AnySwapOutNative(opts *bind.TransactOpts, token common.Address, to string, toChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "anySwapOutNative", token, to, toChainID)
}

// AnySwapOutNative is a paid mutator transaction binding the contract method 0x540dd52c.
//
// Solidity: function anySwapOutNative(address token, string to, uint256 toChainID) payable returns()
func (_Contracts *ContractsSession) AnySwapOutNative(token common.Address, to string, toChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AnySwapOutNative(&_Contracts.TransactOpts, token, to, toChainID)
}

// AnySwapOutNative is a paid mutator transaction binding the contract method 0x540dd52c.
//
// Solidity: function anySwapOutNative(address token, string to, uint256 toChainID) payable returns()
func (_Contracts *ContractsTransactorSession) AnySwapOutNative(token common.Address, to string, toChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AnySwapOutNative(&_Contracts.TransactOpts, token, to, toChainID)
}

// AnySwapOutNative0 is a paid mutator transaction binding the contract method 0xa5e56571.
//
// Solidity: function anySwapOutNative(address token, address to, uint256 toChainID) payable returns()
func (_Contracts *ContractsTransactor) AnySwapOutNative0(opts *bind.TransactOpts, token common.Address, to common.Address, toChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "anySwapOutNative0", token, to, toChainID)
}

// AnySwapOutNative0 is a paid mutator transaction binding the contract method 0xa5e56571.
//
// Solidity: function anySwapOutNative(address token, address to, uint256 toChainID) payable returns()
func (_Contracts *ContractsSession) AnySwapOutNative0(token common.Address, to common.Address, toChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AnySwapOutNative0(&_Contracts.TransactOpts, token, to, toChainID)
}

// AnySwapOutNative0 is a paid mutator transaction binding the contract method 0xa5e56571.
//
// Solidity: function anySwapOutNative(address token, address to, uint256 toChainID) payable returns()
func (_Contracts *ContractsTransactorSession) AnySwapOutNative0(token common.Address, to common.Address, toChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AnySwapOutNative0(&_Contracts.TransactOpts, token, to, toChainID)
}

// AnySwapOutUnderlying is a paid mutator transaction binding the contract method 0x049b4e7e.
//
// Solidity: function anySwapOutUnderlying(address token, string to, uint256 amount, uint256 toChainID) returns()
func (_Contracts *ContractsTransactor) AnySwapOutUnderlying(opts *bind.TransactOpts, token common.Address, to string, amount *big.Int, toChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "anySwapOutUnderlying", token, to, amount, toChainID)
}

// AnySwapOutUnderlying is a paid mutator transaction binding the contract method 0x049b4e7e.
//
// Solidity: function anySwapOutUnderlying(address token, string to, uint256 amount, uint256 toChainID) returns()
func (_Contracts *ContractsSession) AnySwapOutUnderlying(token common.Address, to string, amount *big.Int, toChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AnySwapOutUnderlying(&_Contracts.TransactOpts, token, to, amount, toChainID)
}

// AnySwapOutUnderlying is a paid mutator transaction binding the contract method 0x049b4e7e.
//
// Solidity: function anySwapOutUnderlying(address token, string to, uint256 amount, uint256 toChainID) returns()
func (_Contracts *ContractsTransactorSession) AnySwapOutUnderlying(token common.Address, to string, amount *big.Int, toChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AnySwapOutUnderlying(&_Contracts.TransactOpts, token, to, amount, toChainID)
}

// AnySwapOutUnderlying0 is a paid mutator transaction binding the contract method 0xedbdf5e2.
//
// Solidity: function anySwapOutUnderlying(address token, address to, uint256 amount, uint256 toChainID) returns()
func (_Contracts *ContractsTransactor) AnySwapOutUnderlying0(opts *bind.TransactOpts, token common.Address, to common.Address, amount *big.Int, toChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "anySwapOutUnderlying0", token, to, amount, toChainID)
}

// AnySwapOutUnderlying0 is a paid mutator transaction binding the contract method 0xedbdf5e2.
//
// Solidity: function anySwapOutUnderlying(address token, address to, uint256 amount, uint256 toChainID) returns()
func (_Contracts *ContractsSession) AnySwapOutUnderlying0(token common.Address, to common.Address, amount *big.Int, toChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AnySwapOutUnderlying0(&_Contracts.TransactOpts, token, to, amount, toChainID)
}

// AnySwapOutUnderlying0 is a paid mutator transaction binding the contract method 0xedbdf5e2.
//
// Solidity: function anySwapOutUnderlying(address token, address to, uint256 amount, uint256 toChainID) returns()
func (_Contracts *ContractsTransactorSession) AnySwapOutUnderlying0(token common.Address, to common.Address, amount *big.Int, toChainID *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AnySwapOutUnderlying0(&_Contracts.TransactOpts, token, to, amount, toChainID)
}

// ApplyMinter is a paid mutator transaction binding the contract method 0xd9e35bb2.
//
// Solidity: function applyMinter(address token) returns()
func (_Contracts *ContractsTransactor) ApplyMinter(opts *bind.TransactOpts, token common.Address) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "applyMinter", token)
}

// ApplyMinter is a paid mutator transaction binding the contract method 0xd9e35bb2.
//
// Solidity: function applyMinter(address token) returns()
func (_Contracts *ContractsSession) ApplyMinter(token common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.ApplyMinter(&_Contracts.TransactOpts, token)
}

// ApplyMinter is a paid mutator transaction binding the contract method 0xd9e35bb2.
//
// Solidity: function applyMinter(address token) returns()
func (_Contracts *ContractsTransactorSession) ApplyMinter(token common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.ApplyMinter(&_Contracts.TransactOpts, token)
}

// ChangeMPC is a paid mutator transaction binding the contract method 0x5b7b018c.
//
// Solidity: function changeMPC(address newMPC) returns(bool)
func (_Contracts *ContractsTransactor) ChangeMPC(opts *bind.TransactOpts, newMPC common.Address) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "changeMPC", newMPC)
}

// ChangeMPC is a paid mutator transaction binding the contract method 0x5b7b018c.
//
// Solidity: function changeMPC(address newMPC) returns(bool)
func (_Contracts *ContractsSession) ChangeMPC(newMPC common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.ChangeMPC(&_Contracts.TransactOpts, newMPC)
}

// ChangeMPC is a paid mutator transaction binding the contract method 0x5b7b018c.
//
// Solidity: function changeMPC(address newMPC) returns(bool)
func (_Contracts *ContractsTransactorSession) ChangeMPC(newMPC common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.ChangeMPC(&_Contracts.TransactOpts, newMPC)
}

// ChangeVault is a paid mutator transaction binding the contract method 0x456862aa.
//
// Solidity: function changeVault(address token, address newVault) returns(bool)
func (_Contracts *ContractsTransactor) ChangeVault(opts *bind.TransactOpts, token common.Address, newVault common.Address) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "changeVault", token, newVault)
}

// ChangeVault is a paid mutator transaction binding the contract method 0x456862aa.
//
// Solidity: function changeVault(address token, address newVault) returns(bool)
func (_Contracts *ContractsSession) ChangeVault(token common.Address, newVault common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.ChangeVault(&_Contracts.TransactOpts, token, newVault)
}

// ChangeVault is a paid mutator transaction binding the contract method 0x456862aa.
//
// Solidity: function changeVault(address token, address newVault) returns(bool)
func (_Contracts *ContractsTransactorSession) ChangeVault(token common.Address, newVault common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.ChangeVault(&_Contracts.TransactOpts, token, newVault)
}

// DepositNative is a paid mutator transaction binding the contract method 0x701bb891.
//
// Solidity: function depositNative(address token, address to) payable returns(uint256)
func (_Contracts *ContractsTransactor) DepositNative(opts *bind.TransactOpts, token common.Address, to common.Address) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "depositNative", token, to)
}

// DepositNative is a paid mutator transaction binding the contract method 0x701bb891.
//
// Solidity: function depositNative(address token, address to) payable returns(uint256)
func (_Contracts *ContractsSession) DepositNative(token common.Address, to common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.DepositNative(&_Contracts.TransactOpts, token, to)
}

// DepositNative is a paid mutator transaction binding the contract method 0x701bb891.
//
// Solidity: function depositNative(address token, address to) payable returns(uint256)
func (_Contracts *ContractsTransactorSession) DepositNative(token common.Address, to common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.DepositNative(&_Contracts.TransactOpts, token, to)
}

// RevokeMinter is a paid mutator transaction binding the contract method 0x87bafe5f.
//
// Solidity: function revokeMinter(address token, address _auth) returns()
func (_Contracts *ContractsTransactor) RevokeMinter(opts *bind.TransactOpts, token common.Address, _auth common.Address) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "revokeMinter", token, _auth)
}

// RevokeMinter is a paid mutator transaction binding the contract method 0x87bafe5f.
//
// Solidity: function revokeMinter(address token, address _auth) returns()
func (_Contracts *ContractsSession) RevokeMinter(token common.Address, _auth common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.RevokeMinter(&_Contracts.TransactOpts, token, _auth)
}

// RevokeMinter is a paid mutator transaction binding the contract method 0x87bafe5f.
//
// Solidity: function revokeMinter(address token, address _auth) returns()
func (_Contracts *ContractsTransactorSession) RevokeMinter(token common.Address, _auth common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.RevokeMinter(&_Contracts.TransactOpts, token, _auth)
}

// SetEnableSwapTrade is a paid mutator transaction binding the contract method 0x085c6d5e.
//
// Solidity: function setEnableSwapTrade(bool enable) returns()
func (_Contracts *ContractsTransactor) SetEnableSwapTrade(opts *bind.TransactOpts, enable bool) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "setEnableSwapTrade", enable)
}

// SetEnableSwapTrade is a paid mutator transaction binding the contract method 0x085c6d5e.
//
// Solidity: function setEnableSwapTrade(bool enable) returns()
func (_Contracts *ContractsSession) SetEnableSwapTrade(enable bool) (*types.Transaction, error) {
	return _Contracts.Contract.SetEnableSwapTrade(&_Contracts.TransactOpts, enable)
}

// SetEnableSwapTrade is a paid mutator transaction binding the contract method 0x085c6d5e.
//
// Solidity: function setEnableSwapTrade(bool enable) returns()
func (_Contracts *ContractsTransactorSession) SetEnableSwapTrade(enable bool) (*types.Transaction, error) {
	return _Contracts.Contract.SetEnableSwapTrade(&_Contracts.TransactOpts, enable)
}

// SetMinter is a paid mutator transaction binding the contract method 0x9f122d6c.
//
// Solidity: function setMinter(address token, address _auth) returns()
func (_Contracts *ContractsTransactor) SetMinter(opts *bind.TransactOpts, token common.Address, _auth common.Address) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "setMinter", token, _auth)
}

// SetMinter is a paid mutator transaction binding the contract method 0x9f122d6c.
//
// Solidity: function setMinter(address token, address _auth) returns()
func (_Contracts *ContractsSession) SetMinter(token common.Address, _auth common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.SetMinter(&_Contracts.TransactOpts, token, _auth)
}

// SetMinter is a paid mutator transaction binding the contract method 0x9f122d6c.
//
// Solidity: function setMinter(address token, address _auth) returns()
func (_Contracts *ContractsTransactorSession) SetMinter(token common.Address, _auth common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.SetMinter(&_Contracts.TransactOpts, token, _auth)
}

// WithdrawNative is a paid mutator transaction binding the contract method 0x832e9492.
//
// Solidity: function withdrawNative(address token, uint256 amount, address to) returns(uint256)
func (_Contracts *ContractsTransactor) WithdrawNative(opts *bind.TransactOpts, token common.Address, amount *big.Int, to common.Address) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "withdrawNative", token, amount, to)
}

// WithdrawNative is a paid mutator transaction binding the contract method 0x832e9492.
//
// Solidity: function withdrawNative(address token, uint256 amount, address to) returns(uint256)
func (_Contracts *ContractsSession) WithdrawNative(token common.Address, amount *big.Int, to common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.WithdrawNative(&_Contracts.TransactOpts, token, amount, to)
}

// WithdrawNative is a paid mutator transaction binding the contract method 0x832e9492.
//
// Solidity: function withdrawNative(address token, uint256 amount, address to) returns(uint256)
func (_Contracts *ContractsTransactorSession) WithdrawNative(token common.Address, amount *big.Int, to common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.WithdrawNative(&_Contracts.TransactOpts, token, amount, to)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Contracts *ContractsTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contracts.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Contracts *ContractsSession) Receive() (*types.Transaction, error) {
	return _Contracts.Contract.Receive(&_Contracts.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Contracts *ContractsTransactorSession) Receive() (*types.Transaction, error) {
	return _Contracts.Contract.Receive(&_Contracts.TransactOpts)
}

// ContractsLogAnySwapInIterator is returned from FilterLogAnySwapIn and is used to iterate over the raw logs and unpacked data for LogAnySwapIn events raised by the Contracts contract.
type ContractsLogAnySwapInIterator struct {
	Event *ContractsLogAnySwapIn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsLogAnySwapInIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsLogAnySwapIn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsLogAnySwapIn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsLogAnySwapInIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsLogAnySwapInIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsLogAnySwapIn represents a LogAnySwapIn event raised by the Contracts contract.
type ContractsLogAnySwapIn struct {
	Txhash      [32]byte
	Token       common.Address
	To          common.Address
	Amount      *big.Int
	FromChainID *big.Int
	ToChainID   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterLogAnySwapIn is a free log retrieval operation binding the contract event 0xaac9ce45fe3adf5143598c4f18a369591a20a3384aedaf1b525d29127e1fcd55.
//
// Solidity: event LogAnySwapIn(bytes32 indexed txhash, address indexed token, address indexed to, uint256 amount, uint256 fromChainID, uint256 toChainID)
func (_Contracts *ContractsFilterer) FilterLogAnySwapIn(opts *bind.FilterOpts, txhash [][32]byte, token []common.Address, to []common.Address) (*ContractsLogAnySwapInIterator, error) {

	var txhashRule []interface{}
	for _, txhashItem := range txhash {
		txhashRule = append(txhashRule, txhashItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "LogAnySwapIn", txhashRule, tokenRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ContractsLogAnySwapInIterator{contract: _Contracts.contract, event: "LogAnySwapIn", logs: logs, sub: sub}, nil
}

// WatchLogAnySwapIn is a free log subscription operation binding the contract event 0xaac9ce45fe3adf5143598c4f18a369591a20a3384aedaf1b525d29127e1fcd55.
//
// Solidity: event LogAnySwapIn(bytes32 indexed txhash, address indexed token, address indexed to, uint256 amount, uint256 fromChainID, uint256 toChainID)
func (_Contracts *ContractsFilterer) WatchLogAnySwapIn(opts *bind.WatchOpts, sink chan<- *ContractsLogAnySwapIn, txhash [][32]byte, token []common.Address, to []common.Address) (event.Subscription, error) {

	var txhashRule []interface{}
	for _, txhashItem := range txhash {
		txhashRule = append(txhashRule, txhashItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "LogAnySwapIn", txhashRule, tokenRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsLogAnySwapIn)
				if err := _Contracts.contract.UnpackLog(event, "LogAnySwapIn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAnySwapIn is a log parse operation binding the contract event 0xaac9ce45fe3adf5143598c4f18a369591a20a3384aedaf1b525d29127e1fcd55.
//
// Solidity: event LogAnySwapIn(bytes32 indexed txhash, address indexed token, address indexed to, uint256 amount, uint256 fromChainID, uint256 toChainID)
func (_Contracts *ContractsFilterer) ParseLogAnySwapIn(log types.Log) (*ContractsLogAnySwapIn, error) {
	event := new(ContractsLogAnySwapIn)
	if err := _Contracts.contract.UnpackLog(event, "LogAnySwapIn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsLogAnySwapOutIterator is returned from FilterLogAnySwapOut and is used to iterate over the raw logs and unpacked data for LogAnySwapOut events raised by the Contracts contract.
type ContractsLogAnySwapOutIterator struct {
	Event *ContractsLogAnySwapOut // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsLogAnySwapOutIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsLogAnySwapOut)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsLogAnySwapOut)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsLogAnySwapOutIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsLogAnySwapOutIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsLogAnySwapOut represents a LogAnySwapOut event raised by the Contracts contract.
type ContractsLogAnySwapOut struct {
	Token       common.Address
	From        common.Address
	To          common.Address
	Amount      *big.Int
	FromChainID *big.Int
	ToChainID   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterLogAnySwapOut is a free log retrieval operation binding the contract event 0x97116cf6cd4f6412bb47914d6db18da9e16ab2142f543b86e207c24fbd16b23a.
//
// Solidity: event LogAnySwapOut(address indexed token, address indexed from, address indexed to, uint256 amount, uint256 fromChainID, uint256 toChainID)
func (_Contracts *ContractsFilterer) FilterLogAnySwapOut(opts *bind.FilterOpts, token []common.Address, from []common.Address, to []common.Address) (*ContractsLogAnySwapOutIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "LogAnySwapOut", tokenRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ContractsLogAnySwapOutIterator{contract: _Contracts.contract, event: "LogAnySwapOut", logs: logs, sub: sub}, nil
}

// WatchLogAnySwapOut is a free log subscription operation binding the contract event 0x97116cf6cd4f6412bb47914d6db18da9e16ab2142f543b86e207c24fbd16b23a.
//
// Solidity: event LogAnySwapOut(address indexed token, address indexed from, address indexed to, uint256 amount, uint256 fromChainID, uint256 toChainID)
func (_Contracts *ContractsFilterer) WatchLogAnySwapOut(opts *bind.WatchOpts, sink chan<- *ContractsLogAnySwapOut, token []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "LogAnySwapOut", tokenRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsLogAnySwapOut)
				if err := _Contracts.contract.UnpackLog(event, "LogAnySwapOut", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAnySwapOut is a log parse operation binding the contract event 0x97116cf6cd4f6412bb47914d6db18da9e16ab2142f543b86e207c24fbd16b23a.
//
// Solidity: event LogAnySwapOut(address indexed token, address indexed from, address indexed to, uint256 amount, uint256 fromChainID, uint256 toChainID)
func (_Contracts *ContractsFilterer) ParseLogAnySwapOut(log types.Log) (*ContractsLogAnySwapOut, error) {
	event := new(ContractsLogAnySwapOut)
	if err := _Contracts.contract.UnpackLog(event, "LogAnySwapOut", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsLogAnySwapOut0Iterator is returned from FilterLogAnySwapOut0 and is used to iterate over the raw logs and unpacked data for LogAnySwapOut0 events raised by the Contracts contract.
type ContractsLogAnySwapOut0Iterator struct {
	Event *ContractsLogAnySwapOut0 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsLogAnySwapOut0Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsLogAnySwapOut0)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsLogAnySwapOut0)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsLogAnySwapOut0Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsLogAnySwapOut0Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsLogAnySwapOut0 represents a LogAnySwapOut0 event raised by the Contracts contract.
type ContractsLogAnySwapOut0 struct {
	Token       common.Address
	From        common.Address
	To          string
	Amount      *big.Int
	FromChainID *big.Int
	ToChainID   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterLogAnySwapOut0 is a free log retrieval operation binding the contract event 0x409e0ad946b19f77602d6cf11d59e1796ddaa4828159a0b4fb7fa2ff6b161b79.
//
// Solidity: event LogAnySwapOut(address indexed token, address indexed from, string to, uint256 amount, uint256 fromChainID, uint256 toChainID)
func (_Contracts *ContractsFilterer) FilterLogAnySwapOut0(opts *bind.FilterOpts, token []common.Address, from []common.Address) (*ContractsLogAnySwapOut0Iterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "LogAnySwapOut0", tokenRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &ContractsLogAnySwapOut0Iterator{contract: _Contracts.contract, event: "LogAnySwapOut0", logs: logs, sub: sub}, nil
}

// WatchLogAnySwapOut0 is a free log subscription operation binding the contract event 0x409e0ad946b19f77602d6cf11d59e1796ddaa4828159a0b4fb7fa2ff6b161b79.
//
// Solidity: event LogAnySwapOut(address indexed token, address indexed from, string to, uint256 amount, uint256 fromChainID, uint256 toChainID)
func (_Contracts *ContractsFilterer) WatchLogAnySwapOut0(opts *bind.WatchOpts, sink chan<- *ContractsLogAnySwapOut0, token []common.Address, from []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "LogAnySwapOut0", tokenRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsLogAnySwapOut0)
				if err := _Contracts.contract.UnpackLog(event, "LogAnySwapOut0", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAnySwapOut0 is a log parse operation binding the contract event 0x409e0ad946b19f77602d6cf11d59e1796ddaa4828159a0b4fb7fa2ff6b161b79.
//
// Solidity: event LogAnySwapOut(address indexed token, address indexed from, string to, uint256 amount, uint256 fromChainID, uint256 toChainID)
func (_Contracts *ContractsFilterer) ParseLogAnySwapOut0(log types.Log) (*ContractsLogAnySwapOut0, error) {
	event := new(ContractsLogAnySwapOut0)
	if err := _Contracts.contract.UnpackLog(event, "LogAnySwapOut0", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsLogAnySwapTradeTokensForNativeIterator is returned from FilterLogAnySwapTradeTokensForNative and is used to iterate over the raw logs and unpacked data for LogAnySwapTradeTokensForNative events raised by the Contracts contract.
type ContractsLogAnySwapTradeTokensForNativeIterator struct {
	Event *ContractsLogAnySwapTradeTokensForNative // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsLogAnySwapTradeTokensForNativeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsLogAnySwapTradeTokensForNative)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsLogAnySwapTradeTokensForNative)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsLogAnySwapTradeTokensForNativeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsLogAnySwapTradeTokensForNativeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsLogAnySwapTradeTokensForNative represents a LogAnySwapTradeTokensForNative event raised by the Contracts contract.
type ContractsLogAnySwapTradeTokensForNative struct {
	Path         []common.Address
	From         common.Address
	To           common.Address
	AmountIn     *big.Int
	AmountOutMin *big.Int
	FromChainID  *big.Int
	ToChainID    *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterLogAnySwapTradeTokensForNative is a free log retrieval operation binding the contract event 0x278277e0209c347189add7bd92411973b5f6b8644f7ac62ea1be984ce993f8f4.
//
// Solidity: event LogAnySwapTradeTokensForNative(address[] path, address indexed from, address indexed to, uint256 amountIn, uint256 amountOutMin, uint256 fromChainID, uint256 toChainID)
func (_Contracts *ContractsFilterer) FilterLogAnySwapTradeTokensForNative(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ContractsLogAnySwapTradeTokensForNativeIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "LogAnySwapTradeTokensForNative", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ContractsLogAnySwapTradeTokensForNativeIterator{contract: _Contracts.contract, event: "LogAnySwapTradeTokensForNative", logs: logs, sub: sub}, nil
}

// WatchLogAnySwapTradeTokensForNative is a free log subscription operation binding the contract event 0x278277e0209c347189add7bd92411973b5f6b8644f7ac62ea1be984ce993f8f4.
//
// Solidity: event LogAnySwapTradeTokensForNative(address[] path, address indexed from, address indexed to, uint256 amountIn, uint256 amountOutMin, uint256 fromChainID, uint256 toChainID)
func (_Contracts *ContractsFilterer) WatchLogAnySwapTradeTokensForNative(opts *bind.WatchOpts, sink chan<- *ContractsLogAnySwapTradeTokensForNative, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "LogAnySwapTradeTokensForNative", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsLogAnySwapTradeTokensForNative)
				if err := _Contracts.contract.UnpackLog(event, "LogAnySwapTradeTokensForNative", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAnySwapTradeTokensForNative is a log parse operation binding the contract event 0x278277e0209c347189add7bd92411973b5f6b8644f7ac62ea1be984ce993f8f4.
//
// Solidity: event LogAnySwapTradeTokensForNative(address[] path, address indexed from, address indexed to, uint256 amountIn, uint256 amountOutMin, uint256 fromChainID, uint256 toChainID)
func (_Contracts *ContractsFilterer) ParseLogAnySwapTradeTokensForNative(log types.Log) (*ContractsLogAnySwapTradeTokensForNative, error) {
	event := new(ContractsLogAnySwapTradeTokensForNative)
	if err := _Contracts.contract.UnpackLog(event, "LogAnySwapTradeTokensForNative", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsLogAnySwapTradeTokensForTokensIterator is returned from FilterLogAnySwapTradeTokensForTokens and is used to iterate over the raw logs and unpacked data for LogAnySwapTradeTokensForTokens events raised by the Contracts contract.
type ContractsLogAnySwapTradeTokensForTokensIterator struct {
	Event *ContractsLogAnySwapTradeTokensForTokens // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsLogAnySwapTradeTokensForTokensIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsLogAnySwapTradeTokensForTokens)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsLogAnySwapTradeTokensForTokens)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsLogAnySwapTradeTokensForTokensIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsLogAnySwapTradeTokensForTokensIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsLogAnySwapTradeTokensForTokens represents a LogAnySwapTradeTokensForTokens event raised by the Contracts contract.
type ContractsLogAnySwapTradeTokensForTokens struct {
	Path         []common.Address
	From         common.Address
	To           common.Address
	AmountIn     *big.Int
	AmountOutMin *big.Int
	FromChainID  *big.Int
	ToChainID    *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterLogAnySwapTradeTokensForTokens is a free log retrieval operation binding the contract event 0xfea6abdf4fd32f20966dff7619354cd82cd43dc78a3bee479f04c74dbfc585b3.
//
// Solidity: event LogAnySwapTradeTokensForTokens(address[] path, address indexed from, address indexed to, uint256 amountIn, uint256 amountOutMin, uint256 fromChainID, uint256 toChainID)
func (_Contracts *ContractsFilterer) FilterLogAnySwapTradeTokensForTokens(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ContractsLogAnySwapTradeTokensForTokensIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "LogAnySwapTradeTokensForTokens", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ContractsLogAnySwapTradeTokensForTokensIterator{contract: _Contracts.contract, event: "LogAnySwapTradeTokensForTokens", logs: logs, sub: sub}, nil
}

// WatchLogAnySwapTradeTokensForTokens is a free log subscription operation binding the contract event 0xfea6abdf4fd32f20966dff7619354cd82cd43dc78a3bee479f04c74dbfc585b3.
//
// Solidity: event LogAnySwapTradeTokensForTokens(address[] path, address indexed from, address indexed to, uint256 amountIn, uint256 amountOutMin, uint256 fromChainID, uint256 toChainID)
func (_Contracts *ContractsFilterer) WatchLogAnySwapTradeTokensForTokens(opts *bind.WatchOpts, sink chan<- *ContractsLogAnySwapTradeTokensForTokens, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "LogAnySwapTradeTokensForTokens", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsLogAnySwapTradeTokensForTokens)
				if err := _Contracts.contract.UnpackLog(event, "LogAnySwapTradeTokensForTokens", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAnySwapTradeTokensForTokens is a log parse operation binding the contract event 0xfea6abdf4fd32f20966dff7619354cd82cd43dc78a3bee479f04c74dbfc585b3.
//
// Solidity: event LogAnySwapTradeTokensForTokens(address[] path, address indexed from, address indexed to, uint256 amountIn, uint256 amountOutMin, uint256 fromChainID, uint256 toChainID)
func (_Contracts *ContractsFilterer) ParseLogAnySwapTradeTokensForTokens(log types.Log) (*ContractsLogAnySwapTradeTokensForTokens, error) {
	event := new(ContractsLogAnySwapTradeTokensForTokens)
	if err := _Contracts.contract.UnpackLog(event, "LogAnySwapTradeTokensForTokens", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsLogChangeMPCIterator is returned from FilterLogChangeMPC and is used to iterate over the raw logs and unpacked data for LogChangeMPC events raised by the Contracts contract.
type ContractsLogChangeMPCIterator struct {
	Event *ContractsLogChangeMPC // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsLogChangeMPCIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsLogChangeMPC)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsLogChangeMPC)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsLogChangeMPCIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsLogChangeMPCIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsLogChangeMPC represents a LogChangeMPC event raised by the Contracts contract.
type ContractsLogChangeMPC struct {
	OldMPC        common.Address
	NewMPC        common.Address
	EffectiveTime *big.Int
	ChainID       *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterLogChangeMPC is a free log retrieval operation binding the contract event 0xcda32bc39904597666dfa9f9c845714756e1ffffad55b52e0d344673a2198121.
//
// Solidity: event LogChangeMPC(address indexed oldMPC, address indexed newMPC, uint256 indexed effectiveTime, uint256 chainID)
func (_Contracts *ContractsFilterer) FilterLogChangeMPC(opts *bind.FilterOpts, oldMPC []common.Address, newMPC []common.Address, effectiveTime []*big.Int) (*ContractsLogChangeMPCIterator, error) {

	var oldMPCRule []interface{}
	for _, oldMPCItem := range oldMPC {
		oldMPCRule = append(oldMPCRule, oldMPCItem)
	}
	var newMPCRule []interface{}
	for _, newMPCItem := range newMPC {
		newMPCRule = append(newMPCRule, newMPCItem)
	}
	var effectiveTimeRule []interface{}
	for _, effectiveTimeItem := range effectiveTime {
		effectiveTimeRule = append(effectiveTimeRule, effectiveTimeItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "LogChangeMPC", oldMPCRule, newMPCRule, effectiveTimeRule)
	if err != nil {
		return nil, err
	}
	return &ContractsLogChangeMPCIterator{contract: _Contracts.contract, event: "LogChangeMPC", logs: logs, sub: sub}, nil
}

// WatchLogChangeMPC is a free log subscription operation binding the contract event 0xcda32bc39904597666dfa9f9c845714756e1ffffad55b52e0d344673a2198121.
//
// Solidity: event LogChangeMPC(address indexed oldMPC, address indexed newMPC, uint256 indexed effectiveTime, uint256 chainID)
func (_Contracts *ContractsFilterer) WatchLogChangeMPC(opts *bind.WatchOpts, sink chan<- *ContractsLogChangeMPC, oldMPC []common.Address, newMPC []common.Address, effectiveTime []*big.Int) (event.Subscription, error) {

	var oldMPCRule []interface{}
	for _, oldMPCItem := range oldMPC {
		oldMPCRule = append(oldMPCRule, oldMPCItem)
	}
	var newMPCRule []interface{}
	for _, newMPCItem := range newMPC {
		newMPCRule = append(newMPCRule, newMPCItem)
	}
	var effectiveTimeRule []interface{}
	for _, effectiveTimeItem := range effectiveTime {
		effectiveTimeRule = append(effectiveTimeRule, effectiveTimeItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "LogChangeMPC", oldMPCRule, newMPCRule, effectiveTimeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsLogChangeMPC)
				if err := _Contracts.contract.UnpackLog(event, "LogChangeMPC", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogChangeMPC is a log parse operation binding the contract event 0xcda32bc39904597666dfa9f9c845714756e1ffffad55b52e0d344673a2198121.
//
// Solidity: event LogChangeMPC(address indexed oldMPC, address indexed newMPC, uint256 indexed effectiveTime, uint256 chainID)
func (_Contracts *ContractsFilterer) ParseLogChangeMPC(log types.Log) (*ContractsLogChangeMPC, error) {
	event := new(ContractsLogChangeMPC)
	if err := _Contracts.contract.UnpackLog(event, "LogChangeMPC", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsLogChangeRouterIterator is returned from FilterLogChangeRouter and is used to iterate over the raw logs and unpacked data for LogChangeRouter events raised by the Contracts contract.
type ContractsLogChangeRouterIterator struct {
	Event *ContractsLogChangeRouter // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsLogChangeRouterIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsLogChangeRouter)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsLogChangeRouter)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsLogChangeRouterIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsLogChangeRouterIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsLogChangeRouter represents a LogChangeRouter event raised by the Contracts contract.
type ContractsLogChangeRouter struct {
	OldRouter common.Address
	NewRouter common.Address
	ChainID   *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogChangeRouter is a free log retrieval operation binding the contract event 0x7eefe162042d50d604dca716bef4ff4c5e318a056f712c0195d016f78089955a.
//
// Solidity: event LogChangeRouter(address indexed oldRouter, address indexed newRouter, uint256 chainID)
func (_Contracts *ContractsFilterer) FilterLogChangeRouter(opts *bind.FilterOpts, oldRouter []common.Address, newRouter []common.Address) (*ContractsLogChangeRouterIterator, error) {

	var oldRouterRule []interface{}
	for _, oldRouterItem := range oldRouter {
		oldRouterRule = append(oldRouterRule, oldRouterItem)
	}
	var newRouterRule []interface{}
	for _, newRouterItem := range newRouter {
		newRouterRule = append(newRouterRule, newRouterItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "LogChangeRouter", oldRouterRule, newRouterRule)
	if err != nil {
		return nil, err
	}
	return &ContractsLogChangeRouterIterator{contract: _Contracts.contract, event: "LogChangeRouter", logs: logs, sub: sub}, nil
}

// WatchLogChangeRouter is a free log subscription operation binding the contract event 0x7eefe162042d50d604dca716bef4ff4c5e318a056f712c0195d016f78089955a.
//
// Solidity: event LogChangeRouter(address indexed oldRouter, address indexed newRouter, uint256 chainID)
func (_Contracts *ContractsFilterer) WatchLogChangeRouter(opts *bind.WatchOpts, sink chan<- *ContractsLogChangeRouter, oldRouter []common.Address, newRouter []common.Address) (event.Subscription, error) {

	var oldRouterRule []interface{}
	for _, oldRouterItem := range oldRouter {
		oldRouterRule = append(oldRouterRule, oldRouterItem)
	}
	var newRouterRule []interface{}
	for _, newRouterItem := range newRouter {
		newRouterRule = append(newRouterRule, newRouterItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "LogChangeRouter", oldRouterRule, newRouterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsLogChangeRouter)
				if err := _Contracts.contract.UnpackLog(event, "LogChangeRouter", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogChangeRouter is a log parse operation binding the contract event 0x7eefe162042d50d604dca716bef4ff4c5e318a056f712c0195d016f78089955a.
//
// Solidity: event LogChangeRouter(address indexed oldRouter, address indexed newRouter, uint256 chainID)
func (_Contracts *ContractsFilterer) ParseLogChangeRouter(log types.Log) (*ContractsLogChangeRouter, error) {
	event := new(ContractsLogChangeRouter)
	if err := _Contracts.contract.UnpackLog(event, "LogChangeRouter", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
