{
	"id": "d1e6eff79965dd9873a57cdc0991c884",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.17",
	"solcLongVersion": "0.8.17+commit.8df45f5f",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/libraries/UniswapV3.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol';\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol ';\nimport '../interfaces/IERC20.sol';\n\nlibrary UniswapV3 {\n    \n    function price(uint24[] calldata fee,address provider,address t1,address t2) external view returns (uint256){\n        for(uint i=0;i<fee.length;i++){\n            address pool = IUniswapV3Factory(provider).getPool(t1,t2,fee[i]);\n            if (pool == address(0)) {\n                continue ;\n            }\n            uint128 l = IUniswapV3Pool(pool).liquidity();\n            if (l == 0) {\n                continue ;  \n            }\n            (uint160 sqrtPriceX96,,,,,,) = IUniswapV3Pool(pool).slot0();\n            if(sqrtPriceX96 == 0) {\n                continue ;\n            } \n            uint8 d1 = IERC20(t1).decimals();\n            uint8 d2 = IERC20(t2).decimals();\n\n            // uint price = (sqrtPriceX96 ** 2) * (10 ** ())\n            \n        }\n    }\n}"
			},
			"contracts/interfaces/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function deposit() external payable;\n    function withdraw(uint) external;\n}"
			},
			"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol ": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\nimport './pool/IUniswapV3PoolDerivedState.sol';\nimport './pool/IUniswapV3PoolActions.sol';\nimport './pool/IUniswapV3PoolOwnerActions.sol';\nimport './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"
			},
			"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title The interface for the Uniswap V3 Factory\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\ninterface IUniswapV3Factory {\n    /// @notice Emitted when the owner of the factory is changed\n    /// @param oldOwner The owner before the owner was changed\n    /// @param newOwner The owner after the owner was changed\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(\n        address indexed token0,\n        address indexed token1,\n        uint24 indexed fee,\n        int24 tickSpacing,\n        address pool\n    );\n\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n    /// @param fee The enabled fee, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n    /// @return The tick spacing\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param fee The desired fee for the pool\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n    /// are invalid.\n    /// @return pool The address of the newly created pool\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external returns (address pool);\n\n    /// @notice Updates the owner of the factory\n    /// @dev Must be called by the current owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Enables a fee amount with the given tickSpacing\n    /// @dev Fee amounts may never be removed once enabled\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n}\n"
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol": {
				"IUniswapV3Factory": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								}
							],
							"name": "FeeAmountEnabled",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "oldOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnerChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"name": "PoolCreated",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								}
							],
							"name": "createPool",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								}
							],
							"name": "enableFeeAmount",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								}
							],
							"name": "feeAmountTickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								}
							],
							"name": "getPool",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								}
							],
							"name": "setOwner",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"FeeAmountEnabled(uint24,int24)": {
								"params": {
									"fee": "The enabled fee, denominated in hundredths of a bip",
									"tickSpacing": "The minimum number of ticks between initialized ticks for pools created with the given fee"
								}
							},
							"OwnerChanged(address,address)": {
								"params": {
									"newOwner": "The owner after the owner was changed",
									"oldOwner": "The owner before the owner was changed"
								}
							},
							"PoolCreated(address,address,uint24,int24,address)": {
								"params": {
									"fee": "The fee collected upon every swap in the pool, denominated in hundredths of a bip",
									"pool": "The address of the created pool",
									"tickSpacing": "The minimum number of ticks between initialized ticks",
									"token0": "The first token of the pool by address sort order",
									"token1": "The second token of the pool by address sort order"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"createPool(address,address,uint24)": {
								"details": "tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments are invalid.",
								"params": {
									"fee": "The desired fee for the pool",
									"tokenA": "One of the two tokens in the desired pool",
									"tokenB": "The other of the two tokens in the desired pool"
								},
								"returns": {
									"pool": "The address of the newly created pool"
								}
							},
							"enableFeeAmount(uint24,int24)": {
								"details": "Fee amounts may never be removed once enabled",
								"params": {
									"fee": "The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)",
									"tickSpacing": "The spacing between ticks to be enforced for all pools created with the given fee amount"
								}
							},
							"feeAmountTickSpacing(uint24)": {
								"details": "A fee amount can never be removed, so this value should be hard coded or cached in the calling context",
								"params": {
									"fee": "The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee"
								},
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"getPool(address,address,uint24)": {
								"details": "tokenA and tokenB may be passed in either token0/token1 or token1/token0 order",
								"params": {
									"fee": "The fee collected upon every swap in the pool, denominated in hundredths of a bip",
									"tokenA": "The contract address of either token0 or token1",
									"tokenB": "The contract address of the other token"
								},
								"returns": {
									"pool": "The pool address"
								}
							},
							"owner()": {
								"details": "Can be changed by the current owner via setOwner",
								"returns": {
									"_0": "The address of the factory owner"
								}
							},
							"setOwner(address)": {
								"details": "Must be called by the current owner",
								"params": {
									"_owner": "The new owner of the factory"
								}
							}
						},
						"title": "The interface for the Uniswap V3 Factory",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"createPool(address,address,uint24)": "a1671295",
							"enableFeeAmount(uint24,int24)": "8a7c195f",
							"feeAmountTickSpacing(uint24)": "22afcccb",
							"getPool(address,address,uint24)": "1698ee82",
							"owner()": "8da5cb5b",
							"setOwner(address)": "13af4035"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"}],\"name\":\"FeeAmountEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"}],\"name\":\"enableFeeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"feeAmountTickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"FeeAmountEnabled(uint24,int24)\":{\"params\":{\"fee\":\"The enabled fee, denominated in hundredths of a bip\",\"tickSpacing\":\"The minimum number of ticks between initialized ticks for pools created with the given fee\"}},\"OwnerChanged(address,address)\":{\"params\":{\"newOwner\":\"The owner after the owner was changed\",\"oldOwner\":\"The owner before the owner was changed\"}},\"PoolCreated(address,address,uint24,int24,address)\":{\"params\":{\"fee\":\"The fee collected upon every swap in the pool, denominated in hundredths of a bip\",\"pool\":\"The address of the created pool\",\"tickSpacing\":\"The minimum number of ticks between initialized ticks\",\"token0\":\"The first token of the pool by address sort order\",\"token1\":\"The second token of the pool by address sort order\"}}},\"kind\":\"dev\",\"methods\":{\"createPool(address,address,uint24)\":{\"details\":\"tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments are invalid.\",\"params\":{\"fee\":\"The desired fee for the pool\",\"tokenA\":\"One of the two tokens in the desired pool\",\"tokenB\":\"The other of the two tokens in the desired pool\"},\"returns\":{\"pool\":\"The address of the newly created pool\"}},\"enableFeeAmount(uint24,int24)\":{\"details\":\"Fee amounts may never be removed once enabled\",\"params\":{\"fee\":\"The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\",\"tickSpacing\":\"The spacing between ticks to be enforced for all pools created with the given fee amount\"}},\"feeAmountTickSpacing(uint24)\":{\"details\":\"A fee amount can never be removed, so this value should be hard coded or cached in the calling context\",\"params\":{\"fee\":\"The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\"},\"returns\":{\"_0\":\"The tick spacing\"}},\"getPool(address,address,uint24)\":{\"details\":\"tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\",\"params\":{\"fee\":\"The fee collected upon every swap in the pool, denominated in hundredths of a bip\",\"tokenA\":\"The contract address of either token0 or token1\",\"tokenB\":\"The contract address of the other token\"},\"returns\":{\"pool\":\"The pool address\"}},\"owner()\":{\"details\":\"Can be changed by the current owner via setOwner\",\"returns\":{\"_0\":\"The address of the factory owner\"}},\"setOwner(address)\":{\"details\":\"Must be called by the current owner\",\"params\":{\"_owner\":\"The new owner of the factory\"}}},\"title\":\"The interface for the Uniswap V3 Factory\",\"version\":1},\"userdoc\":{\"events\":{\"FeeAmountEnabled(uint24,int24)\":{\"notice\":\"Emitted when a new fee amount is enabled for pool creation via the factory\"},\"OwnerChanged(address,address)\":{\"notice\":\"Emitted when the owner of the factory is changed\"},\"PoolCreated(address,address,uint24,int24,address)\":{\"notice\":\"Emitted when a pool is created\"}},\"kind\":\"user\",\"methods\":{\"createPool(address,address,uint24)\":{\"notice\":\"Creates a pool for the given two tokens and fee\"},\"enableFeeAmount(uint24,int24)\":{\"notice\":\"Enables a fee amount with the given tickSpacing\"},\"feeAmountTickSpacing(uint24)\":{\"notice\":\"Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\"},\"getPool(address,address,uint24)\":{\"notice\":\"Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\"},\"owner()\":{\"notice\":\"Returns the current owner of the factory\"},\"setOwner(address)\":{\"notice\":\"Updates the owner of the factory\"}},\"notice\":\"The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":\"IUniswapV3Factory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b9379ad954680c44a0bc523b314ae4c4da735f9fe1d02aa56ea5bdba6f1136f2\",\"dweb:/ipfs/QmZXdgQNXKAckrXWz9R3mc47F1fvDvr28a2ewJrwNAw71B\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"FeeAmountEnabled(uint24,int24)": {
								"notice": "Emitted when a new fee amount is enabled for pool creation via the factory"
							},
							"OwnerChanged(address,address)": {
								"notice": "Emitted when the owner of the factory is changed"
							},
							"PoolCreated(address,address,uint24,int24,address)": {
								"notice": "Emitted when a pool is created"
							}
						},
						"kind": "user",
						"methods": {
							"createPool(address,address,uint24)": {
								"notice": "Creates a pool for the given two tokens and fee"
							},
							"enableFeeAmount(uint24,int24)": {
								"notice": "Enables a fee amount with the given tickSpacing"
							},
							"feeAmountTickSpacing(uint24)": {
								"notice": "Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled"
							},
							"getPool(address,address,uint24)": {
								"notice": "Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist"
							},
							"owner()": {
								"notice": "Returns the current owner of the factory"
							},
							"setOwner(address)": {
								"notice": "Updates the owner of the factory"
							}
						},
						"notice": "The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees",
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol ": {
				"IUniswapV3Pool": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Burn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "CollectProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid1",
									"type": "uint256"
								}
							],
							"name": "Flash",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextOld",
									"type": "uint16"
								},
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextNew",
									"type": "uint16"
								}
							],
							"name": "IncreaseObservationCardinalityNext",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Initialize",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Mint",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0New",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1New",
									"type": "uint8"
								}
							],
							"name": "SetFeeProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Swap",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collectProtocol",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "fee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal0X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal1X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "flash",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								}
							],
							"name": "increaseObservationCardinalityNext",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "liquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxLiquidityPerTick",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "observations",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "blockTimestamp",
									"type": "uint32"
								},
								{
									"internalType": "int56",
									"name": "tickCumulative",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityCumulativeX128",
									"type": "uint160"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint32[]",
									"name": "secondsAgos",
									"type": "uint32[]"
								}
							],
							"name": "observe",
							"outputs": [
								{
									"internalType": "int56[]",
									"name": "tickCumulatives",
									"type": "int56[]"
								},
								{
									"internalType": "uint160[]",
									"name": "secondsPerLiquidityCumulativeX128s",
									"type": "uint160[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "_liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "protocolFees",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "token0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "token1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint8",
									"name": "feeProtocol0",
									"type": "uint8"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol1",
									"type": "uint8"
								}
							],
							"name": "setFeeProtocol",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "slot0",
							"outputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								},
								{
									"internalType": "uint16",
									"name": "observationIndex",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinality",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol",
									"type": "uint8"
								},
								{
									"internalType": "bool",
									"name": "unlocked",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								}
							],
							"name": "snapshotCumulativesInside",
							"outputs": [
								{
									"internalType": "int56",
									"name": "tickCumulativeInside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityInsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsInside",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "zeroForOne",
									"type": "bool"
								},
								{
									"internalType": "int256",
									"name": "amountSpecified",
									"type": "int256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "swap",
							"outputs": [
								{
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int16",
									"name": "wordPosition",
									"type": "int16"
								}
							],
							"name": "tickBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "ticks",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidityGross",
									"type": "uint128"
								},
								{
									"internalType": "int128",
									"name": "liquidityNet",
									"type": "int128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside0X128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside1X128",
									"type": "uint256"
								},
								{
									"internalType": "int56",
									"name": "tickCumulativeOutside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityOutsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsOutside",
									"type": "uint32"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "The pool interface is broken up into many smaller pieces",
						"kind": "dev",
						"methods": {
							"burn(int24,int24,uint128)": {
								"details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
								"params": {
									"amount": "How much liquidity to burn",
									"tickLower": "The lower tick of the position for which to burn liquidity",
									"tickUpper": "The upper tick of the position for which to burn liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 sent to the recipient",
									"amount1": "The amount of token1 sent to the recipient"
								}
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
								"params": {
									"amount0Requested": "How much token0 should be withdrawn from the fees owed",
									"amount1Requested": "How much token1 should be withdrawn from the fees owed",
									"recipient": "The address which should receive the fees collected",
									"tickLower": "The lower tick of the position for which to collect fees",
									"tickUpper": "The upper tick of the position for which to collect fees"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"collectProtocol(address,uint128,uint128)": {
								"params": {
									"amount0Requested": "The maximum amount of token0 to send, can be 0 to collect fees in only token1",
									"amount1Requested": "The maximum amount of token1 to send, can be 0 to collect fees in only token0",
									"recipient": "The address to which collected protocol fees should be sent"
								},
								"returns": {
									"amount0": "The protocol fee collected in token0",
									"amount1": "The protocol fee collected in token1"
								}
							},
							"factory()": {
								"returns": {
									"_0": "The contract address"
								}
							},
							"fee()": {
								"returns": {
									"_0": "The fee"
								}
							},
							"feeGrowthGlobal0X128()": {
								"details": "This value can overflow the uint256"
							},
							"feeGrowthGlobal1X128()": {
								"details": "This value can overflow the uint256"
							},
							"flash(address,uint256,uint256,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback",
								"params": {
									"amount0": "The amount of token0 to send",
									"amount1": "The amount of token1 to send",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address which will receive the token0 and token1 amounts"
								}
							},
							"increaseObservationCardinalityNext(uint16)": {
								"details": "This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.",
								"params": {
									"observationCardinalityNext": "The desired minimum number of observations for the pool to store"
								}
							},
							"initialize(uint160)": {
								"details": "Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value",
								"params": {
									"sqrtPriceX96": "the initial sqrt price of the pool as a Q64.96"
								}
							},
							"liquidity()": {
								"details": "This value has no relationship to the total liquidity across all ticks"
							},
							"maxLiquidityPerTick()": {
								"details": "This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool",
								"returns": {
									"_0": "The max amount of liquidity per tick"
								}
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.",
								"params": {
									"amount": "The amount of liquidity to mint",
									"data": "Any data that should be passed through to the callback",
									"recipient": "The address for which the liquidity will be created",
									"tickLower": "The lower tick of the position in which to add liquidity",
									"tickUpper": "The upper tick of the position in which to add liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback",
									"amount1": "The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
								}
							},
							"observations(uint256)": {
								"details": "You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.",
								"params": {
									"index": "The element of the observations array to fetch"
								},
								"returns": {
									"blockTimestamp": "The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"
								}
							},
							"observe(uint32[])": {
								"details": "To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.",
								"params": {
									"secondsAgos": "From how long ago each cumulative tick and liquidity value should be returned"
								},
								"returns": {
									"secondsPerLiquidityCumulativeX128s": "Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp",
									"tickCumulatives": "Cumulative tick values as of each `secondsAgos` from the current block timestamp"
								}
							},
							"positions(bytes32)": {
								"params": {
									"key": "The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"
								},
								"returns": {
									"_liquidity": "The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
								}
							},
							"protocolFees()": {
								"details": "Protocol fees will never exceed uint128 max in either token"
							},
							"setFeeProtocol(uint8,uint8)": {
								"params": {
									"feeProtocol0": "new protocol fee for token0 of the pool",
									"feeProtocol1": "new protocol fee for token1 of the pool"
								}
							},
							"slot0()": {
								"returns": {
									"sqrtPriceX96": "The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy"
								}
							},
							"snapshotCumulativesInside(int24,int24)": {
								"details": "Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.",
								"params": {
									"tickLower": "The lower tick of the range",
									"tickUpper": "The upper tick of the range"
								},
								"returns": {
									"secondsInside": "The snapshot of seconds per liquidity for the range",
									"secondsPerLiquidityInsideX128": "The snapshot of seconds per liquidity for the range",
									"tickCumulativeInside": "The snapshot of the tick accumulator for the range"
								}
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback",
								"params": {
									"amountSpecified": "The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address to receive the output of the swap",
									"sqrtPriceLimitX96": "The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap",
									"zeroForOne": "The direction of the swap, true for token0 to token1, false for token1 to token0"
								},
								"returns": {
									"amount0": "The delta of the balance of token0 of the pool, exact when negative, minimum when positive",
									"amount1": "The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
								}
							},
							"tickSpacing()": {
								"details": "Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.",
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"ticks(int24)": {
								"params": {
									"tick": "The tick to look up"
								},
								"returns": {
									"liquidityGross": "the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."
								}
							},
							"token0()": {
								"returns": {
									"_0": "The token contract address"
								}
							},
							"token1()": {
								"returns": {
									"_0": "The token contract address"
								}
							}
						},
						"title": "The interface for a Uniswap V3 Pool",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"burn(int24,int24,uint128)": "a34123a7",
							"collect(address,int24,int24,uint128,uint128)": "4f1eb3d8",
							"collectProtocol(address,uint128,uint128)": "85b66729",
							"factory()": "c45a0155",
							"fee()": "ddca3f43",
							"feeGrowthGlobal0X128()": "f3058399",
							"feeGrowthGlobal1X128()": "46141319",
							"flash(address,uint256,uint256,bytes)": "490e6cbc",
							"increaseObservationCardinalityNext(uint16)": "32148f67",
							"initialize(uint160)": "f637731d",
							"liquidity()": "1a686502",
							"maxLiquidityPerTick()": "70cf754a",
							"mint(address,int24,int24,uint128,bytes)": "3c8a7d8d",
							"observations(uint256)": "252c09d7",
							"observe(uint32[])": "883bdbfd",
							"positions(bytes32)": "514ea4bf",
							"protocolFees()": "1ad8b03b",
							"setFeeProtocol(uint8,uint8)": "8206a4d1",
							"slot0()": "3850c7bd",
							"snapshotCumulativesInside(int24,int24)": "a38807f2",
							"swap(address,bool,int256,uint160,bytes)": "128acb08",
							"tickBitmap(int16)": "5339c296",
							"tickSpacing()": "d0c93a7c",
							"ticks(int24)": "f30dba93",
							"token0()": "0dfe1681",
							"token1()": "d21220a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collectProtocol\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeProtocol0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol1\",\"type\":\"uint8\"}],\"name\":\"setFeeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The pool interface is broken up into many smaller pieces\",\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"collectProtocol(address,uint128,uint128)\":{\"params\":{\"amount0Requested\":\"The maximum amount of token0 to send, can be 0 to collect fees in only token1\",\"amount1Requested\":\"The maximum amount of token1 to send, can be 0 to collect fees in only token0\",\"recipient\":\"The address to which collected protocol fees should be sent\"},\"returns\":{\"amount0\":\"The protocol fee collected in token0\",\"amount1\":\"The protocol fee collected in token1\"}},\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(uint160)\":{\"details\":\"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\",\"params\":{\"sqrtPriceX96\":\"the initial sqrt price of the pool as a Q64.96\"}},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticks\"},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"protocolFees()\":{\"details\":\"Protocol fees will never exceed uint128 max in either token\"},\"setFeeProtocol(uint8,uint8)\":{\"params\":{\"feeProtocol0\":\"new protocol fee for token0 of the pool\",\"feeProtocol1\":\"new protocol fee for token1 of the pool\"}},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"The interface for a Uniswap V3 Pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectProtocol(address,address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the factory owner\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"collectProtocol(address,uint128,uint128)\":{\"notice\":\"Collect the protocol fee accrued to the pool\"},\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(uint160)\":{\"notice\":\"Sets the initial price for the pool\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"protocolFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the protocol\"},\"setFeeProtocol(uint8,uint8)\":{\"notice\":\"Set the denominator of the protocol's % share of the fees\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"notice\":\"A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol \":\"IUniswapV3Pool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol \":{\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1c42b9e6f5902ac38dd43e25750939baa7e0c1425dc75afd717c4412731065d5\",\"dweb:/ipfs/QmWaoacnzsucTvBME2o7YgZBZMhaHv7fkj83htHMVWJKWh\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when a position's liquidity is removed"
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"notice": "Emitted when fees are collected by the owner of a position"
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"notice": "Emitted when the collected protocol fees are withdrawn by the factory owner"
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"notice": "Emitted by the pool for any flashes of token0/token1"
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"notice": "Emitted by the pool for increases to the number of observations that can be stored"
							},
							"Initialize(uint160,int24)": {
								"notice": "Emitted exactly once by a pool when #initialize is first called on the pool"
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is minted for a given position"
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"notice": "Emitted when the protocol fee is changed by the pool"
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"notice": "Emitted by the pool for any swaps between token0 and token1"
							}
						},
						"kind": "user",
						"methods": {
							"burn(int24,int24,uint128)": {
								"notice": "Burn liquidity from the sender and account tokens owed for the liquidity to the position"
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"notice": "Collects tokens owed to a position"
							},
							"collectProtocol(address,uint128,uint128)": {
								"notice": "Collect the protocol fee accrued to the pool"
							},
							"factory()": {
								"notice": "The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface"
							},
							"fee()": {
								"notice": "The pool's fee in hundredths of a bip, i.e. 1e-6"
							},
							"feeGrowthGlobal0X128()": {
								"notice": "The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"
							},
							"feeGrowthGlobal1X128()": {
								"notice": "The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"
							},
							"flash(address,uint256,uint256,bytes)": {
								"notice": "Receive token0 and/or token1 and pay it back, plus a fee, in the callback"
							},
							"increaseObservationCardinalityNext(uint16)": {
								"notice": "Increase the maximum number of price and liquidity observations that this pool will store"
							},
							"initialize(uint160)": {
								"notice": "Sets the initial price for the pool"
							},
							"liquidity()": {
								"notice": "The currently in range liquidity available to the pool"
							},
							"maxLiquidityPerTick()": {
								"notice": "The maximum amount of position liquidity that can use any tick in the range"
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"notice": "Adds liquidity for the given recipient/tickLower/tickUpper position"
							},
							"observations(uint256)": {
								"notice": "Returns data about a specific observation index"
							},
							"observe(uint32[])": {
								"notice": "Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"
							},
							"positions(bytes32)": {
								"notice": "Returns the information about a position by the position's key"
							},
							"protocolFees()": {
								"notice": "The amounts of token0 and token1 that are owed to the protocol"
							},
							"setFeeProtocol(uint8,uint8)": {
								"notice": "Set the denominator of the protocol's % share of the fees"
							},
							"slot0()": {
								"notice": "The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."
							},
							"snapshotCumulativesInside(int24,int24)": {
								"notice": "Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"notice": "Swap token0 for token1, or token1 for token0"
							},
							"tickBitmap(int16)": {
								"notice": "Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
							},
							"tickSpacing()": {
								"notice": "The pool tick spacing"
							},
							"ticks(int24)": {
								"notice": "Look up information about a specific tick in the pool"
							},
							"token0()": {
								"notice": "The first of the two tokens of the pool, sorted by address"
							},
							"token1()": {
								"notice": "The second of the two tokens of the pool, sorted by address"
							}
						},
						"notice": "A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification",
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
				"IUniswapV3PoolActions": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "flash",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								}
							],
							"name": "increaseObservationCardinalityNext",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "zeroForOne",
									"type": "bool"
								},
								{
									"internalType": "int256",
									"name": "amountSpecified",
									"type": "int256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "swap",
							"outputs": [
								{
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"burn(int24,int24,uint128)": {
								"details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
								"params": {
									"amount": "How much liquidity to burn",
									"tickLower": "The lower tick of the position for which to burn liquidity",
									"tickUpper": "The upper tick of the position for which to burn liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 sent to the recipient",
									"amount1": "The amount of token1 sent to the recipient"
								}
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
								"params": {
									"amount0Requested": "How much token0 should be withdrawn from the fees owed",
									"amount1Requested": "How much token1 should be withdrawn from the fees owed",
									"recipient": "The address which should receive the fees collected",
									"tickLower": "The lower tick of the position for which to collect fees",
									"tickUpper": "The upper tick of the position for which to collect fees"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"flash(address,uint256,uint256,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback",
								"params": {
									"amount0": "The amount of token0 to send",
									"amount1": "The amount of token1 to send",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address which will receive the token0 and token1 amounts"
								}
							},
							"increaseObservationCardinalityNext(uint16)": {
								"details": "This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.",
								"params": {
									"observationCardinalityNext": "The desired minimum number of observations for the pool to store"
								}
							},
							"initialize(uint160)": {
								"details": "Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value",
								"params": {
									"sqrtPriceX96": "the initial sqrt price of the pool as a Q64.96"
								}
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.",
								"params": {
									"amount": "The amount of liquidity to mint",
									"data": "Any data that should be passed through to the callback",
									"recipient": "The address for which the liquidity will be created",
									"tickLower": "The lower tick of the position in which to add liquidity",
									"tickUpper": "The upper tick of the position in which to add liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback",
									"amount1": "The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
								}
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback",
								"params": {
									"amountSpecified": "The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address to receive the output of the swap",
									"sqrtPriceLimitX96": "The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap",
									"zeroForOne": "The direction of the swap, true for token0 to token1, false for token1 to token0"
								},
								"returns": {
									"amount0": "The delta of the balance of token0 of the pool, exact when negative, minimum when positive",
									"amount1": "The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
								}
							}
						},
						"title": "Permissionless pool actions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"burn(int24,int24,uint128)": "a34123a7",
							"collect(address,int24,int24,uint128,uint128)": "4f1eb3d8",
							"flash(address,uint256,uint256,bytes)": "490e6cbc",
							"increaseObservationCardinalityNext(uint16)": "32148f67",
							"initialize(uint160)": "f637731d",
							"mint(address,int24,int24,uint128,bytes)": "3c8a7d8d",
							"swap(address,bool,int256,uint160,bytes)": "128acb08"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(uint160)\":{\"details\":\"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\",\"params\":{\"sqrtPriceX96\":\"the initial sqrt price of the pool as a Q64.96\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}}},\"title\":\"Permissionless pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(uint160)\":{\"notice\":\"Sets the initial price for the pool\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"}},\"notice\":\"Contains pool methods that can be called by anyone\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":\"IUniswapV3PoolActions\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"burn(int24,int24,uint128)": {
								"notice": "Burn liquidity from the sender and account tokens owed for the liquidity to the position"
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"notice": "Collects tokens owed to a position"
							},
							"flash(address,uint256,uint256,bytes)": {
								"notice": "Receive token0 and/or token1 and pay it back, plus a fee, in the callback"
							},
							"increaseObservationCardinalityNext(uint16)": {
								"notice": "Increase the maximum number of price and liquidity observations that this pool will store"
							},
							"initialize(uint160)": {
								"notice": "Sets the initial price for the pool"
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"notice": "Adds liquidity for the given recipient/tickLower/tickUpper position"
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"notice": "Swap token0 for token1, or token1 for token0"
							}
						},
						"notice": "Contains pool methods that can be called by anyone",
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
				"IUniswapV3PoolDerivedState": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint32[]",
									"name": "secondsAgos",
									"type": "uint32[]"
								}
							],
							"name": "observe",
							"outputs": [
								{
									"internalType": "int56[]",
									"name": "tickCumulatives",
									"type": "int56[]"
								},
								{
									"internalType": "uint160[]",
									"name": "secondsPerLiquidityCumulativeX128s",
									"type": "uint160[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								}
							],
							"name": "snapshotCumulativesInside",
							"outputs": [
								{
									"internalType": "int56",
									"name": "tickCumulativeInside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityInsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsInside",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"observe(uint32[])": {
								"details": "To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.",
								"params": {
									"secondsAgos": "From how long ago each cumulative tick and liquidity value should be returned"
								},
								"returns": {
									"secondsPerLiquidityCumulativeX128s": "Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp",
									"tickCumulatives": "Cumulative tick values as of each `secondsAgos` from the current block timestamp"
								}
							},
							"snapshotCumulativesInside(int24,int24)": {
								"details": "Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.",
								"params": {
									"tickLower": "The lower tick of the range",
									"tickUpper": "The upper tick of the range"
								},
								"returns": {
									"secondsInside": "The snapshot of seconds per liquidity for the range",
									"secondsPerLiquidityInsideX128": "The snapshot of seconds per liquidity for the range",
									"tickCumulativeInside": "The snapshot of the tick accumulator for the range"
								}
							}
						},
						"title": "Pool state that is not stored",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"observe(uint32[])": "883bdbfd",
							"snapshotCumulativesInside(int24,int24)": "a38807f2"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}}},\"title\":\"Pool state that is not stored\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"}},\"notice\":\"Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":\"IUniswapV3PoolDerivedState\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"observe(uint32[])": {
								"notice": "Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"
							},
							"snapshotCumulativesInside(int24,int24)": {
								"notice": "Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"
							}
						},
						"notice": "Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.",
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
				"IUniswapV3PoolEvents": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Burn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "CollectProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid1",
									"type": "uint256"
								}
							],
							"name": "Flash",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextOld",
									"type": "uint16"
								},
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextNew",
									"type": "uint16"
								}
							],
							"name": "IncreaseObservationCardinalityNext",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Initialize",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Mint",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0New",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1New",
									"type": "uint8"
								}
							],
							"name": "SetFeeProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Swap",
							"type": "event"
						}
					],
					"devdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"details": "Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect",
								"params": {
									"amount": "The amount of liquidity to remove",
									"amount0": "The amount of token0 withdrawn",
									"amount1": "The amount of token1 withdrawn",
									"owner": "The owner of the position for which liquidity is removed",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"details": "Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees",
								"params": {
									"amount0": "The amount of token0 fees collected",
									"amount1": "The amount of token1 fees collected",
									"owner": "The owner of the position for which fees are collected",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"params": {
									"amount0": "The amount of token1 protocol fees that is withdrawn",
									"recipient": "The address that receives the collected protocol fees",
									"sender": "The address that collects the protocol fees"
								}
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"params": {
									"amount0": "The amount of token0 that was flashed",
									"amount1": "The amount of token1 that was flashed",
									"paid0": "The amount of token0 paid for the flash, which can exceed the amount0 plus the fee",
									"paid1": "The amount of token1 paid for the flash, which can exceed the amount1 plus the fee",
									"recipient": "The address that received the tokens from flash",
									"sender": "The address that initiated the swap call, and that received the callback"
								}
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"details": "observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.",
								"params": {
									"observationCardinalityNextNew": "The updated value of the next observation cardinality",
									"observationCardinalityNextOld": "The previous value of the next observation cardinality"
								}
							},
							"Initialize(uint160,int24)": {
								"details": "Mint/Burn/Swap cannot be emitted by the pool before Initialize",
								"params": {
									"sqrtPriceX96": "The initial sqrt price of the pool, as a Q64.96",
									"tick": "The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"
								}
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"params": {
									"amount": "The amount of liquidity minted to the position range",
									"amount0": "How much token0 was required for the minted liquidity",
									"amount1": "How much token1 was required for the minted liquidity",
									"owner": "The owner of the position and recipient of any minted liquidity",
									"sender": "The address that minted the liquidity",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"params": {
									"feeProtocol0New": "The updated value of the token0 protocol fee",
									"feeProtocol0Old": "The previous value of the token0 protocol fee",
									"feeProtocol1New": "The updated value of the token1 protocol fee",
									"feeProtocol1Old": "The previous value of the token1 protocol fee"
								}
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"params": {
									"amount0": "The delta of the token0 balance of the pool",
									"amount1": "The delta of the token1 balance of the pool",
									"liquidity": "The liquidity of the pool after the swap",
									"recipient": "The address that received the output of the swap",
									"sender": "The address that initiated the swap call, and that received the callback",
									"sqrtPriceX96": "The sqrt(price) of the pool after the swap, as a Q64.96",
									"tick": "The log base 1.0001 of price of the pool after the swap"
								}
							}
						},
						"kind": "dev",
						"methods": {},
						"title": "Events emitted by a pool",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"details\":\"Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\",\"params\":{\"amount\":\"The amount of liquidity to remove\",\"amount0\":\"The amount of token0 withdrawn\",\"amount1\":\"The amount of token1 withdrawn\",\"owner\":\"The owner of the position for which liquidity is removed\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"details\":\"Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\",\"params\":{\"amount0\":\"The amount of token0 fees collected\",\"amount1\":\"The amount of token1 fees collected\",\"owner\":\"The owner of the position for which fees are collected\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"CollectProtocol(address,address,uint128,uint128)\":{\"params\":{\"amount0\":\"The amount of token1 protocol fees that is withdrawn\",\"recipient\":\"The address that receives the collected protocol fees\",\"sender\":\"The address that collects the protocol fees\"}},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"amount0\":\"The amount of token0 that was flashed\",\"amount1\":\"The amount of token1 that was flashed\",\"paid0\":\"The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\",\"paid1\":\"The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\",\"recipient\":\"The address that received the tokens from flash\",\"sender\":\"The address that initiated the swap call, and that received the callback\"}},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"details\":\"observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.\",\"params\":{\"observationCardinalityNextNew\":\"The updated value of the next observation cardinality\",\"observationCardinalityNextOld\":\"The previous value of the next observation cardinality\"}},\"Initialize(uint160,int24)\":{\"details\":\"Mint/Burn/Swap cannot be emitted by the pool before Initialize\",\"params\":{\"sqrtPriceX96\":\"The initial sqrt price of the pool, as a Q64.96\",\"tick\":\"The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\"}},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of liquidity minted to the position range\",\"amount0\":\"How much token0 was required for the minted liquidity\",\"amount1\":\"How much token1 was required for the minted liquidity\",\"owner\":\"The owner of the position and recipient of any minted liquidity\",\"sender\":\"The address that minted the liquidity\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"params\":{\"feeProtocol0New\":\"The updated value of the token0 protocol fee\",\"feeProtocol0Old\":\"The previous value of the token0 protocol fee\",\"feeProtocol1New\":\"The updated value of the token1 protocol fee\",\"feeProtocol1Old\":\"The previous value of the token1 protocol fee\"}},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"params\":{\"amount0\":\"The delta of the token0 balance of the pool\",\"amount1\":\"The delta of the token1 balance of the pool\",\"liquidity\":\"The liquidity of the pool after the swap\",\"recipient\":\"The address that received the output of the swap\",\"sender\":\"The address that initiated the swap call, and that received the callback\",\"sqrtPriceX96\":\"The sqrt(price) of the pool after the swap, as a Q64.96\",\"tick\":\"The log base 1.0001 of price of the pool after the swap\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"Events emitted by a pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectProtocol(address,address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the factory owner\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains all events emitted by the pool\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":\"IUniswapV3PoolEvents\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when a position's liquidity is removed"
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"notice": "Emitted when fees are collected by the owner of a position"
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"notice": "Emitted when the collected protocol fees are withdrawn by the factory owner"
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"notice": "Emitted by the pool for any flashes of token0/token1"
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"notice": "Emitted by the pool for increases to the number of observations that can be stored"
							},
							"Initialize(uint160,int24)": {
								"notice": "Emitted exactly once by a pool when #initialize is first called on the pool"
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is minted for a given position"
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"notice": "Emitted when the protocol fee is changed by the pool"
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"notice": "Emitted by the pool for any swaps between token0 and token1"
							}
						},
						"kind": "user",
						"methods": {},
						"notice": "Contains all events emitted by the pool",
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
				"IUniswapV3PoolImmutables": {
					"abi": [
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "fee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxLiquidityPerTick",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"factory()": {
								"returns": {
									"_0": "The contract address"
								}
							},
							"fee()": {
								"returns": {
									"_0": "The fee"
								}
							},
							"maxLiquidityPerTick()": {
								"details": "This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool",
								"returns": {
									"_0": "The max amount of liquidity per tick"
								}
							},
							"tickSpacing()": {
								"details": "Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.",
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"token0()": {
								"returns": {
									"_0": "The token contract address"
								}
							},
							"token1()": {
								"returns": {
									"_0": "The token contract address"
								}
							}
						},
						"title": "Pool state that never changes",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"factory()": "c45a0155",
							"fee()": "ddca3f43",
							"maxLiquidityPerTick()": "70cf754a",
							"tickSpacing()": "d0c93a7c",
							"token0()": "0dfe1681",
							"token1()": "d21220a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"Pool state that never changes\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"notice\":\"These parameters are fixed for a pool forever, i.e., the methods will always return the same values\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":\"IUniswapV3PoolImmutables\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"factory()": {
								"notice": "The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface"
							},
							"fee()": {
								"notice": "The pool's fee in hundredths of a bip, i.e. 1e-6"
							},
							"maxLiquidityPerTick()": {
								"notice": "The maximum amount of position liquidity that can use any tick in the range"
							},
							"tickSpacing()": {
								"notice": "The pool tick spacing"
							},
							"token0()": {
								"notice": "The first of the two tokens of the pool, sorted by address"
							},
							"token1()": {
								"notice": "The second of the two tokens of the pool, sorted by address"
							}
						},
						"notice": "These parameters are fixed for a pool forever, i.e., the methods will always return the same values",
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
				"IUniswapV3PoolOwnerActions": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collectProtocol",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint8",
									"name": "feeProtocol0",
									"type": "uint8"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol1",
									"type": "uint8"
								}
							],
							"name": "setFeeProtocol",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"collectProtocol(address,uint128,uint128)": {
								"params": {
									"amount0Requested": "The maximum amount of token0 to send, can be 0 to collect fees in only token1",
									"amount1Requested": "The maximum amount of token1 to send, can be 0 to collect fees in only token0",
									"recipient": "The address to which collected protocol fees should be sent"
								},
								"returns": {
									"amount0": "The protocol fee collected in token0",
									"amount1": "The protocol fee collected in token1"
								}
							},
							"setFeeProtocol(uint8,uint8)": {
								"params": {
									"feeProtocol0": "new protocol fee for token0 of the pool",
									"feeProtocol1": "new protocol fee for token1 of the pool"
								}
							}
						},
						"title": "Permissioned pool actions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"collectProtocol(address,uint128,uint128)": "85b66729",
							"setFeeProtocol(uint8,uint8)": "8206a4d1"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collectProtocol\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeProtocol0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol1\",\"type\":\"uint8\"}],\"name\":\"setFeeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"collectProtocol(address,uint128,uint128)\":{\"params\":{\"amount0Requested\":\"The maximum amount of token0 to send, can be 0 to collect fees in only token1\",\"amount1Requested\":\"The maximum amount of token1 to send, can be 0 to collect fees in only token0\",\"recipient\":\"The address to which collected protocol fees should be sent\"},\"returns\":{\"amount0\":\"The protocol fee collected in token0\",\"amount1\":\"The protocol fee collected in token1\"}},\"setFeeProtocol(uint8,uint8)\":{\"params\":{\"feeProtocol0\":\"new protocol fee for token0 of the pool\",\"feeProtocol1\":\"new protocol fee for token1 of the pool\"}}},\"title\":\"Permissioned pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collectProtocol(address,uint128,uint128)\":{\"notice\":\"Collect the protocol fee accrued to the pool\"},\"setFeeProtocol(uint8,uint8)\":{\"notice\":\"Set the denominator of the protocol's % share of the fees\"}},\"notice\":\"Contains pool methods that may only be called by the factory owner\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":\"IUniswapV3PoolOwnerActions\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"collectProtocol(address,uint128,uint128)": {
								"notice": "Collect the protocol fee accrued to the pool"
							},
							"setFeeProtocol(uint8,uint8)": {
								"notice": "Set the denominator of the protocol's % share of the fees"
							}
						},
						"notice": "Contains pool methods that may only be called by the factory owner",
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
				"IUniswapV3PoolState": {
					"abi": [
						{
							"inputs": [],
							"name": "feeGrowthGlobal0X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal1X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "liquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "observations",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "blockTimestamp",
									"type": "uint32"
								},
								{
									"internalType": "int56",
									"name": "tickCumulative",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityCumulativeX128",
									"type": "uint160"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "_liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "protocolFees",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "token0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "token1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "slot0",
							"outputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								},
								{
									"internalType": "uint16",
									"name": "observationIndex",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinality",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol",
									"type": "uint8"
								},
								{
									"internalType": "bool",
									"name": "unlocked",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int16",
									"name": "wordPosition",
									"type": "int16"
								}
							],
							"name": "tickBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "ticks",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidityGross",
									"type": "uint128"
								},
								{
									"internalType": "int128",
									"name": "liquidityNet",
									"type": "int128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside0X128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside1X128",
									"type": "uint256"
								},
								{
									"internalType": "int56",
									"name": "tickCumulativeOutside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityOutsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsOutside",
									"type": "uint32"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"feeGrowthGlobal0X128()": {
								"details": "This value can overflow the uint256"
							},
							"feeGrowthGlobal1X128()": {
								"details": "This value can overflow the uint256"
							},
							"liquidity()": {
								"details": "This value has no relationship to the total liquidity across all ticks"
							},
							"observations(uint256)": {
								"details": "You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.",
								"params": {
									"index": "The element of the observations array to fetch"
								},
								"returns": {
									"blockTimestamp": "The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"
								}
							},
							"positions(bytes32)": {
								"params": {
									"key": "The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"
								},
								"returns": {
									"_liquidity": "The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
								}
							},
							"protocolFees()": {
								"details": "Protocol fees will never exceed uint128 max in either token"
							},
							"slot0()": {
								"returns": {
									"sqrtPriceX96": "The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy"
								}
							},
							"ticks(int24)": {
								"params": {
									"tick": "The tick to look up"
								},
								"returns": {
									"liquidityGross": "the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."
								}
							}
						},
						"title": "Pool state that can change",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"feeGrowthGlobal0X128()": "f3058399",
							"feeGrowthGlobal1X128()": "46141319",
							"liquidity()": "1a686502",
							"observations(uint256)": "252c09d7",
							"positions(bytes32)": "514ea4bf",
							"protocolFees()": "1ad8b03b",
							"slot0()": "3850c7bd",
							"tickBitmap(int16)": "5339c296",
							"ticks(int24)": "f30dba93"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticks\"},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"protocolFees()\":{\"details\":\"Protocol fees will never exceed uint128 max in either token\"},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}}},\"title\":\"Pool state that can change\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"protocolFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the protocol\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"}},\"notice\":\"These methods compose the pool's state, and can change with any frequency including multiple times per transaction\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":\"IUniswapV3PoolState\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"feeGrowthGlobal0X128()": {
								"notice": "The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"
							},
							"feeGrowthGlobal1X128()": {
								"notice": "The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"
							},
							"liquidity()": {
								"notice": "The currently in range liquidity available to the pool"
							},
							"observations(uint256)": {
								"notice": "Returns data about a specific observation index"
							},
							"positions(bytes32)": {
								"notice": "Returns the information about a position by the position's key"
							},
							"protocolFees()": {
								"notice": "The amounts of token0 and token1 that are owed to the protocol"
							},
							"slot0()": {
								"notice": "The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."
							},
							"tickBitmap(int16)": {
								"notice": "Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
							},
							"ticks(int24)": {
								"notice": "Look up information about a specific tick in the pool"
							}
						},
						"notice": "These methods compose the pool's state, and can change with any frequency including multiple times per transaction",
						"version": 1
					}
				}
			},
			"contracts/interfaces/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "deposit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"deposit()": "d0e30db0",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"withdraw(uint256)": "2e1a7d4d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0x8805dd7cbba47cb08fa4390d4e0a1441092c37bc784257b90e511f8db9b5421b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://95e9705057fac0a3e4c8020b9e47ea35bd554a4339256f1b19c4e8f40c8a8f07\",\"dweb:/ipfs/QmZD49CBxmpbPHgEGQP94gQZQEY7dvUMGcF3kVDpxa7Lvc\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/libraries/UniswapV3.sol": {
				"UniswapV3": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint24[]",
									"name": "fee",
									"type": "uint24[]"
								},
								{
									"internalType": "address",
									"name": "provider",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "t1",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "t2",
									"type": "address"
								}
							],
							"name": "price",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/libraries/UniswapV3.sol\":232:1030  library UniswapV3 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/libraries/UniswapV3.sol\":232:1030  library UniswapV3 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x97d784b1\n      eq\n      tag_2\n      jumpi\n    tag_1:\n      0x00\n      dup1\n      revert\n        /* \"contracts/libraries/UniswapV3.sol\":261:1028  function price(uint24[] calldata fee,address provider,address t1,address t2) external view returns (uint256){... */\n    tag_2:\n      tag_3\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_4\n      swap2\n      swap1\n      tag_5\n      jump\t// in\n    tag_4:\n      tag_6\n      jump\t// in\n    tag_3:\n      mload(0x40)\n      tag_7\n      swap2\n      swap1\n      tag_8\n      jump\t// in\n    tag_7:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n    tag_6:\n        /* \"contracts/libraries/UniswapV3.sol\":361:368  uint256 */\n      0x00\n        /* \"contracts/libraries/UniswapV3.sol\":383:389  uint i */\n      dup1\n        /* \"contracts/libraries/UniswapV3.sol\":390:391  0 */\n      0x00\n        /* \"contracts/libraries/UniswapV3.sol\":383:391  uint i=0 */\n      swap1\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":379:1022  for(uint i=0;i<fee.length;i++){... */\n    tag_10:\n        /* \"contracts/libraries/UniswapV3.sol\":394:397  fee */\n      dup7\n      dup7\n        /* \"contracts/libraries/UniswapV3.sol\":394:404  fee.length */\n      swap1\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":392:393  i */\n      dup2\n        /* \"contracts/libraries/UniswapV3.sol\":392:404  i<fee.length */\n      lt\n        /* \"contracts/libraries/UniswapV3.sol\":379:1022  for(uint i=0;i<fee.length;i++){... */\n      iszero\n      tag_11\n      jumpi\n        /* \"contracts/libraries/UniswapV3.sol\":423:435  address pool */\n      0x00\n        /* \"contracts/libraries/UniswapV3.sol\":456:464  provider */\n      dup6\n        /* \"contracts/libraries/UniswapV3.sol\":438:473  IUniswapV3Factory(provider).getPool */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x1698ee82\n        /* \"contracts/libraries/UniswapV3.sol\":474:476  t1 */\n      dup7\n        /* \"contracts/libraries/UniswapV3.sol\":477:479  t2 */\n      dup7\n        /* \"contracts/libraries/UniswapV3.sol\":480:483  fee */\n      dup12\n      dup12\n        /* \"contracts/libraries/UniswapV3.sol\":484:485  i */\n      dup8\n        /* \"contracts/libraries/UniswapV3.sol\":480:486  fee[i] */\n      dup2\n      dup2\n      lt\n      tag_13\n      jumpi\n      tag_14\n      tag_15\n      jump\t// in\n    tag_14:\n    tag_13:\n      swap1\n      pop\n      0x20\n      mul\n      add\n      0x20\n      dup2\n      add\n      swap1\n      tag_16\n      swap2\n      swap1\n      tag_17\n      jump\t// in\n    tag_16:\n        /* \"contracts/libraries/UniswapV3.sol\":438:487  IUniswapV3Factory(provider).getPool(t1,t2,fee[i]) */\n      mload(0x40)\n      dup5\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_18\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_19\n      jump\t// in\n    tag_18:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_21\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_21:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_22\n      swap2\n      swap1\n      tag_23\n      jump\t// in\n    tag_22:\n        /* \"contracts/libraries/UniswapV3.sol\":423:487  address pool = IUniswapV3Factory(provider).getPool(t1,t2,fee[i]) */\n      swap1\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":521:522  0 */\n      0x00\n        /* \"contracts/libraries/UniswapV3.sol\":505:523  pool == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/libraries/UniswapV3.sol\":505:509  pool */\n      dup2\n        /* \"contracts/libraries/UniswapV3.sol\":505:523  pool == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"contracts/libraries/UniswapV3.sol\":501:567  if (pool == address(0)) {... */\n      tag_24\n      jumpi\n        /* \"contracts/libraries/UniswapV3.sol\":543:551  continue */\n      pop\n      jump(tag_12)\n        /* \"contracts/libraries/UniswapV3.sol\":501:567  if (pool == address(0)) {... */\n    tag_24:\n        /* \"contracts/libraries/UniswapV3.sol\":580:589  uint128 l */\n      0x00\n        /* \"contracts/libraries/UniswapV3.sol\":607:611  pool */\n      dup2\n        /* \"contracts/libraries/UniswapV3.sol\":592:622  IUniswapV3Pool(pool).liquidity */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x1a686502\n        /* \"contracts/libraries/UniswapV3.sol\":592:624  IUniswapV3Pool(pool).liquidity() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_26\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_26:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_27\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_27:\n        /* \"contracts/libraries/UniswapV3.sol\":580:624  uint128 l = IUniswapV3Pool(pool).liquidity() */\n      swap1\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":647:648  0 */\n      0x00\n        /* \"contracts/libraries/UniswapV3.sol\":642:643  l */\n      dup2\n        /* \"contracts/libraries/UniswapV3.sol\":642:648  l == 0 */\n      0xffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"contracts/libraries/UniswapV3.sol\":638:694  if (l == 0) {... */\n      tag_29\n      jumpi\n        /* \"contracts/libraries/UniswapV3.sol\":668:676  continue */\n      pop\n      pop\n      jump(tag_12)\n        /* \"contracts/libraries/UniswapV3.sol\":638:694  if (l == 0) {... */\n    tag_29:\n        /* \"contracts/libraries/UniswapV3.sol\":708:728  uint160 sqrtPriceX96 */\n      0x00\n        /* \"contracts/libraries/UniswapV3.sol\":753:757  pool */\n      dup3\n        /* \"contracts/libraries/UniswapV3.sol\":738:764  IUniswapV3Pool(pool).slot0 */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x3850c7bd\n        /* \"contracts/libraries/UniswapV3.sol\":738:766  IUniswapV3Pool(pool).slot0() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0xe0\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_31\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_31:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_32\n      swap2\n      swap1\n      tag_33\n      jump\t// in\n    tag_32:\n        /* \"contracts/libraries/UniswapV3.sol\":707:766  (uint160 sqrtPriceX96,,,,,,) = IUniswapV3Pool(pool).slot0() */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":799:800  0 */\n      0x00\n        /* \"contracts/libraries/UniswapV3.sol\":783:795  sqrtPriceX96 */\n      dup2\n        /* \"contracts/libraries/UniswapV3.sol\":783:800  sqrtPriceX96 == 0 */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"contracts/libraries/UniswapV3.sol\":780:844  if(sqrtPriceX96 == 0) {... */\n      tag_34\n      jumpi\n        /* \"contracts/libraries/UniswapV3.sol\":820:828  continue */\n      pop\n      pop\n      pop\n      jump(tag_12)\n        /* \"contracts/libraries/UniswapV3.sol\":780:844  if(sqrtPriceX96 == 0) {... */\n    tag_34:\n        /* \"contracts/libraries/UniswapV3.sol\":858:866  uint8 d1 */\n      0x00\n        /* \"contracts/libraries/UniswapV3.sol\":876:878  t1 */\n      dup8\n        /* \"contracts/libraries/UniswapV3.sol\":869:888  IERC20(t1).decimals */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x313ce567\n        /* \"contracts/libraries/UniswapV3.sol\":869:890  IERC20(t1).decimals() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_36\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_36:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_37\n      swap2\n      swap1\n      tag_38\n      jump\t// in\n    tag_37:\n        /* \"contracts/libraries/UniswapV3.sol\":858:890  uint8 d1 = IERC20(t1).decimals() */\n      swap1\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":904:912  uint8 d2 */\n      0x00\n        /* \"contracts/libraries/UniswapV3.sol\":922:924  t2 */\n      dup8\n        /* \"contracts/libraries/UniswapV3.sol\":915:934  IERC20(t2).decimals */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x313ce567\n        /* \"contracts/libraries/UniswapV3.sol\":915:936  IERC20(t2).decimals() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_40\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_40:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_41\n      swap2\n      swap1\n      tag_38\n      jump\t// in\n    tag_41:\n        /* \"contracts/libraries/UniswapV3.sol\":904:936  uint8 d2 = IERC20(t2).decimals() */\n      swap1\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":409:1022  {... */\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":379:1022  for(uint i=0;i<fee.length;i++){... */\n    tag_12:\n        /* \"contracts/libraries/UniswapV3.sol\":405:408  i++ */\n      dup1\n      dup1\n      tag_42\n      swap1\n      tag_43\n      jump\t// in\n    tag_42:\n      swap2\n      pop\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":379:1022  for(uint i=0;i<fee.length;i++){... */\n      jump(tag_10)\n    tag_11:\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":261:1028  function price(uint24[] calldata fee,address provider,address t1,address t2) external view returns (uint256){... */\n      swap6\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":88:205   */\n    tag_45:\n        /* \"#utility.yul\":197:198   */\n      0x00\n        /* \"#utility.yul\":194:195   */\n      dup1\n        /* \"#utility.yul\":187:199   */\n      revert\n        /* \"#utility.yul\":211:328   */\n    tag_46:\n        /* \"#utility.yul\":320:321   */\n      0x00\n        /* \"#utility.yul\":317:318   */\n      dup1\n        /* \"#utility.yul\":310:322   */\n      revert\n        /* \"#utility.yul\":334:451   */\n    tag_47:\n        /* \"#utility.yul\":443:444   */\n      0x00\n        /* \"#utility.yul\":440:441   */\n      dup1\n        /* \"#utility.yul\":433:445   */\n      revert\n        /* \"#utility.yul\":457:574   */\n    tag_48:\n        /* \"#utility.yul\":566:567   */\n      0x00\n        /* \"#utility.yul\":563:564   */\n      dup1\n        /* \"#utility.yul\":556:568   */\n      revert\n        /* \"#utility.yul\":580:697   */\n    tag_49:\n        /* \"#utility.yul\":689:690   */\n      0x00\n        /* \"#utility.yul\":686:687   */\n      dup1\n        /* \"#utility.yul\":679:691   */\n      revert\n        /* \"#utility.yul\":719:1286   */\n    tag_50:\n        /* \"#utility.yul\":791:799   */\n      0x00\n        /* \"#utility.yul\":801:807   */\n      dup1\n        /* \"#utility.yul\":851:854   */\n      dup4\n        /* \"#utility.yul\":844:848   */\n      0x1f\n        /* \"#utility.yul\":836:842   */\n      dup5\n        /* \"#utility.yul\":832:849   */\n      add\n        /* \"#utility.yul\":828:855   */\n      slt\n        /* \"#utility.yul\":818:940   */\n      tag_89\n      jumpi\n        /* \"#utility.yul\":859:938   */\n      tag_90\n      tag_47\n      jump\t// in\n    tag_90:\n        /* \"#utility.yul\":818:940   */\n    tag_89:\n        /* \"#utility.yul\":972:978   */\n      dup3\n        /* \"#utility.yul\":959:979   */\n      calldataload\n        /* \"#utility.yul\":949:979   */\n      swap1\n      pop\n        /* \"#utility.yul\":1002:1020   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":994:1000   */\n      dup2\n        /* \"#utility.yul\":991:1021   */\n      gt\n        /* \"#utility.yul\":988:1105   */\n      iszero\n      tag_91\n      jumpi\n        /* \"#utility.yul\":1024:1103   */\n      tag_92\n      tag_48\n      jump\t// in\n    tag_92:\n        /* \"#utility.yul\":988:1105   */\n    tag_91:\n        /* \"#utility.yul\":1138:1142   */\n      0x20\n        /* \"#utility.yul\":1130:1136   */\n      dup4\n        /* \"#utility.yul\":1126:1143   */\n      add\n        /* \"#utility.yul\":1114:1143   */\n      swap2\n      pop\n        /* \"#utility.yul\":1192:1195   */\n      dup4\n        /* \"#utility.yul\":1184:1188   */\n      0x20\n        /* \"#utility.yul\":1176:1182   */\n      dup3\n        /* \"#utility.yul\":1172:1189   */\n      mul\n        /* \"#utility.yul\":1162:1170   */\n      dup4\n        /* \"#utility.yul\":1158:1190   */\n      add\n        /* \"#utility.yul\":1155:1196   */\n      gt\n        /* \"#utility.yul\":1152:1280   */\n      iszero\n      tag_93\n      jumpi\n        /* \"#utility.yul\":1199:1278   */\n      tag_94\n      tag_49\n      jump\t// in\n    tag_94:\n        /* \"#utility.yul\":1152:1280   */\n    tag_93:\n        /* \"#utility.yul\":719:1286   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1292:1418   */\n    tag_51:\n        /* \"#utility.yul\":1329:1336   */\n      0x00\n        /* \"#utility.yul\":1369:1411   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":1362:1367   */\n      dup3\n        /* \"#utility.yul\":1358:1412   */\n      and\n        /* \"#utility.yul\":1347:1412   */\n      swap1\n      pop\n        /* \"#utility.yul\":1292:1418   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1424:1520   */\n    tag_52:\n        /* \"#utility.yul\":1461:1468   */\n      0x00\n        /* \"#utility.yul\":1490:1514   */\n      tag_97\n        /* \"#utility.yul\":1508:1513   */\n      dup3\n        /* \"#utility.yul\":1490:1514   */\n      tag_51\n      jump\t// in\n    tag_97:\n        /* \"#utility.yul\":1479:1514   */\n      swap1\n      pop\n        /* \"#utility.yul\":1424:1520   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1526:1648   */\n    tag_53:\n        /* \"#utility.yul\":1599:1623   */\n      tag_99\n        /* \"#utility.yul\":1617:1622   */\n      dup2\n        /* \"#utility.yul\":1599:1623   */\n      tag_52\n      jump\t// in\n    tag_99:\n        /* \"#utility.yul\":1592:1597   */\n      dup2\n        /* \"#utility.yul\":1589:1624   */\n      eq\n        /* \"#utility.yul\":1579:1642   */\n      tag_100\n      jumpi\n        /* \"#utility.yul\":1638:1639   */\n      0x00\n        /* \"#utility.yul\":1635:1636   */\n      dup1\n        /* \"#utility.yul\":1628:1640   */\n      revert\n        /* \"#utility.yul\":1579:1642   */\n    tag_100:\n        /* \"#utility.yul\":1526:1648   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1654:1793   */\n    tag_54:\n        /* \"#utility.yul\":1700:1705   */\n      0x00\n        /* \"#utility.yul\":1738:1744   */\n      dup2\n        /* \"#utility.yul\":1725:1745   */\n      calldataload\n        /* \"#utility.yul\":1716:1745   */\n      swap1\n      pop\n        /* \"#utility.yul\":1754:1787   */\n      tag_102\n        /* \"#utility.yul\":1781:1786   */\n      dup2\n        /* \"#utility.yul\":1754:1787   */\n      tag_53\n      jump\t// in\n    tag_102:\n        /* \"#utility.yul\":1654:1793   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1799:2792   */\n    tag_5:\n        /* \"#utility.yul\":1911:1917   */\n      0x00\n        /* \"#utility.yul\":1919:1925   */\n      dup1\n        /* \"#utility.yul\":1927:1933   */\n      0x00\n        /* \"#utility.yul\":1935:1941   */\n      dup1\n        /* \"#utility.yul\":1943:1949   */\n      0x00\n        /* \"#utility.yul\":1992:1995   */\n      0x80\n        /* \"#utility.yul\":1980:1989   */\n      dup7\n        /* \"#utility.yul\":1971:1978   */\n      dup9\n        /* \"#utility.yul\":1967:1990   */\n      sub\n        /* \"#utility.yul\":1963:1996   */\n      slt\n        /* \"#utility.yul\":1960:2080   */\n      iszero\n      tag_104\n      jumpi\n        /* \"#utility.yul\":1999:2078   */\n      tag_105\n      tag_45\n      jump\t// in\n    tag_105:\n        /* \"#utility.yul\":1960:2080   */\n    tag_104:\n        /* \"#utility.yul\":2147:2148   */\n      0x00\n        /* \"#utility.yul\":2136:2145   */\n      dup7\n        /* \"#utility.yul\":2132:2149   */\n      add\n        /* \"#utility.yul\":2119:2150   */\n      calldataload\n        /* \"#utility.yul\":2177:2195   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":2169:2175   */\n      dup2\n        /* \"#utility.yul\":2166:2196   */\n      gt\n        /* \"#utility.yul\":2163:2280   */\n      iszero\n      tag_106\n      jumpi\n        /* \"#utility.yul\":2199:2278   */\n      tag_107\n      tag_46\n      jump\t// in\n    tag_107:\n        /* \"#utility.yul\":2163:2280   */\n    tag_106:\n        /* \"#utility.yul\":2312:2391   */\n      tag_108\n        /* \"#utility.yul\":2383:2390   */\n      dup9\n        /* \"#utility.yul\":2374:2380   */\n      dup3\n        /* \"#utility.yul\":2363:2372   */\n      dup10\n        /* \"#utility.yul\":2359:2381   */\n      add\n        /* \"#utility.yul\":2312:2391   */\n      tag_50\n      jump\t// in\n    tag_108:\n        /* \"#utility.yul\":2294:2391   */\n      swap6\n      pop\n      swap6\n      pop\n        /* \"#utility.yul\":2090:2401   */\n      pop\n        /* \"#utility.yul\":2440:2442   */\n      0x20\n        /* \"#utility.yul\":2466:2519   */\n      tag_109\n        /* \"#utility.yul\":2511:2518   */\n      dup9\n        /* \"#utility.yul\":2502:2508   */\n      dup3\n        /* \"#utility.yul\":2491:2500   */\n      dup10\n        /* \"#utility.yul\":2487:2509   */\n      add\n        /* \"#utility.yul\":2466:2519   */\n      tag_54\n      jump\t// in\n    tag_109:\n        /* \"#utility.yul\":2456:2519   */\n      swap4\n      pop\n        /* \"#utility.yul\":2411:2529   */\n      pop\n        /* \"#utility.yul\":2568:2570   */\n      0x40\n        /* \"#utility.yul\":2594:2647   */\n      tag_110\n        /* \"#utility.yul\":2639:2646   */\n      dup9\n        /* \"#utility.yul\":2630:2636   */\n      dup3\n        /* \"#utility.yul\":2619:2628   */\n      dup10\n        /* \"#utility.yul\":2615:2637   */\n      add\n        /* \"#utility.yul\":2594:2647   */\n      tag_54\n      jump\t// in\n    tag_110:\n        /* \"#utility.yul\":2584:2647   */\n      swap3\n      pop\n        /* \"#utility.yul\":2539:2657   */\n      pop\n        /* \"#utility.yul\":2696:2698   */\n      0x60\n        /* \"#utility.yul\":2722:2775   */\n      tag_111\n        /* \"#utility.yul\":2767:2774   */\n      dup9\n        /* \"#utility.yul\":2758:2764   */\n      dup3\n        /* \"#utility.yul\":2747:2756   */\n      dup10\n        /* \"#utility.yul\":2743:2765   */\n      add\n        /* \"#utility.yul\":2722:2775   */\n      tag_54\n      jump\t// in\n    tag_111:\n        /* \"#utility.yul\":2712:2775   */\n      swap2\n      pop\n        /* \"#utility.yul\":2667:2785   */\n      pop\n        /* \"#utility.yul\":1799:2792   */\n      swap3\n      swap6\n      pop\n      swap3\n      swap6\n      swap1\n      swap4\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2798:2875   */\n    tag_55:\n        /* \"#utility.yul\":2835:2842   */\n      0x00\n        /* \"#utility.yul\":2864:2869   */\n      dup2\n        /* \"#utility.yul\":2853:2869   */\n      swap1\n      pop\n        /* \"#utility.yul\":2798:2875   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2881:3007   */\n    tag_56:\n        /* \"#utility.yul\":2976:3000   */\n      tag_114\n        /* \"#utility.yul\":2994:2999   */\n      dup2\n        /* \"#utility.yul\":2976:3000   */\n      tag_55\n      jump\t// in\n    tag_114:\n        /* \"#utility.yul\":2971:2974   */\n      dup3\n        /* \"#utility.yul\":2964:3001   */\n      mstore\n        /* \"#utility.yul\":2881:3007   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3013:3251   */\n    tag_8:\n        /* \"#utility.yul\":3114:3118   */\n      0x00\n        /* \"#utility.yul\":3152:3154   */\n      0x20\n        /* \"#utility.yul\":3141:3150   */\n      dup3\n        /* \"#utility.yul\":3137:3155   */\n      add\n        /* \"#utility.yul\":3129:3155   */\n      swap1\n      pop\n        /* \"#utility.yul\":3165:3244   */\n      tag_116\n        /* \"#utility.yul\":3241:3242   */\n      0x00\n        /* \"#utility.yul\":3230:3239   */\n      dup4\n        /* \"#utility.yul\":3226:3243   */\n      add\n        /* \"#utility.yul\":3217:3223   */\n      dup5\n        /* \"#utility.yul\":3165:3244   */\n      tag_56\n      jump\t// in\n    tag_116:\n        /* \"#utility.yul\":3013:3251   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3257:3437   */\n    tag_15:\n        /* \"#utility.yul\":3305:3382   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":3302:3303   */\n      0x00\n        /* \"#utility.yul\":3295:3383   */\n      mstore\n        /* \"#utility.yul\":3402:3406   */\n      0x32\n        /* \"#utility.yul\":3399:3400   */\n      0x04\n        /* \"#utility.yul\":3392:3407   */\n      mstore\n        /* \"#utility.yul\":3426:3430   */\n      0x24\n        /* \"#utility.yul\":3423:3424   */\n      0x00\n        /* \"#utility.yul\":3416:3431   */\n      revert\n        /* \"#utility.yul\":3443:3534   */\n    tag_57:\n        /* \"#utility.yul\":3479:3486   */\n      0x00\n        /* \"#utility.yul\":3519:3527   */\n      0xffffff\n        /* \"#utility.yul\":3512:3517   */\n      dup3\n        /* \"#utility.yul\":3508:3528   */\n      and\n        /* \"#utility.yul\":3497:3528   */\n      swap1\n      pop\n        /* \"#utility.yul\":3443:3534   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3540:3660   */\n    tag_58:\n        /* \"#utility.yul\":3612:3635   */\n      tag_120\n        /* \"#utility.yul\":3629:3634   */\n      dup2\n        /* \"#utility.yul\":3612:3635   */\n      tag_57\n      jump\t// in\n    tag_120:\n        /* \"#utility.yul\":3605:3610   */\n      dup2\n        /* \"#utility.yul\":3602:3636   */\n      eq\n        /* \"#utility.yul\":3592:3654   */\n      tag_121\n      jumpi\n        /* \"#utility.yul\":3650:3651   */\n      0x00\n        /* \"#utility.yul\":3647:3648   */\n      dup1\n        /* \"#utility.yul\":3640:3652   */\n      revert\n        /* \"#utility.yul\":3592:3654   */\n    tag_121:\n        /* \"#utility.yul\":3540:3660   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3666:3803   */\n    tag_59:\n        /* \"#utility.yul\":3711:3716   */\n      0x00\n        /* \"#utility.yul\":3749:3755   */\n      dup2\n        /* \"#utility.yul\":3736:3756   */\n      calldataload\n        /* \"#utility.yul\":3727:3756   */\n      swap1\n      pop\n        /* \"#utility.yul\":3765:3797   */\n      tag_123\n        /* \"#utility.yul\":3791:3796   */\n      dup2\n        /* \"#utility.yul\":3765:3797   */\n      tag_58\n      jump\t// in\n    tag_123:\n        /* \"#utility.yul\":3666:3803   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3809:4136   */\n    tag_17:\n        /* \"#utility.yul\":3867:3873   */\n      0x00\n        /* \"#utility.yul\":3916:3918   */\n      0x20\n        /* \"#utility.yul\":3904:3913   */\n      dup3\n        /* \"#utility.yul\":3895:3902   */\n      dup5\n        /* \"#utility.yul\":3891:3914   */\n      sub\n        /* \"#utility.yul\":3887:3919   */\n      slt\n        /* \"#utility.yul\":3884:4003   */\n      iszero\n      tag_125\n      jumpi\n        /* \"#utility.yul\":3922:4001   */\n      tag_126\n      tag_45\n      jump\t// in\n    tag_126:\n        /* \"#utility.yul\":3884:4003   */\n    tag_125:\n        /* \"#utility.yul\":4042:4043   */\n      0x00\n        /* \"#utility.yul\":4067:4119   */\n      tag_127\n        /* \"#utility.yul\":4111:4118   */\n      dup5\n        /* \"#utility.yul\":4102:4108   */\n      dup3\n        /* \"#utility.yul\":4091:4100   */\n      dup6\n        /* \"#utility.yul\":4087:4109   */\n      add\n        /* \"#utility.yul\":4067:4119   */\n      tag_59\n      jump\t// in\n    tag_127:\n        /* \"#utility.yul\":4057:4119   */\n      swap2\n      pop\n        /* \"#utility.yul\":4013:4129   */\n      pop\n        /* \"#utility.yul\":3809:4136   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4142:4260   */\n    tag_60:\n        /* \"#utility.yul\":4229:4253   */\n      tag_129\n        /* \"#utility.yul\":4247:4252   */\n      dup2\n        /* \"#utility.yul\":4229:4253   */\n      tag_52\n      jump\t// in\n    tag_129:\n        /* \"#utility.yul\":4224:4227   */\n      dup3\n        /* \"#utility.yul\":4217:4254   */\n      mstore\n        /* \"#utility.yul\":4142:4260   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4266:4381   */\n    tag_61:\n        /* \"#utility.yul\":4351:4374   */\n      tag_131\n        /* \"#utility.yul\":4368:4373   */\n      dup2\n        /* \"#utility.yul\":4351:4374   */\n      tag_57\n      jump\t// in\n    tag_131:\n        /* \"#utility.yul\":4346:4349   */\n      dup3\n        /* \"#utility.yul\":4339:4375   */\n      mstore\n        /* \"#utility.yul\":4266:4381   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4387:4825   */\n    tag_19:\n        /* \"#utility.yul\":4534:4538   */\n      0x00\n        /* \"#utility.yul\":4572:4574   */\n      0x60\n        /* \"#utility.yul\":4561:4570   */\n      dup3\n        /* \"#utility.yul\":4557:4575   */\n      add\n        /* \"#utility.yul\":4549:4575   */\n      swap1\n      pop\n        /* \"#utility.yul\":4585:4656   */\n      tag_133\n        /* \"#utility.yul\":4653:4654   */\n      0x00\n        /* \"#utility.yul\":4642:4651   */\n      dup4\n        /* \"#utility.yul\":4638:4655   */\n      add\n        /* \"#utility.yul\":4629:4635   */\n      dup7\n        /* \"#utility.yul\":4585:4656   */\n      tag_60\n      jump\t// in\n    tag_133:\n        /* \"#utility.yul\":4666:4738   */\n      tag_134\n        /* \"#utility.yul\":4734:4736   */\n      0x20\n        /* \"#utility.yul\":4723:4732   */\n      dup4\n        /* \"#utility.yul\":4719:4737   */\n      add\n        /* \"#utility.yul\":4710:4716   */\n      dup6\n        /* \"#utility.yul\":4666:4738   */\n      tag_60\n      jump\t// in\n    tag_134:\n        /* \"#utility.yul\":4748:4818   */\n      tag_135\n        /* \"#utility.yul\":4814:4816   */\n      0x40\n        /* \"#utility.yul\":4803:4812   */\n      dup4\n        /* \"#utility.yul\":4799:4817   */\n      add\n        /* \"#utility.yul\":4790:4796   */\n      dup5\n        /* \"#utility.yul\":4748:4818   */\n      tag_61\n      jump\t// in\n    tag_135:\n        /* \"#utility.yul\":4387:4825   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4831:4974   */\n    tag_62:\n        /* \"#utility.yul\":4888:4893   */\n      0x00\n        /* \"#utility.yul\":4919:4925   */\n      dup2\n        /* \"#utility.yul\":4913:4926   */\n      mload\n        /* \"#utility.yul\":4904:4926   */\n      swap1\n      pop\n        /* \"#utility.yul\":4935:4968   */\n      tag_137\n        /* \"#utility.yul\":4962:4967   */\n      dup2\n        /* \"#utility.yul\":4935:4968   */\n      tag_53\n      jump\t// in\n    tag_137:\n        /* \"#utility.yul\":4831:4974   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4980:5331   */\n    tag_23:\n        /* \"#utility.yul\":5050:5056   */\n      0x00\n        /* \"#utility.yul\":5099:5101   */\n      0x20\n        /* \"#utility.yul\":5087:5096   */\n      dup3\n        /* \"#utility.yul\":5078:5085   */\n      dup5\n        /* \"#utility.yul\":5074:5097   */\n      sub\n        /* \"#utility.yul\":5070:5102   */\n      slt\n        /* \"#utility.yul\":5067:5186   */\n      iszero\n      tag_139\n      jumpi\n        /* \"#utility.yul\":5105:5184   */\n      tag_140\n      tag_45\n      jump\t// in\n    tag_140:\n        /* \"#utility.yul\":5067:5186   */\n    tag_139:\n        /* \"#utility.yul\":5225:5226   */\n      0x00\n        /* \"#utility.yul\":5250:5314   */\n      tag_141\n        /* \"#utility.yul\":5306:5313   */\n      dup5\n        /* \"#utility.yul\":5297:5303   */\n      dup3\n        /* \"#utility.yul\":5286:5295   */\n      dup6\n        /* \"#utility.yul\":5282:5304   */\n      add\n        /* \"#utility.yul\":5250:5314   */\n      tag_62\n      jump\t// in\n    tag_141:\n        /* \"#utility.yul\":5240:5314   */\n      swap2\n      pop\n        /* \"#utility.yul\":5196:5324   */\n      pop\n        /* \"#utility.yul\":4980:5331   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5337:5455   */\n    tag_63:\n        /* \"#utility.yul\":5374:5381   */\n      0x00\n        /* \"#utility.yul\":5414:5448   */\n      0xffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":5407:5412   */\n      dup3\n        /* \"#utility.yul\":5403:5449   */\n      and\n        /* \"#utility.yul\":5392:5449   */\n      swap1\n      pop\n        /* \"#utility.yul\":5337:5455   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5461:5583   */\n    tag_64:\n        /* \"#utility.yul\":5534:5558   */\n      tag_144\n        /* \"#utility.yul\":5552:5557   */\n      dup2\n        /* \"#utility.yul\":5534:5558   */\n      tag_63\n      jump\t// in\n    tag_144:\n        /* \"#utility.yul\":5527:5532   */\n      dup2\n        /* \"#utility.yul\":5524:5559   */\n      eq\n        /* \"#utility.yul\":5514:5577   */\n      tag_145\n      jumpi\n        /* \"#utility.yul\":5573:5574   */\n      0x00\n        /* \"#utility.yul\":5570:5571   */\n      dup1\n        /* \"#utility.yul\":5563:5575   */\n      revert\n        /* \"#utility.yul\":5514:5577   */\n    tag_145:\n        /* \"#utility.yul\":5461:5583   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5589:5732   */\n    tag_65:\n        /* \"#utility.yul\":5646:5651   */\n      0x00\n        /* \"#utility.yul\":5677:5683   */\n      dup2\n        /* \"#utility.yul\":5671:5684   */\n      mload\n        /* \"#utility.yul\":5662:5684   */\n      swap1\n      pop\n        /* \"#utility.yul\":5693:5726   */\n      tag_147\n        /* \"#utility.yul\":5720:5725   */\n      dup2\n        /* \"#utility.yul\":5693:5726   */\n      tag_64\n      jump\t// in\n    tag_147:\n        /* \"#utility.yul\":5589:5732   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5738:6089   */\n    tag_28:\n        /* \"#utility.yul\":5808:5814   */\n      0x00\n        /* \"#utility.yul\":5857:5859   */\n      0x20\n        /* \"#utility.yul\":5845:5854   */\n      dup3\n        /* \"#utility.yul\":5836:5843   */\n      dup5\n        /* \"#utility.yul\":5832:5855   */\n      sub\n        /* \"#utility.yul\":5828:5860   */\n      slt\n        /* \"#utility.yul\":5825:5944   */\n      iszero\n      tag_149\n      jumpi\n        /* \"#utility.yul\":5863:5942   */\n      tag_150\n      tag_45\n      jump\t// in\n    tag_150:\n        /* \"#utility.yul\":5825:5944   */\n    tag_149:\n        /* \"#utility.yul\":5983:5984   */\n      0x00\n        /* \"#utility.yul\":6008:6072   */\n      tag_151\n        /* \"#utility.yul\":6064:6071   */\n      dup5\n        /* \"#utility.yul\":6055:6061   */\n      dup3\n        /* \"#utility.yul\":6044:6053   */\n      dup6\n        /* \"#utility.yul\":6040:6062   */\n      add\n        /* \"#utility.yul\":6008:6072   */\n      tag_65\n      jump\t// in\n    tag_151:\n        /* \"#utility.yul\":5998:6072   */\n      swap2\n      pop\n        /* \"#utility.yul\":5954:6082   */\n      pop\n        /* \"#utility.yul\":5738:6089   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6095:6217   */\n    tag_66:\n        /* \"#utility.yul\":6168:6192   */\n      tag_153\n        /* \"#utility.yul\":6186:6191   */\n      dup2\n        /* \"#utility.yul\":6168:6192   */\n      tag_51\n      jump\t// in\n    tag_153:\n        /* \"#utility.yul\":6161:6166   */\n      dup2\n        /* \"#utility.yul\":6158:6193   */\n      eq\n        /* \"#utility.yul\":6148:6211   */\n      tag_154\n      jumpi\n        /* \"#utility.yul\":6207:6208   */\n      0x00\n        /* \"#utility.yul\":6204:6205   */\n      dup1\n        /* \"#utility.yul\":6197:6209   */\n      revert\n        /* \"#utility.yul\":6148:6211   */\n    tag_154:\n        /* \"#utility.yul\":6095:6217   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6223:6366   */\n    tag_67:\n        /* \"#utility.yul\":6280:6285   */\n      0x00\n        /* \"#utility.yul\":6311:6317   */\n      dup2\n        /* \"#utility.yul\":6305:6318   */\n      mload\n        /* \"#utility.yul\":6296:6318   */\n      swap1\n      pop\n        /* \"#utility.yul\":6327:6360   */\n      tag_156\n        /* \"#utility.yul\":6354:6359   */\n      dup2\n        /* \"#utility.yul\":6327:6360   */\n      tag_66\n      jump\t// in\n    tag_156:\n        /* \"#utility.yul\":6223:6366   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6372:6462   */\n    tag_68:\n        /* \"#utility.yul\":6407:6414   */\n      0x00\n        /* \"#utility.yul\":6450:6455   */\n      dup2\n        /* \"#utility.yul\":6447:6448   */\n      0x02\n        /* \"#utility.yul\":6436:6456   */\n      signextend\n        /* \"#utility.yul\":6425:6456   */\n      swap1\n      pop\n        /* \"#utility.yul\":6372:6462   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6468:6586   */\n    tag_69:\n        /* \"#utility.yul\":6539:6561   */\n      tag_159\n        /* \"#utility.yul\":6555:6560   */\n      dup2\n        /* \"#utility.yul\":6539:6561   */\n      tag_68\n      jump\t// in\n    tag_159:\n        /* \"#utility.yul\":6532:6537   */\n      dup2\n        /* \"#utility.yul\":6529:6562   */\n      eq\n        /* \"#utility.yul\":6519:6580   */\n      tag_160\n      jumpi\n        /* \"#utility.yul\":6576:6577   */\n      0x00\n        /* \"#utility.yul\":6573:6574   */\n      dup1\n        /* \"#utility.yul\":6566:6578   */\n      revert\n        /* \"#utility.yul\":6519:6580   */\n    tag_160:\n        /* \"#utility.yul\":6468:6586   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6592:6731   */\n    tag_70:\n        /* \"#utility.yul\":6647:6652   */\n      0x00\n        /* \"#utility.yul\":6678:6684   */\n      dup2\n        /* \"#utility.yul\":6672:6685   */\n      mload\n        /* \"#utility.yul\":6663:6685   */\n      swap1\n      pop\n        /* \"#utility.yul\":6694:6725   */\n      tag_162\n        /* \"#utility.yul\":6719:6724   */\n      dup2\n        /* \"#utility.yul\":6694:6725   */\n      tag_69\n      jump\t// in\n    tag_162:\n        /* \"#utility.yul\":6592:6731   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6737:6826   */\n    tag_71:\n        /* \"#utility.yul\":6773:6780   */\n      0x00\n        /* \"#utility.yul\":6813:6819   */\n      0xffff\n        /* \"#utility.yul\":6806:6811   */\n      dup3\n        /* \"#utility.yul\":6802:6820   */\n      and\n        /* \"#utility.yul\":6791:6820   */\n      swap1\n      pop\n        /* \"#utility.yul\":6737:6826   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6832:6952   */\n    tag_72:\n        /* \"#utility.yul\":6904:6927   */\n      tag_165\n        /* \"#utility.yul\":6921:6926   */\n      dup2\n        /* \"#utility.yul\":6904:6927   */\n      tag_71\n      jump\t// in\n    tag_165:\n        /* \"#utility.yul\":6897:6902   */\n      dup2\n        /* \"#utility.yul\":6894:6928   */\n      eq\n        /* \"#utility.yul\":6884:6946   */\n      tag_166\n      jumpi\n        /* \"#utility.yul\":6942:6943   */\n      0x00\n        /* \"#utility.yul\":6939:6940   */\n      dup1\n        /* \"#utility.yul\":6932:6944   */\n      revert\n        /* \"#utility.yul\":6884:6946   */\n    tag_166:\n        /* \"#utility.yul\":6832:6952   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6958:7099   */\n    tag_73:\n        /* \"#utility.yul\":7014:7019   */\n      0x00\n        /* \"#utility.yul\":7045:7051   */\n      dup2\n        /* \"#utility.yul\":7039:7052   */\n      mload\n        /* \"#utility.yul\":7030:7052   */\n      swap1\n      pop\n        /* \"#utility.yul\":7061:7093   */\n      tag_168\n        /* \"#utility.yul\":7087:7092   */\n      dup2\n        /* \"#utility.yul\":7061:7093   */\n      tag_72\n      jump\t// in\n    tag_168:\n        /* \"#utility.yul\":6958:7099   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7105:7191   */\n    tag_74:\n        /* \"#utility.yul\":7140:7147   */\n      0x00\n        /* \"#utility.yul\":7180:7184   */\n      0xff\n        /* \"#utility.yul\":7173:7178   */\n      dup3\n        /* \"#utility.yul\":7169:7185   */\n      and\n        /* \"#utility.yul\":7158:7185   */\n      swap1\n      pop\n        /* \"#utility.yul\":7105:7191   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7197:7315   */\n    tag_75:\n        /* \"#utility.yul\":7268:7290   */\n      tag_171\n        /* \"#utility.yul\":7284:7289   */\n      dup2\n        /* \"#utility.yul\":7268:7290   */\n      tag_74\n      jump\t// in\n    tag_171:\n        /* \"#utility.yul\":7261:7266   */\n      dup2\n        /* \"#utility.yul\":7258:7291   */\n      eq\n        /* \"#utility.yul\":7248:7309   */\n      tag_172\n      jumpi\n        /* \"#utility.yul\":7305:7306   */\n      0x00\n        /* \"#utility.yul\":7302:7303   */\n      dup1\n        /* \"#utility.yul\":7295:7307   */\n      revert\n        /* \"#utility.yul\":7248:7309   */\n    tag_172:\n        /* \"#utility.yul\":7197:7315   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7321:7460   */\n    tag_76:\n        /* \"#utility.yul\":7376:7381   */\n      0x00\n        /* \"#utility.yul\":7407:7413   */\n      dup2\n        /* \"#utility.yul\":7401:7414   */\n      mload\n        /* \"#utility.yul\":7392:7414   */\n      swap1\n      pop\n        /* \"#utility.yul\":7423:7454   */\n      tag_174\n        /* \"#utility.yul\":7448:7453   */\n      dup2\n        /* \"#utility.yul\":7423:7454   */\n      tag_75\n      jump\t// in\n    tag_174:\n        /* \"#utility.yul\":7321:7460   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7466:7556   */\n    tag_77:\n        /* \"#utility.yul\":7500:7507   */\n      0x00\n        /* \"#utility.yul\":7543:7548   */\n      dup2\n        /* \"#utility.yul\":7536:7549   */\n      iszero\n        /* \"#utility.yul\":7529:7550   */\n      iszero\n        /* \"#utility.yul\":7518:7550   */\n      swap1\n      pop\n        /* \"#utility.yul\":7466:7556   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7562:7678   */\n    tag_78:\n        /* \"#utility.yul\":7632:7653   */\n      tag_177\n        /* \"#utility.yul\":7647:7652   */\n      dup2\n        /* \"#utility.yul\":7632:7653   */\n      tag_77\n      jump\t// in\n    tag_177:\n        /* \"#utility.yul\":7625:7630   */\n      dup2\n        /* \"#utility.yul\":7622:7654   */\n      eq\n        /* \"#utility.yul\":7612:7672   */\n      tag_178\n      jumpi\n        /* \"#utility.yul\":7668:7669   */\n      0x00\n        /* \"#utility.yul\":7665:7666   */\n      dup1\n        /* \"#utility.yul\":7658:7670   */\n      revert\n        /* \"#utility.yul\":7612:7672   */\n    tag_178:\n        /* \"#utility.yul\":7562:7678   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7684:7821   */\n    tag_79:\n        /* \"#utility.yul\":7738:7743   */\n      0x00\n        /* \"#utility.yul\":7769:7775   */\n      dup2\n        /* \"#utility.yul\":7763:7776   */\n      mload\n        /* \"#utility.yul\":7754:7776   */\n      swap1\n      pop\n        /* \"#utility.yul\":7785:7815   */\n      tag_180\n        /* \"#utility.yul\":7809:7814   */\n      dup2\n        /* \"#utility.yul\":7785:7815   */\n      tag_78\n      jump\t// in\n    tag_180:\n        /* \"#utility.yul\":7684:7821   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7827:9098   */\n    tag_33:\n        /* \"#utility.yul\":7941:7947   */\n      0x00\n        /* \"#utility.yul\":7949:7955   */\n      dup1\n        /* \"#utility.yul\":7957:7963   */\n      0x00\n        /* \"#utility.yul\":7965:7971   */\n      dup1\n        /* \"#utility.yul\":7973:7979   */\n      0x00\n        /* \"#utility.yul\":7981:7987   */\n      dup1\n        /* \"#utility.yul\":7989:7995   */\n      0x00\n        /* \"#utility.yul\":8038:8041   */\n      0xe0\n        /* \"#utility.yul\":8026:8035   */\n      dup9\n        /* \"#utility.yul\":8017:8024   */\n      dup11\n        /* \"#utility.yul\":8013:8036   */\n      sub\n        /* \"#utility.yul\":8009:8042   */\n      slt\n        /* \"#utility.yul\":8006:8126   */\n      iszero\n      tag_182\n      jumpi\n        /* \"#utility.yul\":8045:8124   */\n      tag_183\n      tag_45\n      jump\t// in\n    tag_183:\n        /* \"#utility.yul\":8006:8126   */\n    tag_182:\n        /* \"#utility.yul\":8165:8166   */\n      0x00\n        /* \"#utility.yul\":8190:8254   */\n      tag_184\n        /* \"#utility.yul\":8246:8253   */\n      dup11\n        /* \"#utility.yul\":8237:8243   */\n      dup3\n        /* \"#utility.yul\":8226:8235   */\n      dup12\n        /* \"#utility.yul\":8222:8244   */\n      add\n        /* \"#utility.yul\":8190:8254   */\n      tag_67\n      jump\t// in\n    tag_184:\n        /* \"#utility.yul\":8180:8254   */\n      swap8\n      pop\n        /* \"#utility.yul\":8136:8264   */\n      pop\n        /* \"#utility.yul\":8303:8305   */\n      0x20\n        /* \"#utility.yul\":8329:8391   */\n      tag_185\n        /* \"#utility.yul\":8383:8390   */\n      dup11\n        /* \"#utility.yul\":8374:8380   */\n      dup3\n        /* \"#utility.yul\":8363:8372   */\n      dup12\n        /* \"#utility.yul\":8359:8381   */\n      add\n        /* \"#utility.yul\":8329:8391   */\n      tag_70\n      jump\t// in\n    tag_185:\n        /* \"#utility.yul\":8319:8391   */\n      swap7\n      pop\n        /* \"#utility.yul\":8274:8401   */\n      pop\n        /* \"#utility.yul\":8440:8442   */\n      0x40\n        /* \"#utility.yul\":8466:8529   */\n      tag_186\n        /* \"#utility.yul\":8521:8528   */\n      dup11\n        /* \"#utility.yul\":8512:8518   */\n      dup3\n        /* \"#utility.yul\":8501:8510   */\n      dup12\n        /* \"#utility.yul\":8497:8519   */\n      add\n        /* \"#utility.yul\":8466:8529   */\n      tag_73\n      jump\t// in\n    tag_186:\n        /* \"#utility.yul\":8456:8529   */\n      swap6\n      pop\n        /* \"#utility.yul\":8411:8539   */\n      pop\n        /* \"#utility.yul\":8578:8580   */\n      0x60\n        /* \"#utility.yul\":8604:8667   */\n      tag_187\n        /* \"#utility.yul\":8659:8666   */\n      dup11\n        /* \"#utility.yul\":8650:8656   */\n      dup3\n        /* \"#utility.yul\":8639:8648   */\n      dup12\n        /* \"#utility.yul\":8635:8657   */\n      add\n        /* \"#utility.yul\":8604:8667   */\n      tag_73\n      jump\t// in\n    tag_187:\n        /* \"#utility.yul\":8594:8667   */\n      swap5\n      pop\n        /* \"#utility.yul\":8549:8677   */\n      pop\n        /* \"#utility.yul\":8716:8719   */\n      0x80\n        /* \"#utility.yul\":8743:8806   */\n      tag_188\n        /* \"#utility.yul\":8798:8805   */\n      dup11\n        /* \"#utility.yul\":8789:8795   */\n      dup3\n        /* \"#utility.yul\":8778:8787   */\n      dup12\n        /* \"#utility.yul\":8774:8796   */\n      add\n        /* \"#utility.yul\":8743:8806   */\n      tag_73\n      jump\t// in\n    tag_188:\n        /* \"#utility.yul\":8733:8806   */\n      swap4\n      pop\n        /* \"#utility.yul\":8687:8816   */\n      pop\n        /* \"#utility.yul\":8855:8858   */\n      0xa0\n        /* \"#utility.yul\":8882:8944   */\n      tag_189\n        /* \"#utility.yul\":8936:8943   */\n      dup11\n        /* \"#utility.yul\":8927:8933   */\n      dup3\n        /* \"#utility.yul\":8916:8925   */\n      dup12\n        /* \"#utility.yul\":8912:8934   */\n      add\n        /* \"#utility.yul\":8882:8944   */\n      tag_76\n      jump\t// in\n    tag_189:\n        /* \"#utility.yul\":8872:8944   */\n      swap3\n      pop\n        /* \"#utility.yul\":8826:8954   */\n      pop\n        /* \"#utility.yul\":8993:8996   */\n      0xc0\n        /* \"#utility.yul\":9020:9081   */\n      tag_190\n        /* \"#utility.yul\":9073:9080   */\n      dup11\n        /* \"#utility.yul\":9064:9070   */\n      dup3\n        /* \"#utility.yul\":9053:9062   */\n      dup12\n        /* \"#utility.yul\":9049:9071   */\n      add\n        /* \"#utility.yul\":9020:9081   */\n      tag_79\n      jump\t// in\n    tag_190:\n        /* \"#utility.yul\":9010:9081   */\n      swap2\n      pop\n        /* \"#utility.yul\":8964:9091   */\n      pop\n        /* \"#utility.yul\":7827:9098   */\n      swap3\n      swap6\n      swap9\n      swap2\n      swap5\n      swap8\n      pop\n      swap3\n      swap6\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9104:9451   */\n    tag_38:\n        /* \"#utility.yul\":9172:9178   */\n      0x00\n        /* \"#utility.yul\":9221:9223   */\n      0x20\n        /* \"#utility.yul\":9209:9218   */\n      dup3\n        /* \"#utility.yul\":9200:9207   */\n      dup5\n        /* \"#utility.yul\":9196:9219   */\n      sub\n        /* \"#utility.yul\":9192:9224   */\n      slt\n        /* \"#utility.yul\":9189:9308   */\n      iszero\n      tag_192\n      jumpi\n        /* \"#utility.yul\":9227:9306   */\n      tag_193\n      tag_45\n      jump\t// in\n    tag_193:\n        /* \"#utility.yul\":9189:9308   */\n    tag_192:\n        /* \"#utility.yul\":9347:9348   */\n      0x00\n        /* \"#utility.yul\":9372:9434   */\n      tag_194\n        /* \"#utility.yul\":9426:9433   */\n      dup5\n        /* \"#utility.yul\":9417:9423   */\n      dup3\n        /* \"#utility.yul\":9406:9415   */\n      dup6\n        /* \"#utility.yul\":9402:9424   */\n      add\n        /* \"#utility.yul\":9372:9434   */\n      tag_76\n      jump\t// in\n    tag_194:\n        /* \"#utility.yul\":9362:9434   */\n      swap2\n      pop\n        /* \"#utility.yul\":9318:9444   */\n      pop\n        /* \"#utility.yul\":9104:9451   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9457:9637   */\n    tag_80:\n        /* \"#utility.yul\":9505:9582   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":9502:9503   */\n      0x00\n        /* \"#utility.yul\":9495:9583   */\n      mstore\n        /* \"#utility.yul\":9602:9606   */\n      0x11\n        /* \"#utility.yul\":9599:9600   */\n      0x04\n        /* \"#utility.yul\":9592:9607   */\n      mstore\n        /* \"#utility.yul\":9626:9630   */\n      0x24\n        /* \"#utility.yul\":9623:9624   */\n      0x00\n        /* \"#utility.yul\":9616:9631   */\n      revert\n        /* \"#utility.yul\":9643:9876   */\n    tag_43:\n        /* \"#utility.yul\":9682:9685   */\n      0x00\n        /* \"#utility.yul\":9705:9729   */\n      tag_197\n        /* \"#utility.yul\":9723:9728   */\n      dup3\n        /* \"#utility.yul\":9705:9729   */\n      tag_55\n      jump\t// in\n    tag_197:\n        /* \"#utility.yul\":9696:9729   */\n      swap2\n      pop\n        /* \"#utility.yul\":9751:9817   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":9744:9749   */\n      dup3\n        /* \"#utility.yul\":9741:9818   */\n      sub\n        /* \"#utility.yul\":9738:9841   */\n      tag_198\n      jumpi\n        /* \"#utility.yul\":9821:9839   */\n      tag_199\n      tag_80\n      jump\t// in\n    tag_199:\n        /* \"#utility.yul\":9738:9841   */\n    tag_198:\n        /* \"#utility.yul\":9868:9869   */\n      0x01\n        /* \"#utility.yul\":9861:9866   */\n      dup3\n        /* \"#utility.yul\":9857:9870   */\n      add\n        /* \"#utility.yul\":9850:9870   */\n      swap1\n      pop\n        /* \"#utility.yul\":9643:9876   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n\n    auxdata: 0xa26469706673582212203d49f24c15d2da9026880a4d588f5dbe1a8696c2399cc2a07344385b46175f9064736f6c63430008110033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "610954610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c806397d784b11461003a575b600080fd5b610054600480360381019061004f9190610469565b61006a565b604051610061919061050a565b60405180910390f35b600080600090505b868690508110156103925760008573ffffffffffffffffffffffffffffffffffffffff16631698ee8286868b8b878181106100b0576100af610525565b5b90506020020160208101906100c5919061058f565b6040518463ffffffff1660e01b81526004016100e3939291906105da565b602060405180830381865afa158015610100573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101249190610626565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610160575061037f565b60008173ffffffffffffffffffffffffffffffffffffffff16631a6865026040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d1919061069b565b90506000816fffffffffffffffffffffffffffffffff16036101f457505061037f565b60008273ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa158015610241573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026591906107d8565b505050505050905060008173ffffffffffffffffffffffffffffffffffffffff16036102935750505061037f565b60008773ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610304919061087a565b905060008773ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610353573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610377919061087a565b905050505050505b808061038a906108d6565b915050610072565b5095945050505050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126103cb576103ca6103a6565b5b8235905067ffffffffffffffff8111156103e8576103e76103ab565b5b602083019150836020820283011115610404576104036103b0565b5b9250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104368261040b565b9050919050565b6104468161042b565b811461045157600080fd5b50565b6000813590506104638161043d565b92915050565b6000806000806000608086880312156104855761048461039c565b5b600086013567ffffffffffffffff8111156104a3576104a26103a1565b5b6104af888289016103b5565b955095505060206104c288828901610454565b93505060406104d388828901610454565b92505060606104e488828901610454565b9150509295509295909350565b6000819050919050565b610504816104f1565b82525050565b600060208201905061051f60008301846104fb565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600062ffffff82169050919050565b61056c81610554565b811461057757600080fd5b50565b60008135905061058981610563565b92915050565b6000602082840312156105a5576105a461039c565b5b60006105b38482850161057a565b91505092915050565b6105c58161042b565b82525050565b6105d481610554565b82525050565b60006060820190506105ef60008301866105bc565b6105fc60208301856105bc565b61060960408301846105cb565b949350505050565b6000815190506106208161043d565b92915050565b60006020828403121561063c5761063b61039c565b5b600061064a84828501610611565b91505092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b61067881610653565b811461068357600080fd5b50565b6000815190506106958161066f565b92915050565b6000602082840312156106b1576106b061039c565b5b60006106bf84828501610686565b91505092915050565b6106d18161040b565b81146106dc57600080fd5b50565b6000815190506106ee816106c8565b92915050565b60008160020b9050919050565b61070a816106f4565b811461071557600080fd5b50565b60008151905061072781610701565b92915050565b600061ffff82169050919050565b6107448161072d565b811461074f57600080fd5b50565b6000815190506107618161073b565b92915050565b600060ff82169050919050565b61077d81610767565b811461078857600080fd5b50565b60008151905061079a81610774565b92915050565b60008115159050919050565b6107b5816107a0565b81146107c057600080fd5b50565b6000815190506107d2816107ac565b92915050565b600080600080600080600060e0888a0312156107f7576107f661039c565b5b60006108058a828b016106df565b97505060206108168a828b01610718565b96505060406108278a828b01610752565b95505060606108388a828b01610752565b94505060806108498a828b01610752565b93505060a061085a8a828b0161078b565b92505060c061086b8a828b016107c3565b91505092959891949750929550565b6000602082840312156108905761088f61039c565b5b600061089e8482850161078b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006108e1826104f1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610913576109126108a7565b5b60018201905091905056fea26469706673582212203d49f24c15d2da9026880a4d588f5dbe1a8696c2399cc2a07344385b46175f9064736f6c63430008110033",
							"opcodes": "PUSH2 0x954 PUSH2 0x53 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH2 0x46 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x35 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x97D784B1 EQ PUSH2 0x3A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x54 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4F SWAP2 SWAP1 PUSH2 0x469 JUMP JUMPDEST PUSH2 0x6A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x61 SWAP2 SWAP1 PUSH2 0x50A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP JUMPDEST DUP7 DUP7 SWAP1 POP DUP2 LT ISZERO PUSH2 0x392 JUMPI PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1698EE82 DUP7 DUP7 DUP12 DUP12 DUP8 DUP2 DUP2 LT PUSH2 0xB0 JUMPI PUSH2 0xAF PUSH2 0x525 JUMP JUMPDEST JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xC5 SWAP2 SWAP1 PUSH2 0x58F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE3 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5DA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x100 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x124 SWAP2 SWAP1 PUSH2 0x626 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x160 JUMPI POP PUSH2 0x37F JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1A686502 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1AD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1D1 SWAP2 SWAP1 PUSH2 0x69B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1F4 JUMPI POP POP PUSH2 0x37F JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xE0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x241 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x265 SWAP2 SWAP1 PUSH2 0x7D8 JUMP JUMPDEST POP POP POP POP POP POP SWAP1 POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x293 JUMPI POP POP POP PUSH2 0x37F JUMP JUMPDEST PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2E0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x304 SWAP2 SWAP1 PUSH2 0x87A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x353 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x377 SWAP2 SWAP1 PUSH2 0x87A JUMP JUMPDEST SWAP1 POP POP POP POP POP POP JUMPDEST DUP1 DUP1 PUSH2 0x38A SWAP1 PUSH2 0x8D6 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x72 JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x3CB JUMPI PUSH2 0x3CA PUSH2 0x3A6 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3E8 JUMPI PUSH2 0x3E7 PUSH2 0x3AB JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x404 JUMPI PUSH2 0x403 PUSH2 0x3B0 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x436 DUP3 PUSH2 0x40B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x446 DUP2 PUSH2 0x42B JUMP JUMPDEST DUP2 EQ PUSH2 0x451 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x463 DUP2 PUSH2 0x43D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x485 JUMPI PUSH2 0x484 PUSH2 0x39C JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4A3 JUMPI PUSH2 0x4A2 PUSH2 0x3A1 JUMP JUMPDEST JUMPDEST PUSH2 0x4AF DUP9 DUP3 DUP10 ADD PUSH2 0x3B5 JUMP JUMPDEST SWAP6 POP SWAP6 POP POP PUSH1 0x20 PUSH2 0x4C2 DUP9 DUP3 DUP10 ADD PUSH2 0x454 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x4D3 DUP9 DUP3 DUP10 ADD PUSH2 0x454 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0x4E4 DUP9 DUP3 DUP10 ADD PUSH2 0x454 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x504 DUP2 PUSH2 0x4F1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x51F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x4FB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH3 0xFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x56C DUP2 PUSH2 0x554 JUMP JUMPDEST DUP2 EQ PUSH2 0x577 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x589 DUP2 PUSH2 0x563 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5A5 JUMPI PUSH2 0x5A4 PUSH2 0x39C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x5B3 DUP5 DUP3 DUP6 ADD PUSH2 0x57A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x5C5 DUP2 PUSH2 0x42B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x5D4 DUP2 PUSH2 0x554 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x5EF PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x5BC JUMP JUMPDEST PUSH2 0x5FC PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x5BC JUMP JUMPDEST PUSH2 0x609 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x5CB JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x620 DUP2 PUSH2 0x43D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x63C JUMPI PUSH2 0x63B PUSH2 0x39C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x64A DUP5 DUP3 DUP6 ADD PUSH2 0x611 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x678 DUP2 PUSH2 0x653 JUMP JUMPDEST DUP2 EQ PUSH2 0x683 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x695 DUP2 PUSH2 0x66F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6B1 JUMPI PUSH2 0x6B0 PUSH2 0x39C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x6BF DUP5 DUP3 DUP6 ADD PUSH2 0x686 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x6D1 DUP2 PUSH2 0x40B JUMP JUMPDEST DUP2 EQ PUSH2 0x6DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x6EE DUP2 PUSH2 0x6C8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x2 SIGNEXTEND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x70A DUP2 PUSH2 0x6F4 JUMP JUMPDEST DUP2 EQ PUSH2 0x715 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x727 DUP2 PUSH2 0x701 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x744 DUP2 PUSH2 0x72D JUMP JUMPDEST DUP2 EQ PUSH2 0x74F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x761 DUP2 PUSH2 0x73B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x77D DUP2 PUSH2 0x767 JUMP JUMPDEST DUP2 EQ PUSH2 0x788 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x79A DUP2 PUSH2 0x774 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x7B5 DUP2 PUSH2 0x7A0 JUMP JUMPDEST DUP2 EQ PUSH2 0x7C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x7D2 DUP2 PUSH2 0x7AC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x7F7 JUMPI PUSH2 0x7F6 PUSH2 0x39C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x805 DUP11 DUP3 DUP12 ADD PUSH2 0x6DF JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 PUSH2 0x816 DUP11 DUP3 DUP12 ADD PUSH2 0x718 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 PUSH2 0x827 DUP11 DUP3 DUP12 ADD PUSH2 0x752 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 PUSH2 0x838 DUP11 DUP3 DUP12 ADD PUSH2 0x752 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH2 0x849 DUP11 DUP3 DUP12 ADD PUSH2 0x752 JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 PUSH2 0x85A DUP11 DUP3 DUP12 ADD PUSH2 0x78B JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 PUSH2 0x86B DUP11 DUP3 DUP12 ADD PUSH2 0x7C3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x890 JUMPI PUSH2 0x88F PUSH2 0x39C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x89E DUP5 DUP3 DUP6 ADD PUSH2 0x78B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x8E1 DUP3 PUSH2 0x4F1 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x913 JUMPI PUSH2 0x912 PUSH2 0x8A7 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURNDATASIZE 0x49 CALLCODE 0x4C ISZERO 0xD2 0xDA SWAP1 0x26 DUP9 EXP 0x4D PC DUP16 0x5D 0xBE BYTE DUP7 SWAP7 0xC2 CODECOPY SWAP13 0xC2 LOG0 PUSH20 0x44385B46175F9064736F6C634300081100330000 ",
							"sourceMap": "232:798:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@price_715": {
									"entryPoint": 106,
									"id": 715,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"abi_decode_t_address": {
									"entryPoint": 1108,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_address_fromMemory": {
									"entryPoint": 1553,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_array$_t_uint24_$dyn_calldata_ptr": {
									"entryPoint": 949,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_t_bool_fromMemory": {
									"entryPoint": 1987,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_int24_fromMemory": {
									"entryPoint": 1816,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint128_fromMemory": {
									"entryPoint": 1670,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint160_fromMemory": {
									"entryPoint": 1759,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint16_fromMemory": {
									"entryPoint": 1874,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint24": {
									"entryPoint": 1402,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint8_fromMemory": {
									"entryPoint": 1931,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address_fromMemory": {
									"entryPoint": 1574,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_array$_t_uint24_$dyn_calldata_ptrt_addresst_addresst_address": {
									"entryPoint": 1129,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 5
								},
								"abi_decode_tuple_t_uint128_fromMemory": {
									"entryPoint": 1691,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint160t_int24t_uint16t_uint16t_uint16t_uint8t_bool_fromMemory": {
									"entryPoint": 2008,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 7
								},
								"abi_decode_tuple_t_uint24": {
									"entryPoint": 1423,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint8_fromMemory": {
									"entryPoint": 2170,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 1468,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_uint24_to_t_uint24_fromStack": {
									"entryPoint": 1483,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack_library": {
									"entryPoint": 1275,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_address_t_address_t_uint24__to_t_address_t_address_t_uint24__fromStack_reversed": {
									"entryPoint": 1498,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed": {
									"entryPoint": 1290,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 1067,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 1952,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_int24": {
									"entryPoint": 1780,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint128": {
									"entryPoint": 1619,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint16": {
									"entryPoint": 1837,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 1035,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint24": {
									"entryPoint": 1364,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 1265,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint8": {
									"entryPoint": 1895,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"increment_t_uint256": {
									"entryPoint": 2262,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 2215,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x32": {
									"entryPoint": 1317,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490": {
									"entryPoint": 939,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
									"entryPoint": 934,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef": {
									"entryPoint": 944,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": 929,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 924,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 1085,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bool": {
									"entryPoint": 1964,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_int24": {
									"entryPoint": 1793,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint128": {
									"entryPoint": 1647,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint16": {
									"entryPoint": 1851,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint160": {
									"entryPoint": 1736,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint24": {
									"entryPoint": 1379,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint8": {
									"entryPoint": 1908,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:9879:10",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "47:35:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "57:19:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "67:9:10"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:10"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "40:6:10",
														"type": ""
													}
												],
												"src": "7:75:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "177:28:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "194:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "197:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "187:12:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "187:12:10"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "300:28:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "317:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "320:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "310:12:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "310:12:10"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "423:28:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "440:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "443:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "433:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "433:12:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "433:12:10"
														}
													]
												},
												"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
												"nodeType": "YulFunctionDefinition",
												"src": "334:117:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "546:28:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "563:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "566:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "556:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "556:12:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "556:12:10"
														}
													]
												},
												"name": "revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490",
												"nodeType": "YulFunctionDefinition",
												"src": "457:117:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "669:28:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "686:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "689:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "679:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "679:12:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "679:12:10"
														}
													]
												},
												"name": "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
												"nodeType": "YulFunctionDefinition",
												"src": "580:117:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "808:478:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "857:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
																				"nodeType": "YulIdentifier",
																				"src": "859:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "859:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "859:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "836:6:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "844:4:10",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "832:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "832:17:10"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "851:3:10"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "828:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "828:27:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "821:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "821:35:10"
															},
															"nodeType": "YulIf",
															"src": "818:122:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "949:30:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "972:6:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "959:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "959:20:10"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "949:6:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1022:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490",
																				"nodeType": "YulIdentifier",
																				"src": "1024:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1024:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1024:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "994:6:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1002:18:10",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "991:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "991:30:10"
															},
															"nodeType": "YulIf",
															"src": "988:117:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1114:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1130:6:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1138:4:10",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1126:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1126:17:10"
															},
															"variableNames": [
																{
																	"name": "arrayPos",
																	"nodeType": "YulIdentifier",
																	"src": "1114:8:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1197:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
																				"nodeType": "YulIdentifier",
																				"src": "1199:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1199:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1199:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "arrayPos",
																				"nodeType": "YulIdentifier",
																				"src": "1162:8:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "1176:6:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1184:4:10",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "mul",
																					"nodeType": "YulIdentifier",
																					"src": "1172:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1172:17:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1158:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1158:32:10"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "1192:3:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1155:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1155:41:10"
															},
															"nodeType": "YulIf",
															"src": "1152:128:10"
														}
													]
												},
												"name": "abi_decode_t_array$_t_uint24_$dyn_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "775:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "783:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "arrayPos",
														"nodeType": "YulTypedName",
														"src": "791:8:10",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "801:6:10",
														"type": ""
													}
												],
												"src": "719:567:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1337:81:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1347:65:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1362:5:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1369:42:10",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1358:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1358:54:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1347:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1319:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1329:7:10",
														"type": ""
													}
												],
												"src": "1292:126:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1469:51:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1479:35:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1508:5:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "1490:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1490:24:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1479:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1451:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1461:7:10",
														"type": ""
													}
												],
												"src": "1424:96:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1569:79:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1626:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1635:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1638:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1628:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1628:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1628:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1592:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1617:5:10"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "1599:17:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1599:24:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1589:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1589:35:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1582:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1582:43:10"
															},
															"nodeType": "YulIf",
															"src": "1579:63:10"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1562:5:10",
														"type": ""
													}
												],
												"src": "1526:122:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1706:87:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1716:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1738:6:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1725:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1725:20:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1716:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1781:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "1754:26:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1754:33:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1754:33:10"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1684:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "1692:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1700:5:10",
														"type": ""
													}
												],
												"src": "1654:139:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1950:842:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1997:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "1999:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1999:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1999:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1971:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1980:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1967:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1967:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1992:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1963:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1963:33:10"
															},
															"nodeType": "YulIf",
															"src": "1960:120:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "2090:311:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2105:45:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2136:9:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2147:1:10",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2132:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2132:17:10"
																			}
																		],
																		"functionName": {
																			"name": "calldataload",
																			"nodeType": "YulIdentifier",
																			"src": "2119:12:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2119:31:10"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2109:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "2197:83:10",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [],
																					"functionName": {
																						"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
																						"nodeType": "YulIdentifier",
																						"src": "2199:77:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2199:79:10"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "2199:79:10"
																			}
																		]
																	},
																	"condition": {
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "2169:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2177:18:10",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "2166:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2166:30:10"
																	},
																	"nodeType": "YulIf",
																	"src": "2163:117:10"
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2294:97:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2363:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2374:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2359:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2359:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2383:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_array$_t_uint24_$dyn_calldata_ptr",
																			"nodeType": "YulIdentifier",
																			"src": "2312:46:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2312:79:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "2294:6:10"
																		},
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "2302:6:10"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "2411:118:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2426:16:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2440:2:10",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2430:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2456:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2491:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2502:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2487:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2487:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2511:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "2466:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2466:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "2456:6:10"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "2539:118:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2554:16:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2568:2:10",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2558:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2584:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2619:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2630:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2615:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2615:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2639:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "2594:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2594:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value3",
																			"nodeType": "YulIdentifier",
																			"src": "2584:6:10"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "2667:118:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2682:16:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2696:2:10",
																		"type": "",
																		"value": "96"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2686:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2712:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2747:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2758:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2743:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2743:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2767:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "2722:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2722:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value4",
																			"nodeType": "YulIdentifier",
																			"src": "2712:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_array$_t_uint24_$dyn_calldata_ptrt_addresst_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1888:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1899:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1911:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1919:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1927:6:10",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "1935:6:10",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "1943:6:10",
														"type": ""
													}
												],
												"src": "1799:993:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2843:32:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2853:16:10",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "2864:5:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "2853:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2825:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "2835:7:10",
														"type": ""
													}
												],
												"src": "2798:77:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2954:53:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2971:3:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2994:5:10"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "2976:17:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2976:24:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2964:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2964:37:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2964:37:10"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack_library",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2942:5:10",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2949:3:10",
														"type": ""
													}
												],
												"src": "2881:126:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3119:132:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3129:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3141:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3152:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3137:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3137:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3129:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "3217:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3230:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3241:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3226:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3226:17:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack_library",
																	"nodeType": "YulIdentifier",
																	"src": "3165:51:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3165:79:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3165:79:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3091:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3103:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3114:4:10",
														"type": ""
													}
												],
												"src": "3013:238:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3285:152:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3302:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3305:77:10",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3295:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3295:88:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3295:88:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3399:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3402:4:10",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3392:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3392:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3392:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3423:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3426:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3416:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3416:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3416:15:10"
														}
													]
												},
												"name": "panic_error_0x32",
												"nodeType": "YulFunctionDefinition",
												"src": "3257:180:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3487:47:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3497:31:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3512:5:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3519:8:10",
																		"type": "",
																		"value": "0xffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "3508:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3508:20:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3497:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint24",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3469:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3479:7:10",
														"type": ""
													}
												],
												"src": "3443:91:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3582:78:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3638:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3647:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3650:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3640:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3640:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3640:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3605:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "3629:5:10"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint24",
																					"nodeType": "YulIdentifier",
																					"src": "3612:16:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3612:23:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "3602:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3602:34:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3595:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3595:42:10"
															},
															"nodeType": "YulIf",
															"src": "3592:62:10"
														}
													]
												},
												"name": "validator_revert_t_uint24",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3575:5:10",
														"type": ""
													}
												],
												"src": "3540:120:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3717:86:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3727:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3749:6:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3736:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3736:20:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "3727:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3791:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint24",
																	"nodeType": "YulIdentifier",
																	"src": "3765:25:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3765:32:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3765:32:10"
														}
													]
												},
												"name": "abi_decode_t_uint24",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "3695:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3703:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3711:5:10",
														"type": ""
													}
												],
												"src": "3666:137:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3874:262:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3920:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "3922:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3922:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3922:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3895:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3904:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3891:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3891:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3916:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3887:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3887:32:10"
															},
															"nodeType": "YulIf",
															"src": "3884:119:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "4013:116:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4028:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4042:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4032:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4057:62:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4091:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4102:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4087:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4087:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4111:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint24",
																			"nodeType": "YulIdentifier",
																			"src": "4067:19:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4067:52:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "4057:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint24",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3844:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3855:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3867:6:10",
														"type": ""
													}
												],
												"src": "3809:327:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4207:53:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4224:3:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4247:5:10"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "4229:17:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4229:24:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4217:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4217:37:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4217:37:10"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4195:5:10",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4202:3:10",
														"type": ""
													}
												],
												"src": "4142:118:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4329:52:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4346:3:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4368:5:10"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint24",
																			"nodeType": "YulIdentifier",
																			"src": "4351:16:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4351:23:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4339:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4339:36:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4339:36:10"
														}
													]
												},
												"name": "abi_encode_t_uint24_to_t_uint24_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4317:5:10",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4324:3:10",
														"type": ""
													}
												],
												"src": "4266:115:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4539:286:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4549:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4561:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4572:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4557:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4557:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4549:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4629:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4642:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4653:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4638:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4638:17:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4585:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4585:71:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4585:71:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "4710:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4723:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4734:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4719:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4719:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4666:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4666:72:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4666:72:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "4790:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4803:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4814:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4799:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4799:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint24_to_t_uint24_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4748:41:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4748:70:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4748:70:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint24__to_t_address_t_address_t_uint24__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4495:9:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "4507:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4515:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4523:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4534:4:10",
														"type": ""
													}
												],
												"src": "4387:438:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4894:80:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4904:22:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "4919:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4913:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4913:13:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "4904:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "4962:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "4935:26:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4935:33:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4935:33:10"
														}
													]
												},
												"name": "abi_decode_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "4872:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4880:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4888:5:10",
														"type": ""
													}
												],
												"src": "4831:143:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5057:274:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5103:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "5105:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5105:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5105:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5078:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5087:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5074:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5074:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5099:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5070:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5070:32:10"
															},
															"nodeType": "YulIf",
															"src": "5067:119:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "5196:128:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5211:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5225:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5215:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5240:74:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5286:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5297:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5282:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5282:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5306:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "5250:31:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5250:64:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "5240:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5027:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5038:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5050:6:10",
														"type": ""
													}
												],
												"src": "4980:351:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5382:73:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5392:57:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "5407:5:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5414:34:10",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "5403:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5403:46:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "5392:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint128",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5364:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "5374:7:10",
														"type": ""
													}
												],
												"src": "5337:118:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5504:79:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5561:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5570:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5573:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5563:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5563:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5563:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5527:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "5552:5:10"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint128",
																					"nodeType": "YulIdentifier",
																					"src": "5534:17:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5534:24:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "5524:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5524:35:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "5517:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5517:43:10"
															},
															"nodeType": "YulIf",
															"src": "5514:63:10"
														}
													]
												},
												"name": "validator_revert_t_uint128",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5497:5:10",
														"type": ""
													}
												],
												"src": "5461:122:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5652:80:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5662:22:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "5677:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5671:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5671:13:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "5662:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "5720:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint128",
																	"nodeType": "YulIdentifier",
																	"src": "5693:26:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5693:33:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5693:33:10"
														}
													]
												},
												"name": "abi_decode_t_uint128_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "5630:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "5638:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5646:5:10",
														"type": ""
													}
												],
												"src": "5589:143:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5815:274:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5861:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "5863:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5863:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5863:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5836:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5845:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5832:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5832:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5857:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5828:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5828:32:10"
															},
															"nodeType": "YulIf",
															"src": "5825:119:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "5954:128:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5969:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5983:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5973:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5998:74:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "6044:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "6055:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6040:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6040:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6064:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint128_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "6008:31:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6008:64:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "5998:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint128_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5785:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5796:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5808:6:10",
														"type": ""
													}
												],
												"src": "5738:351:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6138:79:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6195:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6204:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6207:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6197:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6197:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6197:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "6161:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "6186:5:10"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint160",
																					"nodeType": "YulIdentifier",
																					"src": "6168:17:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6168:24:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "6158:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6158:35:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "6151:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6151:43:10"
															},
															"nodeType": "YulIf",
															"src": "6148:63:10"
														}
													]
												},
												"name": "validator_revert_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6131:5:10",
														"type": ""
													}
												],
												"src": "6095:122:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6286:80:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6296:22:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "6311:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "6305:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6305:13:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "6296:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "6354:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "6327:26:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6327:33:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6327:33:10"
														}
													]
												},
												"name": "abi_decode_t_uint160_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "6264:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "6272:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6280:5:10",
														"type": ""
													}
												],
												"src": "6223:143:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6415:47:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6425:31:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6447:1:10",
																		"type": "",
																		"value": "2"
																	},
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "6450:5:10"
																	}
																],
																"functionName": {
																	"name": "signextend",
																	"nodeType": "YulIdentifier",
																	"src": "6436:10:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6436:20:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "6425:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_int24",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6397:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "6407:7:10",
														"type": ""
													}
												],
												"src": "6372:90:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6509:77:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6564:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6573:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6576:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6566:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6566:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6566:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "6532:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "6555:5:10"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_int24",
																					"nodeType": "YulIdentifier",
																					"src": "6539:15:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6539:22:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "6529:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6529:33:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "6522:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6522:41:10"
															},
															"nodeType": "YulIf",
															"src": "6519:61:10"
														}
													]
												},
												"name": "validator_revert_t_int24",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6502:5:10",
														"type": ""
													}
												],
												"src": "6468:118:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6653:78:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6663:22:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "6678:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "6672:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6672:13:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "6663:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "6719:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_int24",
																	"nodeType": "YulIdentifier",
																	"src": "6694:24:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6694:31:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6694:31:10"
														}
													]
												},
												"name": "abi_decode_t_int24_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "6631:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "6639:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6647:5:10",
														"type": ""
													}
												],
												"src": "6592:139:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6781:45:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6791:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "6806:5:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6813:6:10",
																		"type": "",
																		"value": "0xffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "6802:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6802:18:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "6791:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint16",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6763:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "6773:7:10",
														"type": ""
													}
												],
												"src": "6737:89:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6874:78:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6930:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6939:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6942:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6932:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6932:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6932:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "6897:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "6921:5:10"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint16",
																					"nodeType": "YulIdentifier",
																					"src": "6904:16:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6904:23:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "6894:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6894:34:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "6887:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6887:42:10"
															},
															"nodeType": "YulIf",
															"src": "6884:62:10"
														}
													]
												},
												"name": "validator_revert_t_uint16",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6867:5:10",
														"type": ""
													}
												],
												"src": "6832:120:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7020:79:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7030:22:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "7045:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "7039:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7039:13:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "7030:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "7087:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint16",
																	"nodeType": "YulIdentifier",
																	"src": "7061:25:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7061:32:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7061:32:10"
														}
													]
												},
												"name": "abi_decode_t_uint16_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "6998:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "7006:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "7014:5:10",
														"type": ""
													}
												],
												"src": "6958:141:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7148:43:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7158:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "7173:5:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7180:4:10",
																		"type": "",
																		"value": "0xff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "7169:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7169:16:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "7158:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "7130:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "7140:7:10",
														"type": ""
													}
												],
												"src": "7105:86:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7238:77:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7293:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7302:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7305:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "7295:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7295:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7295:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "7261:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "7284:5:10"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint8",
																					"nodeType": "YulIdentifier",
																					"src": "7268:15:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7268:22:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "7258:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7258:33:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "7251:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7251:41:10"
															},
															"nodeType": "YulIf",
															"src": "7248:61:10"
														}
													]
												},
												"name": "validator_revert_t_uint8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "7231:5:10",
														"type": ""
													}
												],
												"src": "7197:118:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7382:78:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7392:22:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "7407:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "7401:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7401:13:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "7392:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "7448:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint8",
																	"nodeType": "YulIdentifier",
																	"src": "7423:24:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7423:31:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7423:31:10"
														}
													]
												},
												"name": "abi_decode_t_uint8_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "7360:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "7368:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "7376:5:10",
														"type": ""
													}
												],
												"src": "7321:139:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7508:48:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7518:32:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "7543:5:10"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "7536:6:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7536:13:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "7529:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7529:21:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "7518:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "7490:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "7500:7:10",
														"type": ""
													}
												],
												"src": "7466:90:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7602:76:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7656:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7665:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7668:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "7658:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7658:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7658:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "7625:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "7647:5:10"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bool",
																					"nodeType": "YulIdentifier",
																					"src": "7632:14:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7632:21:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "7622:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7622:32:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "7615:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7615:40:10"
															},
															"nodeType": "YulIf",
															"src": "7612:60:10"
														}
													]
												},
												"name": "validator_revert_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "7595:5:10",
														"type": ""
													}
												],
												"src": "7562:116:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7744:77:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7754:22:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "7769:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "7763:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7763:13:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "7754:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "7809:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bool",
																	"nodeType": "YulIdentifier",
																	"src": "7785:23:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7785:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7785:30:10"
														}
													]
												},
												"name": "abi_decode_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "7722:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "7730:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "7738:5:10",
														"type": ""
													}
												],
												"src": "7684:137:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7996:1102:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8043:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "8045:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8045:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8045:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "8017:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8026:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "8013:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8013:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8038:3:10",
																		"type": "",
																		"value": "224"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "8009:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8009:33:10"
															},
															"nodeType": "YulIf",
															"src": "8006:120:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "8136:128:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "8151:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8165:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "8155:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "8180:74:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "8226:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "8237:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8222:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8222:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "8246:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint160_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "8190:31:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8190:64:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "8180:6:10"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "8274:127:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "8289:16:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8303:2:10",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "8293:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "8319:72:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "8363:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "8374:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8359:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8359:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "8383:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_int24_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "8329:29:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8329:62:10"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "8319:6:10"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "8411:128:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "8426:16:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8440:2:10",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "8430:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "8456:73:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "8501:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "8512:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8497:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8497:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "8521:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint16_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "8466:30:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8466:63:10"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "8456:6:10"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "8549:128:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "8564:16:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8578:2:10",
																		"type": "",
																		"value": "96"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "8568:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "8594:73:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "8639:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "8650:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8635:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8635:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "8659:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint16_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "8604:30:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8604:63:10"
																	},
																	"variableNames": [
																		{
																			"name": "value3",
																			"nodeType": "YulIdentifier",
																			"src": "8594:6:10"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "8687:129:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "8702:17:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8716:3:10",
																		"type": "",
																		"value": "128"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "8706:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "8733:73:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "8778:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "8789:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8774:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8774:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "8798:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint16_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "8743:30:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8743:63:10"
																	},
																	"variableNames": [
																		{
																			"name": "value4",
																			"nodeType": "YulIdentifier",
																			"src": "8733:6:10"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "8826:128:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "8841:17:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8855:3:10",
																		"type": "",
																		"value": "160"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "8845:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "8872:72:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "8916:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "8927:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8912:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8912:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "8936:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint8_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "8882:29:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8882:62:10"
																	},
																	"variableNames": [
																		{
																			"name": "value5",
																			"nodeType": "YulIdentifier",
																			"src": "8872:6:10"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "8964:127:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "8979:17:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8993:3:10",
																		"type": "",
																		"value": "192"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "8983:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "9010:71:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "9053:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "9064:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "9049:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9049:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "9073:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bool_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "9020:28:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9020:61:10"
																	},
																	"variableNames": [
																		{
																			"name": "value6",
																			"nodeType": "YulIdentifier",
																			"src": "9010:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint160t_int24t_uint16t_uint16t_uint16t_uint8t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7918:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "7929:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7941:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "7949:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "7957:6:10",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "7965:6:10",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "7973:6:10",
														"type": ""
													},
													{
														"name": "value5",
														"nodeType": "YulTypedName",
														"src": "7981:6:10",
														"type": ""
													},
													{
														"name": "value6",
														"nodeType": "YulTypedName",
														"src": "7989:6:10",
														"type": ""
													}
												],
												"src": "7827:1271:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9179:272:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9225:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "9227:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9227:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9227:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "9200:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9209:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "9196:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9196:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9221:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "9192:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9192:32:10"
															},
															"nodeType": "YulIf",
															"src": "9189:119:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "9318:126:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "9333:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9347:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "9337:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "9362:72:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "9406:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "9417:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "9402:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9402:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "9426:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint8_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "9372:29:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9372:62:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "9362:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint8_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9149:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "9160:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9172:6:10",
														"type": ""
													}
												],
												"src": "9104:347:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9485:152:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9502:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9505:77:10",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9495:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9495:88:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9495:88:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9599:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9602:4:10",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9592:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9592:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9592:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9623:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9626:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "9616:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9616:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9616:15:10"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "9457:180:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9686:190:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9696:33:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9723:5:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "9705:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9705:24:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "9696:5:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9819:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "9821:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9821:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9821:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9744:5:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9751:66:10",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "9741:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9741:77:10"
															},
															"nodeType": "YulIf",
															"src": "9738:103:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9850:20:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9861:5:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9868:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9857:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9857:13:10"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "9850:3:10"
																}
															]
														}
													]
												},
												"name": "increment_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9672:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "9682:3:10",
														"type": ""
													}
												],
												"src": "9643:233:10"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() {\n        revert(0, 0)\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    // uint24[]\n    function abi_decode_t_array$_t_uint24_$dyn_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x20)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_array$_t_uint24_$dyn_calldata_ptrt_addresst_addresst_address(headStart, dataEnd) -> value0, value1, value2, value3, value4 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0, value1 := abi_decode_t_array$_t_uint24_$dyn_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value2 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value3 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value4 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack_library(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack_library(value0,  add(headStart, 0))\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function cleanup_t_uint24(value) -> cleaned {\n        cleaned := and(value, 0xffffff)\n    }\n\n    function validator_revert_t_uint24(value) {\n        if iszero(eq(value, cleanup_t_uint24(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint24(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint24(value)\n    }\n\n    function abi_decode_tuple_t_uint24(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint24(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_uint24_to_t_uint24_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint24(value))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint24__to_t_address_t_address_t_uint24__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint24_to_t_uint24_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint128(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffff)\n    }\n\n    function validator_revert_t_uint128(value) {\n        if iszero(eq(value, cleanup_t_uint128(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint128_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint128(value)\n    }\n\n    function abi_decode_tuple_t_uint128_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint128_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function validator_revert_t_uint160(value) {\n        if iszero(eq(value, cleanup_t_uint160(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint160_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint160(value)\n    }\n\n    function cleanup_t_int24(value) -> cleaned {\n        cleaned := signextend(2, value)\n    }\n\n    function validator_revert_t_int24(value) {\n        if iszero(eq(value, cleanup_t_int24(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_int24_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_int24(value)\n    }\n\n    function cleanup_t_uint16(value) -> cleaned {\n        cleaned := and(value, 0xffff)\n    }\n\n    function validator_revert_t_uint16(value) {\n        if iszero(eq(value, cleanup_t_uint16(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint16_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint16(value)\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function validator_revert_t_uint8(value) {\n        if iszero(eq(value, cleanup_t_uint8(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint8_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint8(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_uint160t_int24t_uint16t_uint16t_uint16t_uint8t_bool_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6 {\n        if slt(sub(dataEnd, headStart), 224) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint160_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_int24_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint16_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint16_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint16_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_uint8_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 192\n\n            value6 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint8_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint8_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n}\n",
									"id": 10,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c806397d784b11461003a575b600080fd5b610054600480360381019061004f9190610469565b61006a565b604051610061919061050a565b60405180910390f35b600080600090505b868690508110156103925760008573ffffffffffffffffffffffffffffffffffffffff16631698ee8286868b8b878181106100b0576100af610525565b5b90506020020160208101906100c5919061058f565b6040518463ffffffff1660e01b81526004016100e3939291906105da565b602060405180830381865afa158015610100573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101249190610626565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610160575061037f565b60008173ffffffffffffffffffffffffffffffffffffffff16631a6865026040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d1919061069b565b90506000816fffffffffffffffffffffffffffffffff16036101f457505061037f565b60008273ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa158015610241573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026591906107d8565b505050505050905060008173ffffffffffffffffffffffffffffffffffffffff16036102935750505061037f565b60008773ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610304919061087a565b905060008773ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610353573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610377919061087a565b905050505050505b808061038a906108d6565b915050610072565b5095945050505050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126103cb576103ca6103a6565b5b8235905067ffffffffffffffff8111156103e8576103e76103ab565b5b602083019150836020820283011115610404576104036103b0565b5b9250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104368261040b565b9050919050565b6104468161042b565b811461045157600080fd5b50565b6000813590506104638161043d565b92915050565b6000806000806000608086880312156104855761048461039c565b5b600086013567ffffffffffffffff8111156104a3576104a26103a1565b5b6104af888289016103b5565b955095505060206104c288828901610454565b93505060406104d388828901610454565b92505060606104e488828901610454565b9150509295509295909350565b6000819050919050565b610504816104f1565b82525050565b600060208201905061051f60008301846104fb565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600062ffffff82169050919050565b61056c81610554565b811461057757600080fd5b50565b60008135905061058981610563565b92915050565b6000602082840312156105a5576105a461039c565b5b60006105b38482850161057a565b91505092915050565b6105c58161042b565b82525050565b6105d481610554565b82525050565b60006060820190506105ef60008301866105bc565b6105fc60208301856105bc565b61060960408301846105cb565b949350505050565b6000815190506106208161043d565b92915050565b60006020828403121561063c5761063b61039c565b5b600061064a84828501610611565b91505092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b61067881610653565b811461068357600080fd5b50565b6000815190506106958161066f565b92915050565b6000602082840312156106b1576106b061039c565b5b60006106bf84828501610686565b91505092915050565b6106d18161040b565b81146106dc57600080fd5b50565b6000815190506106ee816106c8565b92915050565b60008160020b9050919050565b61070a816106f4565b811461071557600080fd5b50565b60008151905061072781610701565b92915050565b600061ffff82169050919050565b6107448161072d565b811461074f57600080fd5b50565b6000815190506107618161073b565b92915050565b600060ff82169050919050565b61077d81610767565b811461078857600080fd5b50565b60008151905061079a81610774565b92915050565b60008115159050919050565b6107b5816107a0565b81146107c057600080fd5b50565b6000815190506107d2816107ac565b92915050565b600080600080600080600060e0888a0312156107f7576107f661039c565b5b60006108058a828b016106df565b97505060206108168a828b01610718565b96505060406108278a828b01610752565b95505060606108388a828b01610752565b94505060806108498a828b01610752565b93505060a061085a8a828b0161078b565b92505060c061086b8a828b016107c3565b91505092959891949750929550565b6000602082840312156108905761088f61039c565b5b600061089e8482850161078b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006108e1826104f1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610913576109126108a7565b5b60018201905091905056fea26469706673582212203d49f24c15d2da9026880a4d588f5dbe1a8696c2399cc2a07344385b46175f9064736f6c63430008110033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x35 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x97D784B1 EQ PUSH2 0x3A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x54 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4F SWAP2 SWAP1 PUSH2 0x469 JUMP JUMPDEST PUSH2 0x6A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x61 SWAP2 SWAP1 PUSH2 0x50A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP JUMPDEST DUP7 DUP7 SWAP1 POP DUP2 LT ISZERO PUSH2 0x392 JUMPI PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1698EE82 DUP7 DUP7 DUP12 DUP12 DUP8 DUP2 DUP2 LT PUSH2 0xB0 JUMPI PUSH2 0xAF PUSH2 0x525 JUMP JUMPDEST JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xC5 SWAP2 SWAP1 PUSH2 0x58F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE3 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5DA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x100 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x124 SWAP2 SWAP1 PUSH2 0x626 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x160 JUMPI POP PUSH2 0x37F JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1A686502 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1AD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1D1 SWAP2 SWAP1 PUSH2 0x69B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1F4 JUMPI POP POP PUSH2 0x37F JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xE0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x241 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x265 SWAP2 SWAP1 PUSH2 0x7D8 JUMP JUMPDEST POP POP POP POP POP POP SWAP1 POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x293 JUMPI POP POP POP PUSH2 0x37F JUMP JUMPDEST PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2E0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x304 SWAP2 SWAP1 PUSH2 0x87A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x353 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x377 SWAP2 SWAP1 PUSH2 0x87A JUMP JUMPDEST SWAP1 POP POP POP POP POP POP JUMPDEST DUP1 DUP1 PUSH2 0x38A SWAP1 PUSH2 0x8D6 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x72 JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x3CB JUMPI PUSH2 0x3CA PUSH2 0x3A6 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3E8 JUMPI PUSH2 0x3E7 PUSH2 0x3AB JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x404 JUMPI PUSH2 0x403 PUSH2 0x3B0 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x436 DUP3 PUSH2 0x40B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x446 DUP2 PUSH2 0x42B JUMP JUMPDEST DUP2 EQ PUSH2 0x451 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x463 DUP2 PUSH2 0x43D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x485 JUMPI PUSH2 0x484 PUSH2 0x39C JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4A3 JUMPI PUSH2 0x4A2 PUSH2 0x3A1 JUMP JUMPDEST JUMPDEST PUSH2 0x4AF DUP9 DUP3 DUP10 ADD PUSH2 0x3B5 JUMP JUMPDEST SWAP6 POP SWAP6 POP POP PUSH1 0x20 PUSH2 0x4C2 DUP9 DUP3 DUP10 ADD PUSH2 0x454 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x4D3 DUP9 DUP3 DUP10 ADD PUSH2 0x454 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0x4E4 DUP9 DUP3 DUP10 ADD PUSH2 0x454 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x504 DUP2 PUSH2 0x4F1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x51F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x4FB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH3 0xFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x56C DUP2 PUSH2 0x554 JUMP JUMPDEST DUP2 EQ PUSH2 0x577 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x589 DUP2 PUSH2 0x563 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5A5 JUMPI PUSH2 0x5A4 PUSH2 0x39C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x5B3 DUP5 DUP3 DUP6 ADD PUSH2 0x57A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x5C5 DUP2 PUSH2 0x42B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x5D4 DUP2 PUSH2 0x554 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x5EF PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x5BC JUMP JUMPDEST PUSH2 0x5FC PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x5BC JUMP JUMPDEST PUSH2 0x609 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x5CB JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x620 DUP2 PUSH2 0x43D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x63C JUMPI PUSH2 0x63B PUSH2 0x39C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x64A DUP5 DUP3 DUP6 ADD PUSH2 0x611 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x678 DUP2 PUSH2 0x653 JUMP JUMPDEST DUP2 EQ PUSH2 0x683 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x695 DUP2 PUSH2 0x66F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6B1 JUMPI PUSH2 0x6B0 PUSH2 0x39C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x6BF DUP5 DUP3 DUP6 ADD PUSH2 0x686 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x6D1 DUP2 PUSH2 0x40B JUMP JUMPDEST DUP2 EQ PUSH2 0x6DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x6EE DUP2 PUSH2 0x6C8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x2 SIGNEXTEND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x70A DUP2 PUSH2 0x6F4 JUMP JUMPDEST DUP2 EQ PUSH2 0x715 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x727 DUP2 PUSH2 0x701 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x744 DUP2 PUSH2 0x72D JUMP JUMPDEST DUP2 EQ PUSH2 0x74F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x761 DUP2 PUSH2 0x73B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x77D DUP2 PUSH2 0x767 JUMP JUMPDEST DUP2 EQ PUSH2 0x788 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x79A DUP2 PUSH2 0x774 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x7B5 DUP2 PUSH2 0x7A0 JUMP JUMPDEST DUP2 EQ PUSH2 0x7C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x7D2 DUP2 PUSH2 0x7AC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x7F7 JUMPI PUSH2 0x7F6 PUSH2 0x39C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x805 DUP11 DUP3 DUP12 ADD PUSH2 0x6DF JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 PUSH2 0x816 DUP11 DUP3 DUP12 ADD PUSH2 0x718 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 PUSH2 0x827 DUP11 DUP3 DUP12 ADD PUSH2 0x752 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 PUSH2 0x838 DUP11 DUP3 DUP12 ADD PUSH2 0x752 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH2 0x849 DUP11 DUP3 DUP12 ADD PUSH2 0x752 JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 PUSH2 0x85A DUP11 DUP3 DUP12 ADD PUSH2 0x78B JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 PUSH2 0x86B DUP11 DUP3 DUP12 ADD PUSH2 0x7C3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x890 JUMPI PUSH2 0x88F PUSH2 0x39C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x89E DUP5 DUP3 DUP6 ADD PUSH2 0x78B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x8E1 DUP3 PUSH2 0x4F1 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x913 JUMPI PUSH2 0x912 PUSH2 0x8A7 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURNDATASIZE 0x49 CALLCODE 0x4C ISZERO 0xD2 0xDA SWAP1 0x26 DUP9 EXP 0x4D PC DUP16 0x5D 0xBE BYTE DUP7 SWAP7 0xC2 CODECOPY SWAP13 0xC2 LOG0 PUSH20 0x44385B46175F9064736F6C634300081100330000 ",
							"sourceMap": "232:798:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;261:767;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;361:7;383:6;390:1;383:8;;379:643;394:3;;:10;;392:1;:12;379:643;;;423:12;456:8;438:35;;;474:2;477;480:3;;484:1;480:6;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;438:49;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;423:64;;521:1;505:18;;:4;:18;;;501:66;;543:8;;;501:66;580:9;607:4;592:30;;;:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;580:44;;647:1;642;:6;;;638:56;;668:8;;;;638:56;708:20;753:4;738:26;;;:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;707:59;;;;;;;;799:1;783:12;:17;;;780:64;;820:8;;;;;780:64;858:8;876:2;869:19;;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;858:32;;904:8;922:2;915:19;;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;904:32;;409:613;;;;;379:643;405:3;;;;;:::i;:::-;;;;379:643;;;;261:767;;;;;;;:::o;88:117:10:-;197:1;194;187:12;211:117;320:1;317;310:12;334:117;443:1;440;433:12;457:117;566:1;563;556:12;580:117;689:1;686;679:12;719:567;791:8;801:6;851:3;844:4;836:6;832:17;828:27;818:122;;859:79;;:::i;:::-;818:122;972:6;959:20;949:30;;1002:18;994:6;991:30;988:117;;;1024:79;;:::i;:::-;988:117;1138:4;1130:6;1126:17;1114:29;;1192:3;1184:4;1176:6;1172:17;1162:8;1158:32;1155:41;1152:128;;;1199:79;;:::i;:::-;1152:128;719:567;;;;;:::o;1292:126::-;1329:7;1369:42;1362:5;1358:54;1347:65;;1292:126;;;:::o;1424:96::-;1461:7;1490:24;1508:5;1490:24;:::i;:::-;1479:35;;1424:96;;;:::o;1526:122::-;1599:24;1617:5;1599:24;:::i;:::-;1592:5;1589:35;1579:63;;1638:1;1635;1628:12;1579:63;1526:122;:::o;1654:139::-;1700:5;1738:6;1725:20;1716:29;;1754:33;1781:5;1754:33;:::i;:::-;1654:139;;;;:::o;1799:993::-;1911:6;1919;1927;1935;1943;1992:3;1980:9;1971:7;1967:23;1963:33;1960:120;;;1999:79;;:::i;:::-;1960:120;2147:1;2136:9;2132:17;2119:31;2177:18;2169:6;2166:30;2163:117;;;2199:79;;:::i;:::-;2163:117;2312:79;2383:7;2374:6;2363:9;2359:22;2312:79;:::i;:::-;2294:97;;;;2090:311;2440:2;2466:53;2511:7;2502:6;2491:9;2487:22;2466:53;:::i;:::-;2456:63;;2411:118;2568:2;2594:53;2639:7;2630:6;2619:9;2615:22;2594:53;:::i;:::-;2584:63;;2539:118;2696:2;2722:53;2767:7;2758:6;2747:9;2743:22;2722:53;:::i;:::-;2712:63;;2667:118;1799:993;;;;;;;;:::o;2798:77::-;2835:7;2864:5;2853:16;;2798:77;;;:::o;2881:126::-;2976:24;2994:5;2976:24;:::i;:::-;2971:3;2964:37;2881:126;;:::o;3013:238::-;3114:4;3152:2;3141:9;3137:18;3129:26;;3165:79;3241:1;3230:9;3226:17;3217:6;3165:79;:::i;:::-;3013:238;;;;:::o;3257:180::-;3305:77;3302:1;3295:88;3402:4;3399:1;3392:15;3426:4;3423:1;3416:15;3443:91;3479:7;3519:8;3512:5;3508:20;3497:31;;3443:91;;;:::o;3540:120::-;3612:23;3629:5;3612:23;:::i;:::-;3605:5;3602:34;3592:62;;3650:1;3647;3640:12;3592:62;3540:120;:::o;3666:137::-;3711:5;3749:6;3736:20;3727:29;;3765:32;3791:5;3765:32;:::i;:::-;3666:137;;;;:::o;3809:327::-;3867:6;3916:2;3904:9;3895:7;3891:23;3887:32;3884:119;;;3922:79;;:::i;:::-;3884:119;4042:1;4067:52;4111:7;4102:6;4091:9;4087:22;4067:52;:::i;:::-;4057:62;;4013:116;3809:327;;;;:::o;4142:118::-;4229:24;4247:5;4229:24;:::i;:::-;4224:3;4217:37;4142:118;;:::o;4266:115::-;4351:23;4368:5;4351:23;:::i;:::-;4346:3;4339:36;4266:115;;:::o;4387:438::-;4534:4;4572:2;4561:9;4557:18;4549:26;;4585:71;4653:1;4642:9;4638:17;4629:6;4585:71;:::i;:::-;4666:72;4734:2;4723:9;4719:18;4710:6;4666:72;:::i;:::-;4748:70;4814:2;4803:9;4799:18;4790:6;4748:70;:::i;:::-;4387:438;;;;;;:::o;4831:143::-;4888:5;4919:6;4913:13;4904:22;;4935:33;4962:5;4935:33;:::i;:::-;4831:143;;;;:::o;4980:351::-;5050:6;5099:2;5087:9;5078:7;5074:23;5070:32;5067:119;;;5105:79;;:::i;:::-;5067:119;5225:1;5250:64;5306:7;5297:6;5286:9;5282:22;5250:64;:::i;:::-;5240:74;;5196:128;4980:351;;;;:::o;5337:118::-;5374:7;5414:34;5407:5;5403:46;5392:57;;5337:118;;;:::o;5461:122::-;5534:24;5552:5;5534:24;:::i;:::-;5527:5;5524:35;5514:63;;5573:1;5570;5563:12;5514:63;5461:122;:::o;5589:143::-;5646:5;5677:6;5671:13;5662:22;;5693:33;5720:5;5693:33;:::i;:::-;5589:143;;;;:::o;5738:351::-;5808:6;5857:2;5845:9;5836:7;5832:23;5828:32;5825:119;;;5863:79;;:::i;:::-;5825:119;5983:1;6008:64;6064:7;6055:6;6044:9;6040:22;6008:64;:::i;:::-;5998:74;;5954:128;5738:351;;;;:::o;6095:122::-;6168:24;6186:5;6168:24;:::i;:::-;6161:5;6158:35;6148:63;;6207:1;6204;6197:12;6148:63;6095:122;:::o;6223:143::-;6280:5;6311:6;6305:13;6296:22;;6327:33;6354:5;6327:33;:::i;:::-;6223:143;;;;:::o;6372:90::-;6407:7;6450:5;6447:1;6436:20;6425:31;;6372:90;;;:::o;6468:118::-;6539:22;6555:5;6539:22;:::i;:::-;6532:5;6529:33;6519:61;;6576:1;6573;6566:12;6519:61;6468:118;:::o;6592:139::-;6647:5;6678:6;6672:13;6663:22;;6694:31;6719:5;6694:31;:::i;:::-;6592:139;;;;:::o;6737:89::-;6773:7;6813:6;6806:5;6802:18;6791:29;;6737:89;;;:::o;6832:120::-;6904:23;6921:5;6904:23;:::i;:::-;6897:5;6894:34;6884:62;;6942:1;6939;6932:12;6884:62;6832:120;:::o;6958:141::-;7014:5;7045:6;7039:13;7030:22;;7061:32;7087:5;7061:32;:::i;:::-;6958:141;;;;:::o;7105:86::-;7140:7;7180:4;7173:5;7169:16;7158:27;;7105:86;;;:::o;7197:118::-;7268:22;7284:5;7268:22;:::i;:::-;7261:5;7258:33;7248:61;;7305:1;7302;7295:12;7248:61;7197:118;:::o;7321:139::-;7376:5;7407:6;7401:13;7392:22;;7423:31;7448:5;7423:31;:::i;:::-;7321:139;;;;:::o;7466:90::-;7500:7;7543:5;7536:13;7529:21;7518:32;;7466:90;;;:::o;7562:116::-;7632:21;7647:5;7632:21;:::i;:::-;7625:5;7622:32;7612:60;;7668:1;7665;7658:12;7612:60;7562:116;:::o;7684:137::-;7738:5;7769:6;7763:13;7754:22;;7785:30;7809:5;7785:30;:::i;:::-;7684:137;;;;:::o;7827:1271::-;7941:6;7949;7957;7965;7973;7981;7989;8038:3;8026:9;8017:7;8013:23;8009:33;8006:120;;;8045:79;;:::i;:::-;8006:120;8165:1;8190:64;8246:7;8237:6;8226:9;8222:22;8190:64;:::i;:::-;8180:74;;8136:128;8303:2;8329:62;8383:7;8374:6;8363:9;8359:22;8329:62;:::i;:::-;8319:72;;8274:127;8440:2;8466:63;8521:7;8512:6;8501:9;8497:22;8466:63;:::i;:::-;8456:73;;8411:128;8578:2;8604:63;8659:7;8650:6;8639:9;8635:22;8604:63;:::i;:::-;8594:73;;8549:128;8716:3;8743:63;8798:7;8789:6;8778:9;8774:22;8743:63;:::i;:::-;8733:73;;8687:129;8855:3;8882:62;8936:7;8927:6;8916:9;8912:22;8882:62;:::i;:::-;8872:72;;8826:128;8993:3;9020:61;9073:7;9064:6;9053:9;9049:22;9020:61;:::i;:::-;9010:71;;8964:127;7827:1271;;;;;;;;;;:::o;9104:347::-;9172:6;9221:2;9209:9;9200:7;9196:23;9192:32;9189:119;;;9227:79;;:::i;:::-;9189:119;9347:1;9372:62;9426:7;9417:6;9406:9;9402:22;9372:62;:::i;:::-;9362:72;;9318:126;9104:347;;;;:::o;9457:180::-;9505:77;9502:1;9495:88;9602:4;9599:1;9592:15;9626:4;9623:1;9616:15;9643:233;9682:3;9705:24;9723:5;9705:24;:::i;:::-;9696:33;;9751:66;9744:5;9741:77;9738:103;;9821:18;;:::i;:::-;9738:103;9868:1;9861:5;9857:13;9850:20;;9643:233;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "477600",
								"executionCost": "536",
								"totalCost": "478136"
							},
							"external": {
								"price(uint24[],address,address,address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 232,
									"end": 1030,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 232,
									"end": 1030,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 232,
									"end": 1030,
									"name": "PUSH",
									"source": 9,
									"value": "B"
								},
								{
									"begin": 232,
									"end": 1030,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 232,
									"end": 1030,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 232,
									"end": 1030,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 232,
									"end": 1030,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 232,
									"end": 1030,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 232,
									"end": 1030,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 232,
									"end": 1030,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 232,
									"end": 1030,
									"name": "BYTE",
									"source": 9
								},
								{
									"begin": 232,
									"end": 1030,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 232,
									"end": 1030,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 232,
									"end": 1030,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 232,
									"end": 1030,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 232,
									"end": 1030,
									"name": "PUSH",
									"source": 9,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 232,
									"end": 1030,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 232,
									"end": 1030,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 232,
									"end": 1030,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 232,
									"end": 1030,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 232,
									"end": 1030,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 232,
									"end": 1030,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 232,
									"end": 1030,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 232,
									"end": 1030,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 232,
									"end": 1030,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 232,
									"end": 1030,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 232,
									"end": 1030,
									"name": "ADDRESS",
									"source": 9
								},
								{
									"begin": 232,
									"end": 1030,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 232,
									"end": 1030,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 232,
									"end": 1030,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 232,
									"end": 1030,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 232,
									"end": 1030,
									"name": "MSTORE8",
									"source": 9
								},
								{
									"begin": 232,
									"end": 1030,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 232,
									"end": 1030,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 232,
									"end": 1030,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212203d49f24c15d2da9026880a4d588f5dbe1a8696c2399cc2a07344385b46175f9064736f6c63430008110033",
									".code": [
										{
											"begin": 232,
											"end": 1030,
											"name": "PUSHDEPLOYADDRESS",
											"source": 9
										},
										{
											"begin": 232,
											"end": 1030,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 232,
											"end": 1030,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 232,
											"end": 1030,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 232,
											"end": 1030,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 232,
											"end": 1030,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 232,
											"end": 1030,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 232,
											"end": 1030,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 232,
											"end": 1030,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 232,
											"end": 1030,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 232,
											"end": 1030,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 232,
											"end": 1030,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 232,
											"end": 1030,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 232,
											"end": 1030,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 232,
											"end": 1030,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 232,
											"end": 1030,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 232,
											"end": 1030,
											"name": "PUSH",
											"source": 9,
											"value": "97D784B1"
										},
										{
											"begin": 232,
											"end": 1030,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 232,
											"end": 1030,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 232,
											"end": 1030,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 232,
											"end": 1030,
											"name": "tag",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 232,
											"end": 1030,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 232,
											"end": 1030,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 232,
											"end": 1030,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 232,
											"end": 1030,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "tag",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 261,
											"end": 1028,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "tag",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 261,
											"end": 1028,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "tag",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 261,
											"end": 1028,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "tag",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "tag",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 361,
											"end": 368,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 383,
											"end": 389,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 390,
											"end": 391,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 383,
											"end": 391,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 383,
											"end": 391,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 379,
											"end": 1022,
											"name": "tag",
											"source": 9,
											"value": "10"
										},
										{
											"begin": 379,
											"end": 1022,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 394,
											"end": 397,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 394,
											"end": 397,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 394,
											"end": 404,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 394,
											"end": 404,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 392,
											"end": 393,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 392,
											"end": 404,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 379,
											"end": 1022,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 379,
											"end": 1022,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "11"
										},
										{
											"begin": 379,
											"end": 1022,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 423,
											"end": 435,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 456,
											"end": 464,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 438,
											"end": 473,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 438,
											"end": 473,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 438,
											"end": 473,
											"name": "PUSH",
											"source": 9,
											"value": "1698EE82"
										},
										{
											"begin": 474,
											"end": 476,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 477,
											"end": 479,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 480,
											"end": 483,
											"name": "DUP12",
											"source": 9
										},
										{
											"begin": 480,
											"end": 483,
											"name": "DUP12",
											"source": 9
										},
										{
											"begin": 484,
											"end": 485,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 480,
											"end": 486,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 480,
											"end": 486,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 480,
											"end": 486,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 480,
											"end": 486,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "13"
										},
										{
											"begin": 480,
											"end": 486,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 480,
											"end": 486,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "14"
										},
										{
											"begin": 480,
											"end": 486,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "15"
										},
										{
											"begin": 480,
											"end": 486,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 480,
											"end": 486,
											"name": "tag",
											"source": 9,
											"value": "14"
										},
										{
											"begin": 480,
											"end": 486,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 480,
											"end": 486,
											"name": "tag",
											"source": 9,
											"value": "13"
										},
										{
											"begin": 480,
											"end": 486,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 480,
											"end": 486,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 480,
											"end": 486,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 480,
											"end": 486,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 480,
											"end": 486,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 480,
											"end": 486,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 480,
											"end": 486,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 480,
											"end": 486,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 480,
											"end": 486,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 480,
											"end": 486,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 480,
											"end": 486,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "16"
										},
										{
											"begin": 480,
											"end": 486,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 480,
											"end": 486,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 480,
											"end": 486,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "17"
										},
										{
											"begin": 480,
											"end": 486,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 480,
											"end": 486,
											"name": "tag",
											"source": 9,
											"value": "16"
										},
										{
											"begin": 480,
											"end": 486,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 438,
											"end": 487,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF"
										},
										{
											"begin": 438,
											"end": 487,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 438,
											"end": 487,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 438,
											"end": 487,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 438,
											"end": 487,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 438,
											"end": 487,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "tag",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 438,
											"end": 487,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 438,
											"end": 487,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 438,
											"end": 487,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "STATICCALL",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 438,
											"end": 487,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 438,
											"end": 487,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 438,
											"end": 487,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "tag",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 438,
											"end": 487,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 438,
											"end": 487,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 438,
											"end": 487,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 438,
											"end": 487,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 438,
											"end": 487,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 438,
											"end": 487,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "23"
										},
										{
											"begin": 438,
											"end": 487,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 438,
											"end": 487,
											"name": "tag",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 438,
											"end": 487,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 423,
											"end": 487,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 423,
											"end": 487,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 521,
											"end": 522,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 505,
											"end": 523,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 505,
											"end": 523,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 505,
											"end": 509,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 505,
											"end": 523,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 505,
											"end": 523,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 505,
											"end": 523,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 501,
											"end": 567,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 501,
											"end": 567,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 543,
											"end": 551,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 543,
											"end": 551,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "12"
										},
										{
											"begin": 543,
											"end": 551,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 501,
											"end": 567,
											"name": "tag",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 501,
											"end": 567,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 580,
											"end": 589,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 607,
											"end": 611,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 592,
											"end": 622,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 592,
											"end": 622,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 592,
											"end": 622,
											"name": "PUSH",
											"source": 9,
											"value": "1A686502"
										},
										{
											"begin": 592,
											"end": 624,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 592,
											"end": 624,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF"
										},
										{
											"begin": 592,
											"end": 624,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 592,
											"end": 624,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 592,
											"end": 624,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 592,
											"end": 624,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 592,
											"end": 624,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "STATICCALL",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 592,
											"end": 624,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 592,
											"end": 624,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 592,
											"end": 624,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "tag",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 592,
											"end": 624,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 592,
											"end": 624,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 592,
											"end": 624,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 592,
											"end": 624,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 592,
											"end": 624,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "27"
										},
										{
											"begin": 592,
											"end": 624,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "28"
										},
										{
											"begin": 592,
											"end": 624,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 592,
											"end": 624,
											"name": "tag",
											"source": 9,
											"value": "27"
										},
										{
											"begin": 592,
											"end": 624,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 580,
											"end": 624,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 580,
											"end": 624,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 647,
											"end": 648,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 642,
											"end": 643,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 642,
											"end": 648,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 642,
											"end": 648,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 642,
											"end": 648,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 638,
											"end": 694,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "29"
										},
										{
											"begin": 638,
											"end": 694,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 668,
											"end": 676,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 668,
											"end": 676,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 668,
											"end": 676,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "12"
										},
										{
											"begin": 668,
											"end": 676,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 638,
											"end": 694,
											"name": "tag",
											"source": 9,
											"value": "29"
										},
										{
											"begin": 638,
											"end": 694,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 708,
											"end": 728,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 753,
											"end": 757,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 738,
											"end": 764,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 738,
											"end": 764,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 738,
											"end": 764,
											"name": "PUSH",
											"source": 9,
											"value": "3850C7BD"
										},
										{
											"begin": 738,
											"end": 766,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 738,
											"end": 766,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF"
										},
										{
											"begin": 738,
											"end": 766,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 738,
											"end": 766,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 738,
											"end": 766,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 738,
											"end": 766,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 738,
											"end": 766,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "STATICCALL",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "31"
										},
										{
											"begin": 738,
											"end": 766,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 738,
											"end": 766,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 738,
											"end": 766,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "tag",
											"source": 9,
											"value": "31"
										},
										{
											"begin": 738,
											"end": 766,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 738,
											"end": 766,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 738,
											"end": 766,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 738,
											"end": 766,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 738,
											"end": 766,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 738,
											"end": 766,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "33"
										},
										{
											"begin": 738,
											"end": 766,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 738,
											"end": 766,
											"name": "tag",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 738,
											"end": 766,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 707,
											"end": 766,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 707,
											"end": 766,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 707,
											"end": 766,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 707,
											"end": 766,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 707,
											"end": 766,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 707,
											"end": 766,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 707,
											"end": 766,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 707,
											"end": 766,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 799,
											"end": 800,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 783,
											"end": 795,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 783,
											"end": 800,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 783,
											"end": 800,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 783,
											"end": 800,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 780,
											"end": 844,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "34"
										},
										{
											"begin": 780,
											"end": 844,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 820,
											"end": 828,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 820,
											"end": 828,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 820,
											"end": 828,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 820,
											"end": 828,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "12"
										},
										{
											"begin": 820,
											"end": 828,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 780,
											"end": 844,
											"name": "tag",
											"source": 9,
											"value": "34"
										},
										{
											"begin": 780,
											"end": 844,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 858,
											"end": 866,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 876,
											"end": 878,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 869,
											"end": 888,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 869,
											"end": 888,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 869,
											"end": 888,
											"name": "PUSH",
											"source": 9,
											"value": "313CE567"
										},
										{
											"begin": 869,
											"end": 890,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 869,
											"end": 890,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF"
										},
										{
											"begin": 869,
											"end": 890,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 869,
											"end": 890,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 869,
											"end": 890,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 869,
											"end": 890,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 869,
											"end": 890,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "STATICCALL",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 869,
											"end": 890,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 869,
											"end": 890,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 869,
											"end": 890,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "tag",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 869,
											"end": 890,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 869,
											"end": 890,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 869,
											"end": 890,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 869,
											"end": 890,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 869,
											"end": 890,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "37"
										},
										{
											"begin": 869,
											"end": 890,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "38"
										},
										{
											"begin": 869,
											"end": 890,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 869,
											"end": 890,
											"name": "tag",
											"source": 9,
											"value": "37"
										},
										{
											"begin": 869,
											"end": 890,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 858,
											"end": 890,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 858,
											"end": 890,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 904,
											"end": 912,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 922,
											"end": 924,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 915,
											"end": 934,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 915,
											"end": 934,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 915,
											"end": 934,
											"name": "PUSH",
											"source": 9,
											"value": "313CE567"
										},
										{
											"begin": 915,
											"end": 936,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 915,
											"end": 936,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF"
										},
										{
											"begin": 915,
											"end": 936,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 915,
											"end": 936,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 915,
											"end": 936,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 915,
											"end": 936,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 915,
											"end": 936,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "STATICCALL",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 915,
											"end": 936,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 915,
											"end": 936,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 915,
											"end": 936,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "tag",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 915,
											"end": 936,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 915,
											"end": 936,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 915,
											"end": 936,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 915,
											"end": 936,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 915,
											"end": 936,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "41"
										},
										{
											"begin": 915,
											"end": 936,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "38"
										},
										{
											"begin": 915,
											"end": 936,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 915,
											"end": 936,
											"name": "tag",
											"source": 9,
											"value": "41"
										},
										{
											"begin": 915,
											"end": 936,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 904,
											"end": 936,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 904,
											"end": 936,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 409,
											"end": 1022,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 409,
											"end": 1022,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 409,
											"end": 1022,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 409,
											"end": 1022,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 409,
											"end": 1022,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 379,
											"end": 1022,
											"name": "tag",
											"source": 9,
											"value": "12"
										},
										{
											"begin": 379,
											"end": 1022,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 405,
											"end": 408,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 405,
											"end": 408,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 405,
											"end": 408,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "42"
										},
										{
											"begin": 405,
											"end": 408,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 405,
											"end": 408,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "43"
										},
										{
											"begin": 405,
											"end": 408,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 405,
											"end": 408,
											"name": "tag",
											"source": 9,
											"value": "42"
										},
										{
											"begin": 405,
											"end": 408,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 405,
											"end": 408,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 405,
											"end": 408,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 405,
											"end": 408,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 379,
											"end": 1022,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "10"
										},
										{
											"begin": 379,
											"end": 1022,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 379,
											"end": 1022,
											"name": "tag",
											"source": 9,
											"value": "11"
										},
										{
											"begin": 379,
											"end": 1022,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 379,
											"end": 1022,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "SWAP6",
											"source": 9
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 261,
											"end": 1028,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 261,
											"end": 1028,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 88,
											"end": 205,
											"name": "tag",
											"source": 10,
											"value": "45"
										},
										{
											"begin": 88,
											"end": 205,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 197,
											"end": 198,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 195,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 187,
											"end": 199,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 211,
											"end": 328,
											"name": "tag",
											"source": 10,
											"value": "46"
										},
										{
											"begin": 211,
											"end": 328,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 320,
											"end": 321,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 317,
											"end": 318,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 310,
											"end": 322,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 334,
											"end": 451,
											"name": "tag",
											"source": 10,
											"value": "47"
										},
										{
											"begin": 334,
											"end": 451,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 443,
											"end": 444,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 440,
											"end": 441,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 433,
											"end": 445,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 457,
											"end": 574,
											"name": "tag",
											"source": 10,
											"value": "48"
										},
										{
											"begin": 457,
											"end": 574,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 566,
											"end": 567,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 563,
											"end": 564,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 556,
											"end": 568,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 580,
											"end": 697,
											"name": "tag",
											"source": 10,
											"value": "49"
										},
										{
											"begin": 580,
											"end": 697,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 689,
											"end": 690,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 686,
											"end": 687,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 679,
											"end": 691,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 719,
											"end": 1286,
											"name": "tag",
											"source": 10,
											"value": "50"
										},
										{
											"begin": 719,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 791,
											"end": 799,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 801,
											"end": 807,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 851,
											"end": 854,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 844,
											"end": 848,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 836,
											"end": 842,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 832,
											"end": 849,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 828,
											"end": 855,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 818,
											"end": 940,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "89"
										},
										{
											"begin": 818,
											"end": 940,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 859,
											"end": 938,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "90"
										},
										{
											"begin": 859,
											"end": 938,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "47"
										},
										{
											"begin": 859,
											"end": 938,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 859,
											"end": 938,
											"name": "tag",
											"source": 10,
											"value": "90"
										},
										{
											"begin": 859,
											"end": 938,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 818,
											"end": 940,
											"name": "tag",
											"source": 10,
											"value": "89"
										},
										{
											"begin": 818,
											"end": 940,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 972,
											"end": 978,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 959,
											"end": 979,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 949,
											"end": 979,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 949,
											"end": 979,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1002,
											"end": 1020,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 994,
											"end": 1000,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 991,
											"end": 1021,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 988,
											"end": 1105,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 988,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "91"
										},
										{
											"begin": 988,
											"end": 1105,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1024,
											"end": 1103,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "92"
										},
										{
											"begin": 1024,
											"end": 1103,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "48"
										},
										{
											"begin": 1024,
											"end": 1103,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1024,
											"end": 1103,
											"name": "tag",
											"source": 10,
											"value": "92"
										},
										{
											"begin": 1024,
											"end": 1103,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 988,
											"end": 1105,
											"name": "tag",
											"source": 10,
											"value": "91"
										},
										{
											"begin": 988,
											"end": 1105,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1138,
											"end": 1142,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1130,
											"end": 1136,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1126,
											"end": 1143,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1114,
											"end": 1143,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1114,
											"end": 1143,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1192,
											"end": 1195,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1184,
											"end": 1188,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1176,
											"end": 1182,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1172,
											"end": 1189,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 1162,
											"end": 1170,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1158,
											"end": 1190,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1155,
											"end": 1196,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 1152,
											"end": 1280,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1152,
											"end": 1280,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "93"
										},
										{
											"begin": 1152,
											"end": 1280,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1199,
											"end": 1278,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "94"
										},
										{
											"begin": 1199,
											"end": 1278,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "49"
										},
										{
											"begin": 1199,
											"end": 1278,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1199,
											"end": 1278,
											"name": "tag",
											"source": 10,
											"value": "94"
										},
										{
											"begin": 1199,
											"end": 1278,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1152,
											"end": 1280,
											"name": "tag",
											"source": 10,
											"value": "93"
										},
										{
											"begin": 1152,
											"end": 1280,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 719,
											"end": 1286,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 719,
											"end": 1286,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 719,
											"end": 1286,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 719,
											"end": 1286,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 719,
											"end": 1286,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 719,
											"end": 1286,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1292,
											"end": 1418,
											"name": "tag",
											"source": 10,
											"value": "51"
										},
										{
											"begin": 1292,
											"end": 1418,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1329,
											"end": 1336,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1369,
											"end": 1411,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1362,
											"end": 1367,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1358,
											"end": 1412,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1347,
											"end": 1412,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1347,
											"end": 1412,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1292,
											"end": 1418,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1292,
											"end": 1418,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1292,
											"end": 1418,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1292,
											"end": 1418,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1424,
											"end": 1520,
											"name": "tag",
											"source": 10,
											"value": "52"
										},
										{
											"begin": 1424,
											"end": 1520,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1461,
											"end": 1468,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1490,
											"end": 1514,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "97"
										},
										{
											"begin": 1508,
											"end": 1513,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1490,
											"end": 1514,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "51"
										},
										{
											"begin": 1490,
											"end": 1514,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1490,
											"end": 1514,
											"name": "tag",
											"source": 10,
											"value": "97"
										},
										{
											"begin": 1490,
											"end": 1514,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1479,
											"end": 1514,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1479,
											"end": 1514,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1424,
											"end": 1520,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1424,
											"end": 1520,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1424,
											"end": 1520,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1424,
											"end": 1520,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1526,
											"end": 1648,
											"name": "tag",
											"source": 10,
											"value": "53"
										},
										{
											"begin": 1526,
											"end": 1648,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1599,
											"end": 1623,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "99"
										},
										{
											"begin": 1617,
											"end": 1622,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1599,
											"end": 1623,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "52"
										},
										{
											"begin": 1599,
											"end": 1623,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1599,
											"end": 1623,
											"name": "tag",
											"source": 10,
											"value": "99"
										},
										{
											"begin": 1599,
											"end": 1623,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1592,
											"end": 1597,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1589,
											"end": 1624,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 1579,
											"end": 1642,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 1579,
											"end": 1642,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1638,
											"end": 1639,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1635,
											"end": 1636,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1628,
											"end": 1640,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1579,
											"end": 1642,
											"name": "tag",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 1579,
											"end": 1642,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1526,
											"end": 1648,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1526,
											"end": 1648,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1654,
											"end": 1793,
											"name": "tag",
											"source": 10,
											"value": "54"
										},
										{
											"begin": 1654,
											"end": 1793,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1700,
											"end": 1705,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1738,
											"end": 1744,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1725,
											"end": 1745,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 1716,
											"end": 1745,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1716,
											"end": 1745,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1754,
											"end": 1787,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "102"
										},
										{
											"begin": 1781,
											"end": 1786,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1754,
											"end": 1787,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "53"
										},
										{
											"begin": 1754,
											"end": 1787,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1754,
											"end": 1787,
											"name": "tag",
											"source": 10,
											"value": "102"
										},
										{
											"begin": 1754,
											"end": 1787,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1654,
											"end": 1793,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1654,
											"end": 1793,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1654,
											"end": 1793,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1654,
											"end": 1793,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1654,
											"end": 1793,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1799,
											"end": 2792,
											"name": "tag",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 1799,
											"end": 2792,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1911,
											"end": 1917,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1919,
											"end": 1925,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1927,
											"end": 1933,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1935,
											"end": 1941,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1943,
											"end": 1949,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1992,
											"end": 1995,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 1980,
											"end": 1989,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 1971,
											"end": 1978,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 1967,
											"end": 1990,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1963,
											"end": 1996,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 1960,
											"end": 2080,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1960,
											"end": 2080,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "104"
										},
										{
											"begin": 1960,
											"end": 2080,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1999,
											"end": 2078,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "105"
										},
										{
											"begin": 1999,
											"end": 2078,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "45"
										},
										{
											"begin": 1999,
											"end": 2078,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1999,
											"end": 2078,
											"name": "tag",
											"source": 10,
											"value": "105"
										},
										{
											"begin": 1999,
											"end": 2078,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1960,
											"end": 2080,
											"name": "tag",
											"source": 10,
											"value": "104"
										},
										{
											"begin": 1960,
											"end": 2080,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2147,
											"end": 2148,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2136,
											"end": 2145,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 2132,
											"end": 2149,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2119,
											"end": 2150,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 2177,
											"end": 2195,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2169,
											"end": 2175,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2166,
											"end": 2196,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 2163,
											"end": 2280,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2163,
											"end": 2280,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "106"
										},
										{
											"begin": 2163,
											"end": 2280,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2199,
											"end": 2278,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "107"
										},
										{
											"begin": 2199,
											"end": 2278,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "46"
										},
										{
											"begin": 2199,
											"end": 2278,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2199,
											"end": 2278,
											"name": "tag",
											"source": 10,
											"value": "107"
										},
										{
											"begin": 2199,
											"end": 2278,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2163,
											"end": 2280,
											"name": "tag",
											"source": 10,
											"value": "106"
										},
										{
											"begin": 2163,
											"end": 2280,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2312,
											"end": 2391,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "108"
										},
										{
											"begin": 2383,
											"end": 2390,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 2374,
											"end": 2380,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2363,
											"end": 2372,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 2359,
											"end": 2381,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2312,
											"end": 2391,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "50"
										},
										{
											"begin": 2312,
											"end": 2391,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2312,
											"end": 2391,
											"name": "tag",
											"source": 10,
											"value": "108"
										},
										{
											"begin": 2312,
											"end": 2391,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2294,
											"end": 2391,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 2294,
											"end": 2391,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2294,
											"end": 2391,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 2294,
											"end": 2391,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2090,
											"end": 2401,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2440,
											"end": 2442,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2466,
											"end": 2519,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "109"
										},
										{
											"begin": 2511,
											"end": 2518,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 2502,
											"end": 2508,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2491,
											"end": 2500,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 2487,
											"end": 2509,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2466,
											"end": 2519,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "54"
										},
										{
											"begin": 2466,
											"end": 2519,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2466,
											"end": 2519,
											"name": "tag",
											"source": 10,
											"value": "109"
										},
										{
											"begin": 2466,
											"end": 2519,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2456,
											"end": 2519,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 2456,
											"end": 2519,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2411,
											"end": 2529,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2568,
											"end": 2570,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2594,
											"end": 2647,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "110"
										},
										{
											"begin": 2639,
											"end": 2646,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 2630,
											"end": 2636,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2619,
											"end": 2628,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 2615,
											"end": 2637,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2594,
											"end": 2647,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "54"
										},
										{
											"begin": 2594,
											"end": 2647,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2594,
											"end": 2647,
											"name": "tag",
											"source": 10,
											"value": "110"
										},
										{
											"begin": 2594,
											"end": 2647,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2584,
											"end": 2647,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2584,
											"end": 2647,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2539,
											"end": 2657,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2696,
											"end": 2698,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 2722,
											"end": 2775,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "111"
										},
										{
											"begin": 2767,
											"end": 2774,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 2758,
											"end": 2764,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2747,
											"end": 2756,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 2743,
											"end": 2765,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2722,
											"end": 2775,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "54"
										},
										{
											"begin": 2722,
											"end": 2775,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2722,
											"end": 2775,
											"name": "tag",
											"source": 10,
											"value": "111"
										},
										{
											"begin": 2722,
											"end": 2775,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2712,
											"end": 2775,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2712,
											"end": 2775,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2667,
											"end": 2785,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1799,
											"end": 2792,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1799,
											"end": 2792,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 1799,
											"end": 2792,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1799,
											"end": 2792,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1799,
											"end": 2792,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 1799,
											"end": 2792,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1799,
											"end": 2792,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 1799,
											"end": 2792,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1799,
											"end": 2792,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2798,
											"end": 2875,
											"name": "tag",
											"source": 10,
											"value": "55"
										},
										{
											"begin": 2798,
											"end": 2875,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2835,
											"end": 2842,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2864,
											"end": 2869,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2853,
											"end": 2869,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2853,
											"end": 2869,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2798,
											"end": 2875,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2798,
											"end": 2875,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2798,
											"end": 2875,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2798,
											"end": 2875,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2881,
											"end": 3007,
											"name": "tag",
											"source": 10,
											"value": "56"
										},
										{
											"begin": 2881,
											"end": 3007,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2976,
											"end": 3000,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 2994,
											"end": 2999,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2976,
											"end": 3000,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "55"
										},
										{
											"begin": 2976,
											"end": 3000,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2976,
											"end": 3000,
											"name": "tag",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 2976,
											"end": 3000,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2971,
											"end": 2974,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2964,
											"end": 3001,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2881,
											"end": 3007,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2881,
											"end": 3007,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2881,
											"end": 3007,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3013,
											"end": 3251,
											"name": "tag",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 3013,
											"end": 3251,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3114,
											"end": 3118,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3152,
											"end": 3154,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3141,
											"end": 3150,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3137,
											"end": 3155,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3129,
											"end": 3155,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3129,
											"end": 3155,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3165,
											"end": 3244,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "116"
										},
										{
											"begin": 3241,
											"end": 3242,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3230,
											"end": 3239,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3226,
											"end": 3243,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3217,
											"end": 3223,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 3165,
											"end": 3244,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "56"
										},
										{
											"begin": 3165,
											"end": 3244,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3165,
											"end": 3244,
											"name": "tag",
											"source": 10,
											"value": "116"
										},
										{
											"begin": 3165,
											"end": 3244,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3013,
											"end": 3251,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3013,
											"end": 3251,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3013,
											"end": 3251,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3013,
											"end": 3251,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3013,
											"end": 3251,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3257,
											"end": 3437,
											"name": "tag",
											"source": 10,
											"value": "15"
										},
										{
											"begin": 3257,
											"end": 3437,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3305,
											"end": 3382,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3302,
											"end": 3303,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3295,
											"end": 3383,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3402,
											"end": 3406,
											"name": "PUSH",
											"source": 10,
											"value": "32"
										},
										{
											"begin": 3399,
											"end": 3400,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 3392,
											"end": 3407,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3426,
											"end": 3430,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 3423,
											"end": 3424,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3416,
											"end": 3431,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 3443,
											"end": 3534,
											"name": "tag",
											"source": 10,
											"value": "57"
										},
										{
											"begin": 3443,
											"end": 3534,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3479,
											"end": 3486,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3519,
											"end": 3527,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFF"
										},
										{
											"begin": 3512,
											"end": 3517,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3508,
											"end": 3528,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3497,
											"end": 3528,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3497,
											"end": 3528,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3443,
											"end": 3534,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3443,
											"end": 3534,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3443,
											"end": 3534,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3443,
											"end": 3534,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3540,
											"end": 3660,
											"name": "tag",
											"source": 10,
											"value": "58"
										},
										{
											"begin": 3540,
											"end": 3660,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3612,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "120"
										},
										{
											"begin": 3629,
											"end": 3634,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3612,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "57"
										},
										{
											"begin": 3612,
											"end": 3635,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3612,
											"end": 3635,
											"name": "tag",
											"source": 10,
											"value": "120"
										},
										{
											"begin": 3612,
											"end": 3635,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3605,
											"end": 3610,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3602,
											"end": 3636,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 3592,
											"end": 3654,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "121"
										},
										{
											"begin": 3592,
											"end": 3654,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3650,
											"end": 3651,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3647,
											"end": 3648,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3640,
											"end": 3652,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 3592,
											"end": 3654,
											"name": "tag",
											"source": 10,
											"value": "121"
										},
										{
											"begin": 3592,
											"end": 3654,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3540,
											"end": 3660,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3540,
											"end": 3660,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3666,
											"end": 3803,
											"name": "tag",
											"source": 10,
											"value": "59"
										},
										{
											"begin": 3666,
											"end": 3803,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3711,
											"end": 3716,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3749,
											"end": 3755,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3736,
											"end": 3756,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 3727,
											"end": 3756,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3727,
											"end": 3756,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3765,
											"end": 3797,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "123"
										},
										{
											"begin": 3791,
											"end": 3796,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3765,
											"end": 3797,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "58"
										},
										{
											"begin": 3765,
											"end": 3797,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3765,
											"end": 3797,
											"name": "tag",
											"source": 10,
											"value": "123"
										},
										{
											"begin": 3765,
											"end": 3797,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3666,
											"end": 3803,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3666,
											"end": 3803,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3666,
											"end": 3803,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3666,
											"end": 3803,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3666,
											"end": 3803,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3809,
											"end": 4136,
											"name": "tag",
											"source": 10,
											"value": "17"
										},
										{
											"begin": 3809,
											"end": 4136,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3867,
											"end": 3873,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3916,
											"end": 3918,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3904,
											"end": 3913,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3895,
											"end": 3902,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 3891,
											"end": 3914,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 3887,
											"end": 3919,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 3884,
											"end": 4003,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3884,
											"end": 4003,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "125"
										},
										{
											"begin": 3884,
											"end": 4003,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3922,
											"end": 4001,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "126"
										},
										{
											"begin": 3922,
											"end": 4001,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "45"
										},
										{
											"begin": 3922,
											"end": 4001,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3922,
											"end": 4001,
											"name": "tag",
											"source": 10,
											"value": "126"
										},
										{
											"begin": 3922,
											"end": 4001,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3884,
											"end": 4003,
											"name": "tag",
											"source": 10,
											"value": "125"
										},
										{
											"begin": 3884,
											"end": 4003,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4042,
											"end": 4043,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4067,
											"end": 4119,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "127"
										},
										{
											"begin": 4111,
											"end": 4118,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 4102,
											"end": 4108,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4091,
											"end": 4100,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 4087,
											"end": 4109,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4067,
											"end": 4119,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "59"
										},
										{
											"begin": 4067,
											"end": 4119,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4067,
											"end": 4119,
											"name": "tag",
											"source": 10,
											"value": "127"
										},
										{
											"begin": 4067,
											"end": 4119,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4057,
											"end": 4119,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4057,
											"end": 4119,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4013,
											"end": 4129,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3809,
											"end": 4136,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3809,
											"end": 4136,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3809,
											"end": 4136,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3809,
											"end": 4136,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3809,
											"end": 4136,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4142,
											"end": 4260,
											"name": "tag",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 4142,
											"end": 4260,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4229,
											"end": 4253,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "129"
										},
										{
											"begin": 4247,
											"end": 4252,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4229,
											"end": 4253,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "52"
										},
										{
											"begin": 4229,
											"end": 4253,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4229,
											"end": 4253,
											"name": "tag",
											"source": 10,
											"value": "129"
										},
										{
											"begin": 4229,
											"end": 4253,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4224,
											"end": 4227,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4217,
											"end": 4254,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4142,
											"end": 4260,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4142,
											"end": 4260,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4142,
											"end": 4260,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4266,
											"end": 4381,
											"name": "tag",
											"source": 10,
											"value": "61"
										},
										{
											"begin": 4266,
											"end": 4381,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4351,
											"end": 4374,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "131"
										},
										{
											"begin": 4368,
											"end": 4373,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4351,
											"end": 4374,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "57"
										},
										{
											"begin": 4351,
											"end": 4374,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4351,
											"end": 4374,
											"name": "tag",
											"source": 10,
											"value": "131"
										},
										{
											"begin": 4351,
											"end": 4374,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4346,
											"end": 4349,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4339,
											"end": 4375,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4266,
											"end": 4381,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4266,
											"end": 4381,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4266,
											"end": 4381,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4387,
											"end": 4825,
											"name": "tag",
											"source": 10,
											"value": "19"
										},
										{
											"begin": 4387,
											"end": 4825,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4534,
											"end": 4538,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4572,
											"end": 4574,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 4561,
											"end": 4570,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4557,
											"end": 4575,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4549,
											"end": 4575,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4549,
											"end": 4575,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4585,
											"end": 4656,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "133"
										},
										{
											"begin": 4653,
											"end": 4654,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4642,
											"end": 4651,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4638,
											"end": 4655,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4629,
											"end": 4635,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 4585,
											"end": 4656,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 4585,
											"end": 4656,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4585,
											"end": 4656,
											"name": "tag",
											"source": 10,
											"value": "133"
										},
										{
											"begin": 4585,
											"end": 4656,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4666,
											"end": 4738,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "134"
										},
										{
											"begin": 4734,
											"end": 4736,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4723,
											"end": 4732,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4719,
											"end": 4737,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4710,
											"end": 4716,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 4666,
											"end": 4738,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 4666,
											"end": 4738,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4666,
											"end": 4738,
											"name": "tag",
											"source": 10,
											"value": "134"
										},
										{
											"begin": 4666,
											"end": 4738,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4748,
											"end": 4818,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "135"
										},
										{
											"begin": 4814,
											"end": 4816,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4803,
											"end": 4812,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4799,
											"end": 4817,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4790,
											"end": 4796,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 4748,
											"end": 4818,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "61"
										},
										{
											"begin": 4748,
											"end": 4818,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4748,
											"end": 4818,
											"name": "tag",
											"source": 10,
											"value": "135"
										},
										{
											"begin": 4748,
											"end": 4818,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4387,
											"end": 4825,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 4387,
											"end": 4825,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 4387,
											"end": 4825,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4387,
											"end": 4825,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4387,
											"end": 4825,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4387,
											"end": 4825,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4387,
											"end": 4825,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4831,
											"end": 4974,
											"name": "tag",
											"source": 10,
											"value": "62"
										},
										{
											"begin": 4831,
											"end": 4974,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4888,
											"end": 4893,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4919,
											"end": 4925,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4913,
											"end": 4926,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 4904,
											"end": 4926,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4904,
											"end": 4926,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4935,
											"end": 4968,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "137"
										},
										{
											"begin": 4962,
											"end": 4967,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4935,
											"end": 4968,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "53"
										},
										{
											"begin": 4935,
											"end": 4968,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4935,
											"end": 4968,
											"name": "tag",
											"source": 10,
											"value": "137"
										},
										{
											"begin": 4935,
											"end": 4968,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4831,
											"end": 4974,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4831,
											"end": 4974,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4831,
											"end": 4974,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4831,
											"end": 4974,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4831,
											"end": 4974,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4980,
											"end": 5331,
											"name": "tag",
											"source": 10,
											"value": "23"
										},
										{
											"begin": 4980,
											"end": 5331,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5050,
											"end": 5056,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5099,
											"end": 5101,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5087,
											"end": 5096,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5078,
											"end": 5085,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 5074,
											"end": 5097,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 5070,
											"end": 5102,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 5067,
											"end": 5186,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 5067,
											"end": 5186,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "139"
										},
										{
											"begin": 5067,
											"end": 5186,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 5105,
											"end": 5184,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "140"
										},
										{
											"begin": 5105,
											"end": 5184,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "45"
										},
										{
											"begin": 5105,
											"end": 5184,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5105,
											"end": 5184,
											"name": "tag",
											"source": 10,
											"value": "140"
										},
										{
											"begin": 5105,
											"end": 5184,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5067,
											"end": 5186,
											"name": "tag",
											"source": 10,
											"value": "139"
										},
										{
											"begin": 5067,
											"end": 5186,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5225,
											"end": 5226,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5250,
											"end": 5314,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "141"
										},
										{
											"begin": 5306,
											"end": 5313,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 5297,
											"end": 5303,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5286,
											"end": 5295,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 5282,
											"end": 5304,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5250,
											"end": 5314,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "62"
										},
										{
											"begin": 5250,
											"end": 5314,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5250,
											"end": 5314,
											"name": "tag",
											"source": 10,
											"value": "141"
										},
										{
											"begin": 5250,
											"end": 5314,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5240,
											"end": 5314,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5240,
											"end": 5314,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5196,
											"end": 5324,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4980,
											"end": 5331,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4980,
											"end": 5331,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4980,
											"end": 5331,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4980,
											"end": 5331,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4980,
											"end": 5331,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5337,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 5337,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5374,
											"end": 5381,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5414,
											"end": 5448,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5407,
											"end": 5412,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5403,
											"end": 5449,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5392,
											"end": 5449,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5392,
											"end": 5449,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5337,
											"end": 5455,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5337,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5337,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5337,
											"end": 5455,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5461,
											"end": 5583,
											"name": "tag",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 5461,
											"end": 5583,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5534,
											"end": 5558,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "144"
										},
										{
											"begin": 5552,
											"end": 5557,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5534,
											"end": 5558,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 5534,
											"end": 5558,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5534,
											"end": 5558,
											"name": "tag",
											"source": 10,
											"value": "144"
										},
										{
											"begin": 5534,
											"end": 5558,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5527,
											"end": 5532,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5524,
											"end": 5559,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 5514,
											"end": 5577,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "145"
										},
										{
											"begin": 5514,
											"end": 5577,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 5573,
											"end": 5574,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5570,
											"end": 5571,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5563,
											"end": 5575,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 5514,
											"end": 5577,
											"name": "tag",
											"source": 10,
											"value": "145"
										},
										{
											"begin": 5514,
											"end": 5577,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5461,
											"end": 5583,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5461,
											"end": 5583,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5589,
											"end": 5732,
											"name": "tag",
											"source": 10,
											"value": "65"
										},
										{
											"begin": 5589,
											"end": 5732,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5646,
											"end": 5651,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5677,
											"end": 5683,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5671,
											"end": 5684,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 5662,
											"end": 5684,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5662,
											"end": 5684,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5693,
											"end": 5726,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "147"
										},
										{
											"begin": 5720,
											"end": 5725,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5693,
											"end": 5726,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 5693,
											"end": 5726,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5693,
											"end": 5726,
											"name": "tag",
											"source": 10,
											"value": "147"
										},
										{
											"begin": 5693,
											"end": 5726,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5589,
											"end": 5732,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 5589,
											"end": 5732,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5589,
											"end": 5732,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5589,
											"end": 5732,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5589,
											"end": 5732,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5738,
											"end": 6089,
											"name": "tag",
											"source": 10,
											"value": "28"
										},
										{
											"begin": 5738,
											"end": 6089,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5808,
											"end": 5814,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5857,
											"end": 5859,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5845,
											"end": 5854,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5836,
											"end": 5843,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 5832,
											"end": 5855,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 5828,
											"end": 5860,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 5825,
											"end": 5944,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 5825,
											"end": 5944,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "149"
										},
										{
											"begin": 5825,
											"end": 5944,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 5863,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "150"
										},
										{
											"begin": 5863,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "45"
										},
										{
											"begin": 5863,
											"end": 5942,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5863,
											"end": 5942,
											"name": "tag",
											"source": 10,
											"value": "150"
										},
										{
											"begin": 5863,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5825,
											"end": 5944,
											"name": "tag",
											"source": 10,
											"value": "149"
										},
										{
											"begin": 5825,
											"end": 5944,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5983,
											"end": 5984,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6008,
											"end": 6072,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "151"
										},
										{
											"begin": 6064,
											"end": 6071,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 6055,
											"end": 6061,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6044,
											"end": 6053,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 6040,
											"end": 6062,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6008,
											"end": 6072,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "65"
										},
										{
											"begin": 6008,
											"end": 6072,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6008,
											"end": 6072,
											"name": "tag",
											"source": 10,
											"value": "151"
										},
										{
											"begin": 6008,
											"end": 6072,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5998,
											"end": 6072,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5998,
											"end": 6072,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5954,
											"end": 6082,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5738,
											"end": 6089,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 5738,
											"end": 6089,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5738,
											"end": 6089,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5738,
											"end": 6089,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5738,
											"end": 6089,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6095,
											"end": 6217,
											"name": "tag",
											"source": 10,
											"value": "66"
										},
										{
											"begin": 6095,
											"end": 6217,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6168,
											"end": 6192,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "153"
										},
										{
											"begin": 6186,
											"end": 6191,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6168,
											"end": 6192,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "51"
										},
										{
											"begin": 6168,
											"end": 6192,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6168,
											"end": 6192,
											"name": "tag",
											"source": 10,
											"value": "153"
										},
										{
											"begin": 6168,
											"end": 6192,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6161,
											"end": 6166,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6158,
											"end": 6193,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 6148,
											"end": 6211,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "154"
										},
										{
											"begin": 6148,
											"end": 6211,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 6207,
											"end": 6208,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6204,
											"end": 6205,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6197,
											"end": 6209,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 6148,
											"end": 6211,
											"name": "tag",
											"source": 10,
											"value": "154"
										},
										{
											"begin": 6148,
											"end": 6211,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6095,
											"end": 6217,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6095,
											"end": 6217,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6223,
											"end": 6366,
											"name": "tag",
											"source": 10,
											"value": "67"
										},
										{
											"begin": 6223,
											"end": 6366,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6280,
											"end": 6285,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6311,
											"end": 6317,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6305,
											"end": 6318,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 6296,
											"end": 6318,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6296,
											"end": 6318,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6327,
											"end": 6360,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "156"
										},
										{
											"begin": 6354,
											"end": 6359,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6327,
											"end": 6360,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "66"
										},
										{
											"begin": 6327,
											"end": 6360,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6327,
											"end": 6360,
											"name": "tag",
											"source": 10,
											"value": "156"
										},
										{
											"begin": 6327,
											"end": 6360,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6223,
											"end": 6366,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 6223,
											"end": 6366,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6223,
											"end": 6366,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6223,
											"end": 6366,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6223,
											"end": 6366,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6372,
											"end": 6462,
											"name": "tag",
											"source": 10,
											"value": "68"
										},
										{
											"begin": 6372,
											"end": 6462,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6407,
											"end": 6414,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6450,
											"end": 6455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6447,
											"end": 6448,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 6436,
											"end": 6456,
											"name": "SIGNEXTEND",
											"source": 10
										},
										{
											"begin": 6425,
											"end": 6456,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6425,
											"end": 6456,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6372,
											"end": 6462,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6372,
											"end": 6462,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6372,
											"end": 6462,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6372,
											"end": 6462,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6468,
											"end": 6586,
											"name": "tag",
											"source": 10,
											"value": "69"
										},
										{
											"begin": 6468,
											"end": 6586,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6539,
											"end": 6561,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "159"
										},
										{
											"begin": 6555,
											"end": 6560,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6539,
											"end": 6561,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "68"
										},
										{
											"begin": 6539,
											"end": 6561,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6539,
											"end": 6561,
											"name": "tag",
											"source": 10,
											"value": "159"
										},
										{
											"begin": 6539,
											"end": 6561,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6532,
											"end": 6537,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6529,
											"end": 6562,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 6519,
											"end": 6580,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "160"
										},
										{
											"begin": 6519,
											"end": 6580,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 6576,
											"end": 6577,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6573,
											"end": 6574,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6566,
											"end": 6578,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 6519,
											"end": 6580,
											"name": "tag",
											"source": 10,
											"value": "160"
										},
										{
											"begin": 6519,
											"end": 6580,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6468,
											"end": 6586,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6468,
											"end": 6586,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6592,
											"end": 6731,
											"name": "tag",
											"source": 10,
											"value": "70"
										},
										{
											"begin": 6592,
											"end": 6731,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6647,
											"end": 6652,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6678,
											"end": 6684,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6672,
											"end": 6685,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 6663,
											"end": 6685,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6663,
											"end": 6685,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6694,
											"end": 6725,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "162"
										},
										{
											"begin": 6719,
											"end": 6724,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6694,
											"end": 6725,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "69"
										},
										{
											"begin": 6694,
											"end": 6725,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6694,
											"end": 6725,
											"name": "tag",
											"source": 10,
											"value": "162"
										},
										{
											"begin": 6694,
											"end": 6725,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6592,
											"end": 6731,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 6592,
											"end": 6731,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6592,
											"end": 6731,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6592,
											"end": 6731,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6592,
											"end": 6731,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6737,
											"end": 6826,
											"name": "tag",
											"source": 10,
											"value": "71"
										},
										{
											"begin": 6737,
											"end": 6826,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6773,
											"end": 6780,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6813,
											"end": 6819,
											"name": "PUSH",
											"source": 10,
											"value": "FFFF"
										},
										{
											"begin": 6806,
											"end": 6811,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6802,
											"end": 6820,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 6791,
											"end": 6820,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6791,
											"end": 6820,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6737,
											"end": 6826,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6737,
											"end": 6826,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6737,
											"end": 6826,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6737,
											"end": 6826,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6832,
											"end": 6952,
											"name": "tag",
											"source": 10,
											"value": "72"
										},
										{
											"begin": 6832,
											"end": 6952,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6904,
											"end": 6927,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "165"
										},
										{
											"begin": 6921,
											"end": 6926,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6904,
											"end": 6927,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "71"
										},
										{
											"begin": 6904,
											"end": 6927,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6904,
											"end": 6927,
											"name": "tag",
											"source": 10,
											"value": "165"
										},
										{
											"begin": 6904,
											"end": 6927,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6897,
											"end": 6902,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6894,
											"end": 6928,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 6884,
											"end": 6946,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "166"
										},
										{
											"begin": 6884,
											"end": 6946,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 6942,
											"end": 6943,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6939,
											"end": 6940,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6932,
											"end": 6944,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 6884,
											"end": 6946,
											"name": "tag",
											"source": 10,
											"value": "166"
										},
										{
											"begin": 6884,
											"end": 6946,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6832,
											"end": 6952,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6832,
											"end": 6952,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6958,
											"end": 7099,
											"name": "tag",
											"source": 10,
											"value": "73"
										},
										{
											"begin": 6958,
											"end": 7099,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7014,
											"end": 7019,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7045,
											"end": 7051,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7039,
											"end": 7052,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 7030,
											"end": 7052,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7030,
											"end": 7052,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7061,
											"end": 7093,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "168"
										},
										{
											"begin": 7087,
											"end": 7092,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7061,
											"end": 7093,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "72"
										},
										{
											"begin": 7061,
											"end": 7093,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7061,
											"end": 7093,
											"name": "tag",
											"source": 10,
											"value": "168"
										},
										{
											"begin": 7061,
											"end": 7093,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6958,
											"end": 7099,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 6958,
											"end": 7099,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6958,
											"end": 7099,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6958,
											"end": 7099,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6958,
											"end": 7099,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7105,
											"end": 7191,
											"name": "tag",
											"source": 10,
											"value": "74"
										},
										{
											"begin": 7105,
											"end": 7191,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7140,
											"end": 7147,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7180,
											"end": 7184,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 7173,
											"end": 7178,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7169,
											"end": 7185,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 7158,
											"end": 7185,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7158,
											"end": 7185,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7105,
											"end": 7191,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7105,
											"end": 7191,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7105,
											"end": 7191,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7105,
											"end": 7191,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7197,
											"end": 7315,
											"name": "tag",
											"source": 10,
											"value": "75"
										},
										{
											"begin": 7197,
											"end": 7315,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7268,
											"end": 7290,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "171"
										},
										{
											"begin": 7284,
											"end": 7289,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7268,
											"end": 7290,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "74"
										},
										{
											"begin": 7268,
											"end": 7290,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7268,
											"end": 7290,
											"name": "tag",
											"source": 10,
											"value": "171"
										},
										{
											"begin": 7268,
											"end": 7290,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7261,
											"end": 7266,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7258,
											"end": 7291,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 7248,
											"end": 7309,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "172"
										},
										{
											"begin": 7248,
											"end": 7309,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 7305,
											"end": 7306,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7302,
											"end": 7303,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7295,
											"end": 7307,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 7248,
											"end": 7309,
											"name": "tag",
											"source": 10,
											"value": "172"
										},
										{
											"begin": 7248,
											"end": 7309,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7197,
											"end": 7315,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7197,
											"end": 7315,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7321,
											"end": 7460,
											"name": "tag",
											"source": 10,
											"value": "76"
										},
										{
											"begin": 7321,
											"end": 7460,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7376,
											"end": 7381,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7407,
											"end": 7413,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7401,
											"end": 7414,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 7392,
											"end": 7414,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7392,
											"end": 7414,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7423,
											"end": 7454,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "174"
										},
										{
											"begin": 7448,
											"end": 7453,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7423,
											"end": 7454,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "75"
										},
										{
											"begin": 7423,
											"end": 7454,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7423,
											"end": 7454,
											"name": "tag",
											"source": 10,
											"value": "174"
										},
										{
											"begin": 7423,
											"end": 7454,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7321,
											"end": 7460,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 7321,
											"end": 7460,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7321,
											"end": 7460,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7321,
											"end": 7460,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7321,
											"end": 7460,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7466,
											"end": 7556,
											"name": "tag",
											"source": 10,
											"value": "77"
										},
										{
											"begin": 7466,
											"end": 7556,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7500,
											"end": 7507,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7543,
											"end": 7548,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7536,
											"end": 7549,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 7529,
											"end": 7550,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 7518,
											"end": 7550,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7518,
											"end": 7550,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7466,
											"end": 7556,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7466,
											"end": 7556,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7466,
											"end": 7556,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7466,
											"end": 7556,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7562,
											"end": 7678,
											"name": "tag",
											"source": 10,
											"value": "78"
										},
										{
											"begin": 7562,
											"end": 7678,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7632,
											"end": 7653,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "177"
										},
										{
											"begin": 7647,
											"end": 7652,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7632,
											"end": 7653,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "77"
										},
										{
											"begin": 7632,
											"end": 7653,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7632,
											"end": 7653,
											"name": "tag",
											"source": 10,
											"value": "177"
										},
										{
											"begin": 7632,
											"end": 7653,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7625,
											"end": 7630,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7622,
											"end": 7654,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 7612,
											"end": 7672,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "178"
										},
										{
											"begin": 7612,
											"end": 7672,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 7668,
											"end": 7669,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7665,
											"end": 7666,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7658,
											"end": 7670,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 7612,
											"end": 7672,
											"name": "tag",
											"source": 10,
											"value": "178"
										},
										{
											"begin": 7612,
											"end": 7672,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7562,
											"end": 7678,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7562,
											"end": 7678,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7684,
											"end": 7821,
											"name": "tag",
											"source": 10,
											"value": "79"
										},
										{
											"begin": 7684,
											"end": 7821,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7738,
											"end": 7743,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7769,
											"end": 7775,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7763,
											"end": 7776,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 7754,
											"end": 7776,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7754,
											"end": 7776,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7785,
											"end": 7815,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 7809,
											"end": 7814,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7785,
											"end": 7815,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "78"
										},
										{
											"begin": 7785,
											"end": 7815,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7785,
											"end": 7815,
											"name": "tag",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 7785,
											"end": 7815,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7684,
											"end": 7821,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 7684,
											"end": 7821,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7684,
											"end": 7821,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7684,
											"end": 7821,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7684,
											"end": 7821,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7827,
											"end": 9098,
											"name": "tag",
											"source": 10,
											"value": "33"
										},
										{
											"begin": 7827,
											"end": 9098,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7941,
											"end": 7947,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7949,
											"end": 7955,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7957,
											"end": 7963,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7965,
											"end": 7971,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7973,
											"end": 7979,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7981,
											"end": 7987,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7989,
											"end": 7995,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8038,
											"end": 8041,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 8026,
											"end": 8035,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 8017,
											"end": 8024,
											"name": "DUP11",
											"source": 10
										},
										{
											"begin": 8013,
											"end": 8036,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 8009,
											"end": 8042,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 8006,
											"end": 8126,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 8006,
											"end": 8126,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "182"
										},
										{
											"begin": 8006,
											"end": 8126,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 8045,
											"end": 8124,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "183"
										},
										{
											"begin": 8045,
											"end": 8124,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "45"
										},
										{
											"begin": 8045,
											"end": 8124,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8045,
											"end": 8124,
											"name": "tag",
											"source": 10,
											"value": "183"
										},
										{
											"begin": 8045,
											"end": 8124,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8006,
											"end": 8126,
											"name": "tag",
											"source": 10,
											"value": "182"
										},
										{
											"begin": 8006,
											"end": 8126,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8165,
											"end": 8166,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8190,
											"end": 8254,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "184"
										},
										{
											"begin": 8246,
											"end": 8253,
											"name": "DUP11",
											"source": 10
										},
										{
											"begin": 8237,
											"end": 8243,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8226,
											"end": 8235,
											"name": "DUP12",
											"source": 10
										},
										{
											"begin": 8222,
											"end": 8244,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8190,
											"end": 8254,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "67"
										},
										{
											"begin": 8190,
											"end": 8254,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8190,
											"end": 8254,
											"name": "tag",
											"source": 10,
											"value": "184"
										},
										{
											"begin": 8190,
											"end": 8254,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8180,
											"end": 8254,
											"name": "SWAP8",
											"source": 10
										},
										{
											"begin": 8180,
											"end": 8254,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8136,
											"end": 8264,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8303,
											"end": 8305,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 8329,
											"end": 8391,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "185"
										},
										{
											"begin": 8383,
											"end": 8390,
											"name": "DUP11",
											"source": 10
										},
										{
											"begin": 8374,
											"end": 8380,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8363,
											"end": 8372,
											"name": "DUP12",
											"source": 10
										},
										{
											"begin": 8359,
											"end": 8381,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8329,
											"end": 8391,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "70"
										},
										{
											"begin": 8329,
											"end": 8391,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8329,
											"end": 8391,
											"name": "tag",
											"source": 10,
											"value": "185"
										},
										{
											"begin": 8329,
											"end": 8391,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8319,
											"end": 8391,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": 8319,
											"end": 8391,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8274,
											"end": 8401,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8440,
											"end": 8442,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 8466,
											"end": 8529,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "186"
										},
										{
											"begin": 8521,
											"end": 8528,
											"name": "DUP11",
											"source": 10
										},
										{
											"begin": 8512,
											"end": 8518,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8501,
											"end": 8510,
											"name": "DUP12",
											"source": 10
										},
										{
											"begin": 8497,
											"end": 8519,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8466,
											"end": 8529,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "73"
										},
										{
											"begin": 8466,
											"end": 8529,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8466,
											"end": 8529,
											"name": "tag",
											"source": 10,
											"value": "186"
										},
										{
											"begin": 8466,
											"end": 8529,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8456,
											"end": 8529,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 8456,
											"end": 8529,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8411,
											"end": 8539,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8578,
											"end": 8580,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 8604,
											"end": 8667,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "187"
										},
										{
											"begin": 8659,
											"end": 8666,
											"name": "DUP11",
											"source": 10
										},
										{
											"begin": 8650,
											"end": 8656,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8639,
											"end": 8648,
											"name": "DUP12",
											"source": 10
										},
										{
											"begin": 8635,
											"end": 8657,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8604,
											"end": 8667,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "73"
										},
										{
											"begin": 8604,
											"end": 8667,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8604,
											"end": 8667,
											"name": "tag",
											"source": 10,
											"value": "187"
										},
										{
											"begin": 8604,
											"end": 8667,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8594,
											"end": 8667,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 8594,
											"end": 8667,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8549,
											"end": 8677,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8716,
											"end": 8719,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 8743,
											"end": 8806,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "188"
										},
										{
											"begin": 8798,
											"end": 8805,
											"name": "DUP11",
											"source": 10
										},
										{
											"begin": 8789,
											"end": 8795,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8778,
											"end": 8787,
											"name": "DUP12",
											"source": 10
										},
										{
											"begin": 8774,
											"end": 8796,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8743,
											"end": 8806,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "73"
										},
										{
											"begin": 8743,
											"end": 8806,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8743,
											"end": 8806,
											"name": "tag",
											"source": 10,
											"value": "188"
										},
										{
											"begin": 8743,
											"end": 8806,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8733,
											"end": 8806,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 8733,
											"end": 8806,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8687,
											"end": 8816,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8855,
											"end": 8858,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 8882,
											"end": 8944,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "189"
										},
										{
											"begin": 8936,
											"end": 8943,
											"name": "DUP11",
											"source": 10
										},
										{
											"begin": 8927,
											"end": 8933,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8916,
											"end": 8925,
											"name": "DUP12",
											"source": 10
										},
										{
											"begin": 8912,
											"end": 8934,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8882,
											"end": 8944,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "76"
										},
										{
											"begin": 8882,
											"end": 8944,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8882,
											"end": 8944,
											"name": "tag",
											"source": 10,
											"value": "189"
										},
										{
											"begin": 8882,
											"end": 8944,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8872,
											"end": 8944,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 8872,
											"end": 8944,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8826,
											"end": 8954,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8993,
											"end": 8996,
											"name": "PUSH",
											"source": 10,
											"value": "C0"
										},
										{
											"begin": 9020,
											"end": 9081,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "190"
										},
										{
											"begin": 9073,
											"end": 9080,
											"name": "DUP11",
											"source": 10
										},
										{
											"begin": 9064,
											"end": 9070,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9053,
											"end": 9062,
											"name": "DUP12",
											"source": 10
										},
										{
											"begin": 9049,
											"end": 9071,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9020,
											"end": 9081,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "79"
										},
										{
											"begin": 9020,
											"end": 9081,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9020,
											"end": 9081,
											"name": "tag",
											"source": 10,
											"value": "190"
										},
										{
											"begin": 9020,
											"end": 9081,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9010,
											"end": 9081,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9010,
											"end": 9081,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8964,
											"end": 9091,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7827,
											"end": 9098,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 7827,
											"end": 9098,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 7827,
											"end": 9098,
											"name": "SWAP9",
											"source": 10
										},
										{
											"begin": 7827,
											"end": 9098,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7827,
											"end": 9098,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 7827,
											"end": 9098,
											"name": "SWAP8",
											"source": 10
										},
										{
											"begin": 7827,
											"end": 9098,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7827,
											"end": 9098,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 7827,
											"end": 9098,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 7827,
											"end": 9098,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7827,
											"end": 9098,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9104,
											"end": 9451,
											"name": "tag",
											"source": 10,
											"value": "38"
										},
										{
											"begin": 9104,
											"end": 9451,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9172,
											"end": 9178,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9221,
											"end": 9223,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 9209,
											"end": 9218,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9200,
											"end": 9207,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 9196,
											"end": 9219,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 9192,
											"end": 9224,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 9189,
											"end": 9308,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 9189,
											"end": 9308,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "192"
										},
										{
											"begin": 9189,
											"end": 9308,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 9227,
											"end": 9306,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "193"
										},
										{
											"begin": 9227,
											"end": 9306,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "45"
										},
										{
											"begin": 9227,
											"end": 9306,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9227,
											"end": 9306,
											"name": "tag",
											"source": 10,
											"value": "193"
										},
										{
											"begin": 9227,
											"end": 9306,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9189,
											"end": 9308,
											"name": "tag",
											"source": 10,
											"value": "192"
										},
										{
											"begin": 9189,
											"end": 9308,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9347,
											"end": 9348,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9372,
											"end": 9434,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "194"
										},
										{
											"begin": 9426,
											"end": 9433,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 9417,
											"end": 9423,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9406,
											"end": 9415,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 9402,
											"end": 9424,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9372,
											"end": 9434,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "76"
										},
										{
											"begin": 9372,
											"end": 9434,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9372,
											"end": 9434,
											"name": "tag",
											"source": 10,
											"value": "194"
										},
										{
											"begin": 9372,
											"end": 9434,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9362,
											"end": 9434,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9362,
											"end": 9434,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9318,
											"end": 9444,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9104,
											"end": 9451,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 9104,
											"end": 9451,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9104,
											"end": 9451,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9104,
											"end": 9451,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9104,
											"end": 9451,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9457,
											"end": 9637,
											"name": "tag",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 9457,
											"end": 9637,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9505,
											"end": 9582,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9502,
											"end": 9503,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9495,
											"end": 9583,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9602,
											"end": 9606,
											"name": "PUSH",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 9599,
											"end": 9600,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 9592,
											"end": 9607,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9626,
											"end": 9630,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 9623,
											"end": 9624,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9616,
											"end": 9631,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 9643,
											"end": 9876,
											"name": "tag",
											"source": 10,
											"value": "43"
										},
										{
											"begin": 9643,
											"end": 9876,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9682,
											"end": 9685,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9705,
											"end": 9729,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "197"
										},
										{
											"begin": 9723,
											"end": 9728,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9705,
											"end": 9729,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "55"
										},
										{
											"begin": 9705,
											"end": 9729,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9705,
											"end": 9729,
											"name": "tag",
											"source": 10,
											"value": "197"
										},
										{
											"begin": 9705,
											"end": 9729,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9696,
											"end": 9729,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9696,
											"end": 9729,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9751,
											"end": 9817,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9744,
											"end": 9749,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9741,
											"end": 9818,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 9738,
											"end": 9841,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "198"
										},
										{
											"begin": 9738,
											"end": 9841,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 9821,
											"end": 9839,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "199"
										},
										{
											"begin": 9821,
											"end": 9839,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 9821,
											"end": 9839,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9821,
											"end": 9839,
											"name": "tag",
											"source": 10,
											"value": "199"
										},
										{
											"begin": 9821,
											"end": 9839,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9738,
											"end": 9841,
											"name": "tag",
											"source": 10,
											"value": "198"
										},
										{
											"begin": 9738,
											"end": 9841,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9868,
											"end": 9869,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 9861,
											"end": 9866,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9857,
											"end": 9870,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9850,
											"end": 9870,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9850,
											"end": 9870,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9643,
											"end": 9876,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9643,
											"end": 9876,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9643,
											"end": 9876,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9643,
											"end": 9876,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										}
									]
								}
							},
							"sourceList": [
								"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol",
								"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol ",
								"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol",
								"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol",
								"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol",
								"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol",
								"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol",
								"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol",
								"contracts/interfaces/IERC20.sol",
								"contracts/libraries/UniswapV3.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"price(uint24[],address,address,address)": "97d784b1"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint24[]\",\"name\":\"fee\",\"type\":\"uint24[]\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t2\",\"type\":\"address\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/UniswapV3.sol\":\"UniswapV3\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b9379ad954680c44a0bc523b314ae4c4da735f9fe1d02aa56ea5bdba6f1136f2\",\"dweb:/ipfs/QmZXdgQNXKAckrXWz9R3mc47F1fvDvr28a2ewJrwNAw71B\"]},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol \":{\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1c42b9e6f5902ac38dd43e25750939baa7e0c1425dc75afd717c4412731065d5\",\"dweb:/ipfs/QmWaoacnzsucTvBME2o7YgZBZMhaHv7fkj83htHMVWJKWh\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]},\"contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0x8805dd7cbba47cb08fa4390d4e0a1441092c37bc784257b90e511f8db9b5421b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://95e9705057fac0a3e4c8020b9e47ea35bd554a4339256f1b19c4e8f40c8a8f07\",\"dweb:/ipfs/QmZD49CBxmpbPHgEGQP94gQZQEY7dvUMGcF3kVDpxa7Lvc\"]},\"contracts/libraries/UniswapV3.sol\":{\"keccak256\":\"0x536ce2ae321e83ce2b555036ce0604379cc5945965e0f9539a0d92a64dfeeeec\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1cfb6d6dbd829617b2c4d00f33eb0e53888ff0851dc212b788c225c574c0502b\",\"dweb:/ipfs/QmNNE5hiZbJwVPXtbeugABwZ2FsQ7S8wAE11syavLpCm81\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "6321",
				"formattedMessage": "Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\n  --> contracts/libraries/UniswapV3.sol:10:105:\n   |\n10 |     function price(uint24[] calldata fee,address provider,address t1,address t2) external view returns (uint256){\n   |                                                                                                         ^^^^^^^\n\n",
				"message": "Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 368,
					"file": "contracts/libraries/UniswapV3.sol",
					"start": 361
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "2072",
				"formattedMessage": "Warning: Unused local variable.\n  --> contracts/libraries/UniswapV3.sol:24:13:\n   |\n24 |             uint8 d1 = IERC20(t1).decimals();\n   |             ^^^^^^^^\n\n",
				"message": "Unused local variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 866,
					"file": "contracts/libraries/UniswapV3.sol",
					"start": 858
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "2072",
				"formattedMessage": "Warning: Unused local variable.\n  --> contracts/libraries/UniswapV3.sol:25:13:\n   |\n25 |             uint8 d2 = IERC20(t2).decimals();\n   |             ^^^^^^^^\n\n",
				"message": "Unused local variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 912,
					"file": "contracts/libraries/UniswapV3.sol",
					"start": 904
				},
				"type": "Warning"
			}
		],
		"sources": {
			"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol",
					"exportedSymbols": {
						"IUniswapV3Factory": [
							82
						]
					},
					"id": 83,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IUniswapV3Factory",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "71:163:0",
								"text": "@title The interface for the Uniswap V3 Factory\n @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees"
							},
							"fullyImplemented": false,
							"id": 82,
							"linearizedBaseContracts": [
								82
							],
							"name": "IUniswapV3Factory",
							"nameLocation": "244:17:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "268:185:0",
										"text": "@notice Emitted when the owner of the factory is changed\n @param oldOwner The owner before the owner was changed\n @param newOwner The owner after the owner was changed"
									},
									"eventSelector": "b532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c",
									"id": 9,
									"name": "OwnerChanged",
									"nameLocation": "464:12:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 8,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"indexed": true,
												"mutability": "mutable",
												"name": "oldOwner",
												"nameLocation": "493:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 9,
												"src": "477:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "477:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "519:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 9,
												"src": "503:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 6,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "503:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "476:52:0"
									},
									"src": "458:71:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 10,
										"nodeType": "StructuredDocumentation",
										"src": "535:421:0",
										"text": "@notice Emitted when a pool is created\n @param token0 The first token of the pool by address sort order\n @param token1 The second token of the pool by address sort order\n @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n @param tickSpacing The minimum number of ticks between initialized ticks\n @param pool The address of the created pool"
									},
									"eventSelector": "783cca1c0412dd0d695e784568c96da2e9c22ff989357a2e8b1d9b2b4e6b7118",
									"id": 22,
									"name": "PoolCreated",
									"nameLocation": "967:11:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 21,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 12,
												"indexed": true,
												"mutability": "mutable",
												"name": "token0",
												"nameLocation": "1004:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 22,
												"src": "988:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 11,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "988:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "token1",
												"nameLocation": "1036:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 22,
												"src": "1020:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1020:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 16,
												"indexed": true,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "1067:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 22,
												"src": "1052:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 15,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1052:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 18,
												"indexed": false,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nameLocation": "1086:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 22,
												"src": "1080:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 17,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1080:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 20,
												"indexed": false,
												"mutability": "mutable",
												"name": "pool",
												"nameLocation": "1115:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 22,
												"src": "1107:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 19,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1107:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "978:147:0"
									},
									"src": "961:165:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 23,
										"nodeType": "StructuredDocumentation",
										"src": "1132:275:0",
										"text": "@notice Emitted when a new fee amount is enabled for pool creation via the factory\n @param fee The enabled fee, denominated in hundredths of a bip\n @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee"
									},
									"eventSelector": "c66a3fdf07232cdd185febcc6579d408c241b47ae2f9907d84be655141eeaecc",
									"id": 29,
									"name": "FeeAmountEnabled",
									"nameLocation": "1418:16:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 25,
												"indexed": true,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "1450:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 29,
												"src": "1435:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 24,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1435:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 27,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nameLocation": "1469:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 29,
												"src": "1455:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 26,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1455:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1434:47:0"
									},
									"src": "1412:70:0"
								},
								{
									"documentation": {
										"id": 30,
										"nodeType": "StructuredDocumentation",
										"src": "1488:163:0",
										"text": "@notice Returns the current owner of the factory\n @dev Can be changed by the current owner via setOwner\n @return The address of the factory owner"
									},
									"functionSelector": "8da5cb5b",
									"id": 35,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1665:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1670:2:0"
									},
									"returnParameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 33,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 35,
												"src": "1696:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 32,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1696:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1695:9:0"
									},
									"scope": 82,
									"src": "1656:49:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 36,
										"nodeType": "StructuredDocumentation",
										"src": "1711:348:0",
										"text": "@notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n @return The tick spacing"
									},
									"functionSelector": "22afcccb",
									"id": 43,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "feeAmountTickSpacing",
									"nameLocation": "2073:20:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 39,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 38,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "2101:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 43,
												"src": "2094:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 37,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "2094:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2093:12:0"
									},
									"returnParameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 41,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 43,
												"src": "2129:5:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 40,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2129:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2128:7:0"
									},
									"scope": 82,
									"src": "2064:72:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 44,
										"nodeType": "StructuredDocumentation",
										"src": "2142:471:0",
										"text": "@notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n @param tokenA The contract address of either token0 or token1\n @param tokenB The contract address of the other token\n @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n @return pool The pool address"
									},
									"functionSelector": "1698ee82",
									"id": 55,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPool",
									"nameLocation": "2627:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 46,
												"mutability": "mutable",
												"name": "tokenA",
												"nameLocation": "2652:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 55,
												"src": "2644:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 45,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2644:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 48,
												"mutability": "mutable",
												"name": "tokenB",
												"nameLocation": "2676:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 55,
												"src": "2668:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 47,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2668:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 50,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "2699:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 55,
												"src": "2692:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 49,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "2692:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2634:74:0"
									},
									"returnParameters": {
										"id": 54,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 53,
												"mutability": "mutable",
												"name": "pool",
												"nameLocation": "2740:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 55,
												"src": "2732:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 52,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2732:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2731:14:0"
									},
									"scope": 82,
									"src": "2618:128:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 56,
										"nodeType": "StructuredDocumentation",
										"src": "2752:554:0",
										"text": "@notice Creates a pool for the given two tokens and fee\n @param tokenA One of the two tokens in the desired pool\n @param tokenB The other of the two tokens in the desired pool\n @param fee The desired fee for the pool\n @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n are invalid.\n @return pool The address of the newly created pool"
									},
									"functionSelector": "a1671295",
									"id": 67,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createPool",
									"nameLocation": "3320:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 58,
												"mutability": "mutable",
												"name": "tokenA",
												"nameLocation": "3348:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "3340:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 57,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3340:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 60,
												"mutability": "mutable",
												"name": "tokenB",
												"nameLocation": "3372:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "3364:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 59,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3364:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "3395:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "3388:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 61,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "3388:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3330:74:0"
									},
									"returnParameters": {
										"id": 66,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 65,
												"mutability": "mutable",
												"name": "pool",
												"nameLocation": "3431:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "3423:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 64,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3423:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3422:14:0"
									},
									"scope": 82,
									"src": "3311:126:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 68,
										"nodeType": "StructuredDocumentation",
										"src": "3443:144:0",
										"text": "@notice Updates the owner of the factory\n @dev Must be called by the current owner\n @param _owner The new owner of the factory"
									},
									"functionSelector": "13af4035",
									"id": 73,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setOwner",
									"nameLocation": "3601:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 71,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 70,
												"mutability": "mutable",
												"name": "_owner",
												"nameLocation": "3618:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 73,
												"src": "3610:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 69,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3610:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3609:16:0"
									},
									"returnParameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3634:0:0"
									},
									"scope": 82,
									"src": "3592:43:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 74,
										"nodeType": "StructuredDocumentation",
										"src": "3641:326:0",
										"text": "@notice Enables a fee amount with the given tickSpacing\n @dev Fee amounts may never be removed once enabled\n @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount"
									},
									"functionSelector": "8a7c195f",
									"id": 81,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "enableFeeAmount",
									"nameLocation": "3981:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 79,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 76,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "4004:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 81,
												"src": "3997:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 75,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "3997:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 78,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nameLocation": "4015:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 81,
												"src": "4009:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 77,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "4009:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3996:31:0"
									},
									"returnParameters": {
										"id": 80,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4036:0:0"
									},
									"scope": 82,
									"src": "3972:65:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 83,
							"src": "234:3805:0",
							"usedErrors": []
						}
					],
					"src": "45:3995:0"
				},
				"id": 0
			},
			"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol ": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol ",
					"exportedSymbols": {
						"IUniswapV3Pool": [
							104
						],
						"IUniswapV3PoolActions": [
							200
						],
						"IUniswapV3PoolDerivedState": [
							231
						],
						"IUniswapV3PoolEvents": [
							350
						],
						"IUniswapV3PoolImmutables": [
							390
						],
						"IUniswapV3PoolOwnerActions": [
							416
						],
						"IUniswapV3PoolState": [
							524
						]
					},
					"id": 105,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 84,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:1"
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol",
							"file": "./pool/IUniswapV3PoolImmutables.sol",
							"id": 85,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 105,
							"sourceUnit": 391,
							"src": "71:45:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol",
							"file": "./pool/IUniswapV3PoolState.sol",
							"id": 86,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 105,
							"sourceUnit": 525,
							"src": "117:40:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol",
							"file": "./pool/IUniswapV3PoolDerivedState.sol",
							"id": 87,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 105,
							"sourceUnit": 232,
							"src": "158:47:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol",
							"file": "./pool/IUniswapV3PoolActions.sol",
							"id": 88,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 105,
							"sourceUnit": 201,
							"src": "206:42:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol",
							"file": "./pool/IUniswapV3PoolOwnerActions.sol",
							"id": 89,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 105,
							"sourceUnit": 417,
							"src": "249:47:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol",
							"file": "./pool/IUniswapV3PoolEvents.sol",
							"id": 90,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 105,
							"sourceUnit": 351,
							"src": "297:41:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 92,
										"name": "IUniswapV3PoolImmutables",
										"nameLocations": [
											"637:24:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 390,
										"src": "637:24:1"
									},
									"id": 93,
									"nodeType": "InheritanceSpecifier",
									"src": "637:24:1"
								},
								{
									"baseName": {
										"id": 94,
										"name": "IUniswapV3PoolState",
										"nameLocations": [
											"667:19:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 524,
										"src": "667:19:1"
									},
									"id": 95,
									"nodeType": "InheritanceSpecifier",
									"src": "667:19:1"
								},
								{
									"baseName": {
										"id": 96,
										"name": "IUniswapV3PoolDerivedState",
										"nameLocations": [
											"692:26:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 231,
										"src": "692:26:1"
									},
									"id": 97,
									"nodeType": "InheritanceSpecifier",
									"src": "692:26:1"
								},
								{
									"baseName": {
										"id": 98,
										"name": "IUniswapV3PoolActions",
										"nameLocations": [
											"724:21:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 200,
										"src": "724:21:1"
									},
									"id": 99,
									"nodeType": "InheritanceSpecifier",
									"src": "724:21:1"
								},
								{
									"baseName": {
										"id": 100,
										"name": "IUniswapV3PoolOwnerActions",
										"nameLocations": [
											"751:26:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 416,
										"src": "751:26:1"
									},
									"id": 101,
									"nodeType": "InheritanceSpecifier",
									"src": "751:26:1"
								},
								{
									"baseName": {
										"id": 102,
										"name": "IUniswapV3PoolEvents",
										"nameLocations": [
											"783:20:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 350,
										"src": "783:20:1"
									},
									"id": 103,
									"nodeType": "InheritanceSpecifier",
									"src": "783:20:1"
								}
							],
							"canonicalName": "IUniswapV3Pool",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 91,
								"nodeType": "StructuredDocumentation",
								"src": "340:265:1",
								"text": "@title The interface for a Uniswap V3 Pool\n @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n to the ERC20 specification\n @dev The pool interface is broken up into many smaller pieces"
							},
							"fullyImplemented": false,
							"id": 104,
							"linearizedBaseContracts": [
								104,
								350,
								416,
								200,
								231,
								524,
								390
							],
							"name": "IUniswapV3Pool",
							"nameLocation": "615:14:1",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 105,
							"src": "605:203:1",
							"usedErrors": []
						}
					],
					"src": "45:764:1"
				},
				"id": 1
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol",
					"exportedSymbols": {
						"IUniswapV3PoolActions": [
							200
						]
					},
					"id": 201,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 106,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IUniswapV3PoolActions",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 107,
								"nodeType": "StructuredDocumentation",
								"src": "71:102:2",
								"text": "@title Permissionless pool actions\n @notice Contains pool methods that can be called by anyone"
							},
							"fullyImplemented": false,
							"id": 200,
							"linearizedBaseContracts": [
								200
							],
							"name": "IUniswapV3PoolActions",
							"nameLocation": "183:21:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 108,
										"nodeType": "StructuredDocumentation",
										"src": "211:206:2",
										"text": "@notice Sets the initial price for the pool\n @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96"
									},
									"functionSelector": "f637731d",
									"id": 113,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nameLocation": "431:10:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 110,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nameLocation": "450:12:2",
												"nodeType": "VariableDeclaration",
												"scope": 113,
												"src": "442:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 109,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "442:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "441:22:2"
									},
									"returnParameters": {
										"id": 112,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "472:0:2"
									},
									"scope": 200,
									"src": "422:51:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 114,
										"nodeType": "StructuredDocumentation",
										"src": "479:1029:2",
										"text": "@notice Adds liquidity for the given recipient/tickLower/tickUpper position\n @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n on tickLower, tickUpper, the amount of liquidity, and the current price.\n @param recipient The address for which the liquidity will be created\n @param tickLower The lower tick of the position in which to add liquidity\n @param tickUpper The upper tick of the position in which to add liquidity\n @param amount The amount of liquidity to mint\n @param data Any data that should be passed through to the callback\n @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
									},
									"functionSelector": "3c8a7d8d",
									"id": 131,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nameLocation": "1522:4:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 116,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "1544:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 131,
												"src": "1536:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 115,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1536:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 118,
												"mutability": "mutable",
												"name": "tickLower",
												"nameLocation": "1569:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 131,
												"src": "1563:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 117,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1563:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 120,
												"mutability": "mutable",
												"name": "tickUpper",
												"nameLocation": "1594:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 131,
												"src": "1588:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 119,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1588:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 122,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1621:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 131,
												"src": "1613:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 121,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1613:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 124,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1652:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 131,
												"src": "1637:19:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 123,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1637:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1526:136:2"
									},
									"returnParameters": {
										"id": 130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 127,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "1689:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 131,
												"src": "1681:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 126,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1681:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "1706:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 131,
												"src": "1698:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 128,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1698:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1680:34:2"
									},
									"scope": 200,
									"src": "1513:202:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 132,
										"nodeType": "StructuredDocumentation",
										"src": "1721:1053:2",
										"text": "@notice Collects tokens owed to a position\n @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n @param recipient The address which should receive the fees collected\n @param tickLower The lower tick of the position for which to collect fees\n @param tickUpper The upper tick of the position for which to collect fees\n @param amount0Requested How much token0 should be withdrawn from the fees owed\n @param amount1Requested How much token1 should be withdrawn from the fees owed\n @return amount0 The amount of fees collected in token0\n @return amount1 The amount of fees collected in token1"
									},
									"functionSelector": "4f1eb3d8",
									"id": 149,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collect",
									"nameLocation": "2788:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 134,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2813:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "2805:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 133,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2805:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 136,
												"mutability": "mutable",
												"name": "tickLower",
												"nameLocation": "2838:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "2832:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 135,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2832:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 138,
												"mutability": "mutable",
												"name": "tickUpper",
												"nameLocation": "2863:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "2857:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 137,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2857:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 140,
												"mutability": "mutable",
												"name": "amount0Requested",
												"nameLocation": "2890:16:2",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "2882:24:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 139,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2882:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "amount1Requested",
												"nameLocation": "2924:16:2",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "2916:24:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 141,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2916:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2795:151:2"
									},
									"returnParameters": {
										"id": 148,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 145,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "2973:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "2965:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 144,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2965:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 147,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "2990:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "2982:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 146,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2982:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2964:34:2"
									},
									"scope": 200,
									"src": "2779:220:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 150,
										"nodeType": "StructuredDocumentation",
										"src": "3005:631:2",
										"text": "@notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n @dev Fees must be collected separately via a call to #collect\n @param tickLower The lower tick of the position for which to burn liquidity\n @param tickUpper The upper tick of the position for which to burn liquidity\n @param amount How much liquidity to burn\n @return amount0 The amount of token0 sent to the recipient\n @return amount1 The amount of token1 sent to the recipient"
									},
									"functionSelector": "a34123a7",
									"id": 163,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "3650:4:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 152,
												"mutability": "mutable",
												"name": "tickLower",
												"nameLocation": "3670:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 163,
												"src": "3664:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 151,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3664:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 154,
												"mutability": "mutable",
												"name": "tickUpper",
												"nameLocation": "3695:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 163,
												"src": "3689:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 153,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3689:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3722:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 163,
												"src": "3714:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 155,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3714:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3654:80:2"
									},
									"returnParameters": {
										"id": 162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 159,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "3761:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 163,
												"src": "3753:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 158,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3753:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 161,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "3778:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 163,
												"src": "3770:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 160,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3770:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3752:34:2"
									},
									"scope": 200,
									"src": "3641:146:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 164,
										"nodeType": "StructuredDocumentation",
										"src": "3793:1015:2",
										"text": "@notice Swap token0 for token1, or token1 for token0\n @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n @param recipient The address to receive the output of the swap\n @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n value after the swap. If one for zero, the price cannot be greater than this value after the swap\n @param data Any data to be passed through to the callback\n @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
									},
									"functionSelector": "128acb08",
									"id": 181,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "swap",
									"nameLocation": "4822:4:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 175,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "4844:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "4836:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 165,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4836:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 168,
												"mutability": "mutable",
												"name": "zeroForOne",
												"nameLocation": "4868:10:2",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "4863:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 167,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4863:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 170,
												"mutability": "mutable",
												"name": "amountSpecified",
												"nameLocation": "4895:15:2",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "4888:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 169,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "4888:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 172,
												"mutability": "mutable",
												"name": "sqrtPriceLimitX96",
												"nameLocation": "4928:17:2",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "4920:25:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 171,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4920:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 174,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4970:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "4955:19:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 173,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4955:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4826:154:2"
									},
									"returnParameters": {
										"id": 180,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 177,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "5006:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "4999:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 176,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "4999:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 179,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "5022:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "5015:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 178,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "5015:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4998:32:2"
									},
									"scope": 200,
									"src": "4813:218:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 182,
										"nodeType": "StructuredDocumentation",
										"src": "5037:657:2",
										"text": "@notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n with 0 amount{0,1} and sending the donation amount(s) from the callback\n @param recipient The address which will receive the token0 and token1 amounts\n @param amount0 The amount of token0 to send\n @param amount1 The amount of token1 to send\n @param data Any data to be passed through to the callback"
									},
									"functionSelector": "490e6cbc",
									"id": 193,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "flash",
									"nameLocation": "5708:5:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 191,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "5731:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 193,
												"src": "5723:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 183,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5723:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 186,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "5758:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 193,
												"src": "5750:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 185,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5750:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 188,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "5783:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 193,
												"src": "5775:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 187,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5775:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 190,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5815:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 193,
												"src": "5800:19:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 189,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5800:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5713:112:2"
									},
									"returnParameters": {
										"id": 192,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5834:0:2"
									},
									"scope": 200,
									"src": "5699:136:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 194,
										"nodeType": "StructuredDocumentation",
										"src": "5841:367:2",
										"text": "@notice Increase the maximum number of price and liquidity observations that this pool will store\n @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n the input observationCardinalityNext.\n @param observationCardinalityNext The desired minimum number of observations for the pool to store"
									},
									"functionSelector": "32148f67",
									"id": 199,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increaseObservationCardinalityNext",
									"nameLocation": "6222:34:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 197,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "observationCardinalityNext",
												"nameLocation": "6264:26:2",
												"nodeType": "VariableDeclaration",
												"scope": 199,
												"src": "6257:33:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 195,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "6257:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6256:35:2"
									},
									"returnParameters": {
										"id": 198,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6300:0:2"
									},
									"scope": 200,
									"src": "6213:88:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 201,
							"src": "173:6130:2",
							"usedErrors": []
						}
					],
					"src": "45:6259:2"
				},
				"id": 2
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol",
					"exportedSymbols": {
						"IUniswapV3PoolDerivedState": [
							231
						]
					},
					"id": 232,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 202,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IUniswapV3PoolDerivedState",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 203,
								"nodeType": "StructuredDocumentation",
								"src": "71:222:3",
								"text": "@title Pool state that is not stored\n @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n blockchain. The functions here may have variable gas costs."
							},
							"fullyImplemented": false,
							"id": 231,
							"linearizedBaseContracts": [
								231
							],
							"name": "IUniswapV3PoolDerivedState",
							"nameLocation": "303:26:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 204,
										"nodeType": "StructuredDocumentation",
										"src": "336:1045:3",
										"text": "@notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n you must call it with secondsAgos = [3600, 0].\n @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n timestamp"
									},
									"functionSelector": "883bdbfd",
									"id": 216,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "observe",
									"nameLocation": "1395:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 208,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 207,
												"mutability": "mutable",
												"name": "secondsAgos",
												"nameLocation": "1421:11:3",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "1403:29:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint32_$dyn_calldata_ptr",
													"typeString": "uint32[]"
												},
												"typeName": {
													"baseType": {
														"id": 205,
														"name": "uint32",
														"nodeType": "ElementaryTypeName",
														"src": "1403:6:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"id": 206,
													"nodeType": "ArrayTypeName",
													"src": "1403:8:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint32_$dyn_storage_ptr",
														"typeString": "uint32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1402:31:3"
									},
									"returnParameters": {
										"id": 215,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 211,
												"mutability": "mutable",
												"name": "tickCumulatives",
												"nameLocation": "1496:15:3",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "1481:30:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_int56_$dyn_memory_ptr",
													"typeString": "int56[]"
												},
												"typeName": {
													"baseType": {
														"id": 209,
														"name": "int56",
														"nodeType": "ElementaryTypeName",
														"src": "1481:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_int56",
															"typeString": "int56"
														}
													},
													"id": 210,
													"nodeType": "ArrayTypeName",
													"src": "1481:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_int56_$dyn_storage_ptr",
														"typeString": "int56[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 214,
												"mutability": "mutable",
												"name": "secondsPerLiquidityCumulativeX128s",
												"nameLocation": "1530:34:3",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "1513:51:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint160_$dyn_memory_ptr",
													"typeString": "uint160[]"
												},
												"typeName": {
													"baseType": {
														"id": 212,
														"name": "uint160",
														"nodeType": "ElementaryTypeName",
														"src": "1513:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"id": 213,
													"nodeType": "ArrayTypeName",
													"src": "1513:9:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint160_$dyn_storage_ptr",
														"typeString": "uint160[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1480:85:3"
									},
									"scope": 231,
									"src": "1386:180:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 217,
										"nodeType": "StructuredDocumentation",
										"src": "1572:771:3",
										"text": "@notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n snapshot is taken and the second snapshot is taken.\n @param tickLower The lower tick of the range\n @param tickUpper The upper tick of the range\n @return tickCumulativeInside The snapshot of the tick accumulator for the range\n @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n @return secondsInside The snapshot of seconds per liquidity for the range"
									},
									"functionSelector": "a38807f2",
									"id": 230,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "snapshotCumulativesInside",
									"nameLocation": "2357:25:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 222,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 219,
												"mutability": "mutable",
												"name": "tickLower",
												"nameLocation": "2389:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "2383:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 218,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2383:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 221,
												"mutability": "mutable",
												"name": "tickUpper",
												"nameLocation": "2406:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "2400:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 220,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2400:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2382:34:3"
									},
									"returnParameters": {
										"id": 229,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 224,
												"mutability": "mutable",
												"name": "tickCumulativeInside",
												"nameLocation": "2483:20:3",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "2477:26:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 223,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "2477:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 226,
												"mutability": "mutable",
												"name": "secondsPerLiquidityInsideX128",
												"nameLocation": "2525:29:3",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "2517:37:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 225,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "2517:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 228,
												"mutability": "mutable",
												"name": "secondsInside",
												"nameLocation": "2575:13:3",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "2568:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 227,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "2568:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2463:135:3"
									},
									"scope": 231,
									"src": "2348:251:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 232,
							"src": "293:2308:3",
							"usedErrors": []
						}
					],
					"src": "45:2557:3"
				},
				"id": 3
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol",
					"exportedSymbols": {
						"IUniswapV3PoolEvents": [
							350
						]
					},
					"id": 351,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 233,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IUniswapV3PoolEvents",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 234,
								"nodeType": "StructuredDocumentation",
								"src": "71:88:4",
								"text": "@title Events emitted by a pool\n @notice Contains all events emitted by the pool"
							},
							"fullyImplemented": true,
							"id": 350,
							"linearizedBaseContracts": [
								350
							],
							"name": "IUniswapV3PoolEvents",
							"nameLocation": "169:20:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 235,
										"nodeType": "StructuredDocumentation",
										"src": "196:344:4",
										"text": "@notice Emitted exactly once by a pool when #initialize is first called on the pool\n @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"
									},
									"eventSelector": "98636036cb66a9c19a37435efc1e90142190214e8abeb821bdba3f2990dd4c95",
									"id": 241,
									"name": "Initialize",
									"nameLocation": "551:10:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 240,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 237,
												"indexed": false,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nameLocation": "570:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 241,
												"src": "562:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 236,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "562:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 239,
												"indexed": false,
												"mutability": "mutable",
												"name": "tick",
												"nameLocation": "590:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 241,
												"src": "584:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 238,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "584:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "561:34:4"
									},
									"src": "545:51:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 242,
										"nodeType": "StructuredDocumentation",
										"src": "602:551:4",
										"text": "@notice Emitted when liquidity is minted for a given position\n @param sender The address that minted the liquidity\n @param owner The owner of the position and recipient of any minted liquidity\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount The amount of liquidity minted to the position range\n @param amount0 How much token0 was required for the minted liquidity\n @param amount1 How much token1 was required for the minted liquidity"
									},
									"eventSelector": "7a53080ba414158be7ec69b987b5fb7d07dee101fe85488f0853ae16239d0bde",
									"id": 258,
									"name": "Mint",
									"nameLocation": "1164:4:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 257,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 244,
												"indexed": false,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "1186:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "1178:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 243,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1178:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 246,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1218:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "1202:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 245,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1202:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 248,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nameLocation": "1247:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "1233:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 247,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1233:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 250,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nameLocation": "1280:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "1266:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 249,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1266:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 252,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1307:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "1299:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 251,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1299:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 254,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "1331:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "1323:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 253,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1323:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 256,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "1356:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "1348:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 255,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1348:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1168:201:4"
									},
									"src": "1158:212:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 259,
										"nodeType": "StructuredDocumentation",
										"src": "1376:493:4",
										"text": "@notice Emitted when fees are collected by the owner of a position\n @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n @param owner The owner of the position for which fees are collected\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount0 The amount of token0 fees collected\n @param amount1 The amount of token1 fees collected"
									},
									"eventSelector": "70935338e69775456a85ddef226c395fb668b63fa0115f5f20610b388e6ca9c0",
									"id": 273,
									"name": "Collect",
									"nameLocation": "1880:7:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 272,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 261,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1913:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "1897:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 260,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1897:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 263,
												"indexed": false,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "1936:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "1928:17:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 262,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1928:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 265,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nameLocation": "1969:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "1955:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 264,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1955:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 267,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nameLocation": "2002:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "1988:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 266,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1988:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 269,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "2029:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "2021:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 268,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2021:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 271,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "2054:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "2046:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 270,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2046:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1887:180:4"
									},
									"src": "1874:194:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 274,
										"nodeType": "StructuredDocumentation",
										"src": "2074:523:4",
										"text": "@notice Emitted when a position's liquidity is removed\n @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n @param owner The owner of the position for which liquidity is removed\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount The amount of liquidity to remove\n @param amount0 The amount of token0 withdrawn\n @param amount1 The amount of token1 withdrawn"
									},
									"eventSelector": "0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c",
									"id": 288,
									"name": "Burn",
									"nameLocation": "2608:4:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 287,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 276,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2638:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 288,
												"src": "2622:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 275,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2622:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 278,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nameLocation": "2667:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 288,
												"src": "2653:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 277,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2653:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 280,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nameLocation": "2700:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 288,
												"src": "2686:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 279,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2686:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 282,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2727:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 288,
												"src": "2719:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 281,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2719:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 284,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "2751:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 288,
												"src": "2743:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 283,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2743:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 286,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "2776:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 288,
												"src": "2768:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 285,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2768:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2612:177:4"
									},
									"src": "2602:188:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 289,
										"nodeType": "StructuredDocumentation",
										"src": "2796:600:4",
										"text": "@notice Emitted by the pool for any swaps between token0 and token1\n @param sender The address that initiated the swap call, and that received the callback\n @param recipient The address that received the output of the swap\n @param amount0 The delta of the token0 balance of the pool\n @param amount1 The delta of the token1 balance of the pool\n @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n @param liquidity The liquidity of the pool after the swap\n @param tick The log base 1.0001 of price of the pool after the swap"
									},
									"eventSelector": "c42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca67",
									"id": 305,
									"name": "Swap",
									"nameLocation": "3407:4:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 304,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 291,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3437:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "3421:22:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 290,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3421:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 293,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "3469:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "3453:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 292,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3453:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 295,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "3495:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "3488:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 294,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "3488:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 297,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "3519:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "3512:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 296,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "3512:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 299,
												"indexed": false,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nameLocation": "3544:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "3536:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 298,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "3536:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 301,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "3574:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "3566:17:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 300,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3566:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 303,
												"indexed": false,
												"mutability": "mutable",
												"name": "tick",
												"nameLocation": "3599:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "3593:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 302,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3593:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3411:198:4"
									},
									"src": "3401:209:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 306,
										"nodeType": "StructuredDocumentation",
										"src": "3616:562:4",
										"text": "@notice Emitted by the pool for any flashes of token0/token1\n @param sender The address that initiated the swap call, and that received the callback\n @param recipient The address that received the tokens from flash\n @param amount0 The amount of token0 that was flashed\n @param amount1 The amount of token1 that was flashed\n @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee"
									},
									"eventSelector": "bdbdb71d7860376ba52b25a5028beea23581364a40522f6bcfb86bb1f2dca633",
									"id": 320,
									"name": "Flash",
									"nameLocation": "4189:5:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 319,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 308,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "4220:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 320,
												"src": "4204:22:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 307,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4204:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 310,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "4252:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 320,
												"src": "4236:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 309,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4236:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 312,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "4279:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 320,
												"src": "4271:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 311,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4271:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 314,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "4304:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 320,
												"src": "4296:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 313,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4296:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 316,
												"indexed": false,
												"mutability": "mutable",
												"name": "paid0",
												"nameLocation": "4329:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 320,
												"src": "4321:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 315,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4321:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 318,
												"indexed": false,
												"mutability": "mutable",
												"name": "paid1",
												"nameLocation": "4352:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 320,
												"src": "4344:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 317,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4344:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4194:169:4"
									},
									"src": "4183:181:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 321,
										"nodeType": "StructuredDocumentation",
										"src": "4370:451:4",
										"text": "@notice Emitted by the pool for increases to the number of observations that can be stored\n @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n just before a mint/swap/burn.\n @param observationCardinalityNextOld The previous value of the next observation cardinality\n @param observationCardinalityNextNew The updated value of the next observation cardinality"
									},
									"eventSelector": "ac49e518f90a358f652e4400164f05a5d8f7e35e7747279bc3a93dbf584e125a",
									"id": 327,
									"name": "IncreaseObservationCardinalityNext",
									"nameLocation": "4832:34:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 326,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 323,
												"indexed": false,
												"mutability": "mutable",
												"name": "observationCardinalityNextOld",
												"nameLocation": "4883:29:4",
												"nodeType": "VariableDeclaration",
												"scope": 327,
												"src": "4876:36:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 322,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "4876:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 325,
												"indexed": false,
												"mutability": "mutable",
												"name": "observationCardinalityNextNew",
												"nameLocation": "4929:29:4",
												"nodeType": "VariableDeclaration",
												"scope": 327,
												"src": "4922:36:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 324,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "4922:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4866:98:4"
									},
									"src": "4826:139:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 328,
										"nodeType": "StructuredDocumentation",
										"src": "4971:370:4",
										"text": "@notice Emitted when the protocol fee is changed by the pool\n @param feeProtocol0Old The previous value of the token0 protocol fee\n @param feeProtocol1Old The previous value of the token1 protocol fee\n @param feeProtocol0New The updated value of the token0 protocol fee\n @param feeProtocol1New The updated value of the token1 protocol fee"
									},
									"eventSelector": "973d8d92bb299f4af6ce49b52a8adb85ae46b9f214c4c4fc06ac77401237b133",
									"id": 338,
									"name": "SetFeeProtocol",
									"nameLocation": "5352:14:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 337,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 330,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol0Old",
												"nameLocation": "5373:15:4",
												"nodeType": "VariableDeclaration",
												"scope": 338,
												"src": "5367:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 329,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5367:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 332,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol1Old",
												"nameLocation": "5396:15:4",
												"nodeType": "VariableDeclaration",
												"scope": 338,
												"src": "5390:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 331,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5390:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 334,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol0New",
												"nameLocation": "5419:15:4",
												"nodeType": "VariableDeclaration",
												"scope": 338,
												"src": "5413:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 333,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5413:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 336,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol1New",
												"nameLocation": "5442:15:4",
												"nodeType": "VariableDeclaration",
												"scope": 338,
												"src": "5436:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 335,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5436:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5366:92:4"
									},
									"src": "5346:113:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 339,
										"nodeType": "StructuredDocumentation",
										"src": "5465:384:4",
										"text": "@notice Emitted when the collected protocol fees are withdrawn by the factory owner\n @param sender The address that collects the protocol fees\n @param recipient The address that receives the collected protocol fees\n @param amount0 The amount of token0 protocol fees that is withdrawn\n @param amount0 The amount of token1 protocol fees that is withdrawn"
									},
									"eventSelector": "596b573906218d3411850b26a6b437d6c4522fdb43d2d2386263f86d50b8b151",
									"id": 349,
									"name": "CollectProtocol",
									"nameLocation": "5860:15:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 348,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 341,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5892:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "5876:22:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 340,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5876:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 343,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "5916:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "5900:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 342,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5900:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 345,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "5935:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "5927:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 344,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5927:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 347,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "5952:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "5944:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 346,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5944:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5875:85:4"
									},
									"src": "5854:107:4"
								}
							],
							"scope": 351,
							"src": "159:5804:4",
							"usedErrors": []
						}
					],
					"src": "45:5919:4"
				},
				"id": 4
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol",
					"exportedSymbols": {
						"IUniswapV3PoolImmutables": [
							390
						]
					},
					"id": 391,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 352,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IUniswapV3PoolImmutables",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 353,
								"nodeType": "StructuredDocumentation",
								"src": "71:153:5",
								"text": "@title Pool state that never changes\n @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values"
							},
							"fullyImplemented": false,
							"id": 390,
							"linearizedBaseContracts": [
								390
							],
							"name": "IUniswapV3PoolImmutables",
							"nameLocation": "234:24:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 354,
										"nodeType": "StructuredDocumentation",
										"src": "265:138:5",
										"text": "@notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n @return The contract address"
									},
									"functionSelector": "c45a0155",
									"id": 359,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "factory",
									"nameLocation": "417:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 355,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "424:2:5"
									},
									"returnParameters": {
										"id": 358,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 357,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "450:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 356,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "450:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "449:9:5"
									},
									"scope": 390,
									"src": "408:51:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 360,
										"nodeType": "StructuredDocumentation",
										"src": "465:113:5",
										"text": "@notice The first of the two tokens of the pool, sorted by address\n @return The token contract address"
									},
									"functionSelector": "0dfe1681",
									"id": 365,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "token0",
									"nameLocation": "592:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 361,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "598:2:5"
									},
									"returnParameters": {
										"id": 364,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 363,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "624:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 362,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "624:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "623:9:5"
									},
									"scope": 390,
									"src": "583:50:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 366,
										"nodeType": "StructuredDocumentation",
										"src": "639:114:5",
										"text": "@notice The second of the two tokens of the pool, sorted by address\n @return The token contract address"
									},
									"functionSelector": "d21220a7",
									"id": 371,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "token1",
									"nameLocation": "767:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 367,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "773:2:5"
									},
									"returnParameters": {
										"id": 370,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 369,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 371,
												"src": "799:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 368,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "799:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "798:9:5"
									},
									"scope": 390,
									"src": "758:50:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 372,
										"nodeType": "StructuredDocumentation",
										"src": "814:84:5",
										"text": "@notice The pool's fee in hundredths of a bip, i.e. 1e-6\n @return The fee"
									},
									"functionSelector": "ddca3f43",
									"id": 377,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "fee",
									"nameLocation": "912:3:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 373,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "915:2:5"
									},
									"returnParameters": {
										"id": 376,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 375,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 377,
												"src": "941:6:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 374,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "941:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "940:8:5"
									},
									"scope": 390,
									"src": "903:46:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 378,
										"nodeType": "StructuredDocumentation",
										"src": "955:358:5",
										"text": "@notice The pool tick spacing\n @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n This value is an int24 to avoid casting even though it is always positive.\n @return The tick spacing"
									},
									"functionSelector": "d0c93a7c",
									"id": 383,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tickSpacing",
									"nameLocation": "1327:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 379,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1338:2:5"
									},
									"returnParameters": {
										"id": 382,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 381,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 383,
												"src": "1364:5:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 380,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1364:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1363:7:5"
									},
									"scope": 390,
									"src": "1318:53:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 384,
										"nodeType": "StructuredDocumentation",
										"src": "1377:363:5",
										"text": "@notice The maximum amount of position liquidity that can use any tick in the range\n @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n @return The max amount of liquidity per tick"
									},
									"functionSelector": "70cf754a",
									"id": 389,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxLiquidityPerTick",
									"nameLocation": "1754:19:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 385,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1773:2:5"
									},
									"returnParameters": {
										"id": 388,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 387,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 389,
												"src": "1799:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 386,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1799:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1798:9:5"
									},
									"scope": 390,
									"src": "1745:63:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 391,
							"src": "224:1586:5",
							"usedErrors": []
						}
					],
					"src": "45:1766:5"
				},
				"id": 5
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol",
					"exportedSymbols": {
						"IUniswapV3PoolOwnerActions": [
							416
						]
					},
					"id": 417,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 392,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IUniswapV3PoolOwnerActions",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 393,
								"nodeType": "StructuredDocumentation",
								"src": "71:116:6",
								"text": "@title Permissioned pool actions\n @notice Contains pool methods that may only be called by the factory owner"
							},
							"fullyImplemented": false,
							"id": 416,
							"linearizedBaseContracts": [
								416
							],
							"name": "IUniswapV3PoolOwnerActions",
							"nameLocation": "197:26:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 394,
										"nodeType": "StructuredDocumentation",
										"src": "230:205:6",
										"text": "@notice Set the denominator of the protocol's % share of the fees\n @param feeProtocol0 new protocol fee for token0 of the pool\n @param feeProtocol1 new protocol fee for token1 of the pool"
									},
									"functionSelector": "8206a4d1",
									"id": 401,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setFeeProtocol",
									"nameLocation": "449:14:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 399,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 396,
												"mutability": "mutable",
												"name": "feeProtocol0",
												"nameLocation": "470:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 401,
												"src": "464:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 395,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "464:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 398,
												"mutability": "mutable",
												"name": "feeProtocol1",
												"nameLocation": "490:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 401,
												"src": "484:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 397,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "484:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "463:40:6"
									},
									"returnParameters": {
										"id": 400,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "512:0:6"
									},
									"scope": 416,
									"src": "440:73:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 402,
										"nodeType": "StructuredDocumentation",
										"src": "519:483:6",
										"text": "@notice Collect the protocol fee accrued to the pool\n @param recipient The address to which collected protocol fees should be sent\n @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n @return amount0 The protocol fee collected in token0\n @return amount1 The protocol fee collected in token1"
									},
									"functionSelector": "85b66729",
									"id": 415,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collectProtocol",
									"nameLocation": "1016:15:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 409,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 404,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "1049:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 415,
												"src": "1041:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 403,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1041:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 406,
												"mutability": "mutable",
												"name": "amount0Requested",
												"nameLocation": "1076:16:6",
												"nodeType": "VariableDeclaration",
												"scope": 415,
												"src": "1068:24:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 405,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1068:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 408,
												"mutability": "mutable",
												"name": "amount1Requested",
												"nameLocation": "1110:16:6",
												"nodeType": "VariableDeclaration",
												"scope": 415,
												"src": "1102:24:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 407,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1102:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1031:101:6"
									},
									"returnParameters": {
										"id": 414,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 411,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "1159:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 415,
												"src": "1151:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 410,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1151:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 413,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "1176:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 415,
												"src": "1168:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 412,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1168:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1150:34:6"
									},
									"scope": 416,
									"src": "1007:178:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 417,
							"src": "187:1000:6",
							"usedErrors": []
						}
					],
					"src": "45:1143:6"
				},
				"id": 6
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol",
					"exportedSymbols": {
						"IUniswapV3PoolState": [
							524
						]
					},
					"id": 525,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 418,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IUniswapV3PoolState",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 419,
								"nodeType": "StructuredDocumentation",
								"src": "71:169:7",
								"text": "@title Pool state that can change\n @notice These methods compose the pool's state, and can change with any frequency including multiple times\n per transaction"
							},
							"fullyImplemented": false,
							"id": 524,
							"linearizedBaseContracts": [
								524
							],
							"name": "IUniswapV3PoolState",
							"nameLocation": "250:19:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 420,
										"nodeType": "StructuredDocumentation",
										"src": "276:1140:7",
										"text": "@notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n when accessed externally.\n @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n tick The current tick of the pool, i.e. according to the last tick transition that was run.\n This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n boundary.\n observationIndex The index of the last oracle observation that was written,\n observationCardinality The current maximum number of observations stored in the pool,\n observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n feeProtocol The protocol fee for both tokens of the pool.\n Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n unlocked Whether the pool is currently locked to reentrancy"
									},
									"functionSelector": "3850c7bd",
									"id": 437,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "slot0",
									"nameLocation": "1430:5:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 421,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1435:2:7"
									},
									"returnParameters": {
										"id": 436,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 423,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nameLocation": "1506:12:7",
												"nodeType": "VariableDeclaration",
												"scope": 437,
												"src": "1498:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 422,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1498:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 425,
												"mutability": "mutable",
												"name": "tick",
												"nameLocation": "1538:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 437,
												"src": "1532:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 424,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1532:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 427,
												"mutability": "mutable",
												"name": "observationIndex",
												"nameLocation": "1563:16:7",
												"nodeType": "VariableDeclaration",
												"scope": 437,
												"src": "1556:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 426,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1556:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 429,
												"mutability": "mutable",
												"name": "observationCardinality",
												"nameLocation": "1600:22:7",
												"nodeType": "VariableDeclaration",
												"scope": 437,
												"src": "1593:29:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 428,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1593:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 431,
												"mutability": "mutable",
												"name": "observationCardinalityNext",
												"nameLocation": "1643:26:7",
												"nodeType": "VariableDeclaration",
												"scope": 437,
												"src": "1636:33:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 430,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1636:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 433,
												"mutability": "mutable",
												"name": "feeProtocol",
												"nameLocation": "1689:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 437,
												"src": "1683:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 432,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1683:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 435,
												"mutability": "mutable",
												"name": "unlocked",
												"nameLocation": "1719:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 437,
												"src": "1714:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 434,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1714:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1484:253:7"
									},
									"scope": 524,
									"src": "1421:317:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 438,
										"nodeType": "StructuredDocumentation",
										"src": "1744:168:7",
										"text": "@notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"
									},
									"functionSelector": "f3058399",
									"id": 443,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "feeGrowthGlobal0X128",
									"nameLocation": "1926:20:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 439,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1946:2:7"
									},
									"returnParameters": {
										"id": 442,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 441,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 443,
												"src": "1972:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 440,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1972:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1971:9:7"
									},
									"scope": 524,
									"src": "1917:64:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 444,
										"nodeType": "StructuredDocumentation",
										"src": "1987:168:7",
										"text": "@notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"
									},
									"functionSelector": "46141319",
									"id": 449,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "feeGrowthGlobal1X128",
									"nameLocation": "2169:20:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 445,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2189:2:7"
									},
									"returnParameters": {
										"id": 448,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 447,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 449,
												"src": "2215:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 446,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2215:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2214:9:7"
									},
									"scope": 524,
									"src": "2160:64:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 450,
										"nodeType": "StructuredDocumentation",
										"src": "2230:147:7",
										"text": "@notice The amounts of token0 and token1 that are owed to the protocol\n @dev Protocol fees will never exceed uint128 max in either token"
									},
									"functionSelector": "1ad8b03b",
									"id": 457,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "protocolFees",
									"nameLocation": "2391:12:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 451,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2403:2:7"
									},
									"returnParameters": {
										"id": 456,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 453,
												"mutability": "mutable",
												"name": "token0",
												"nameLocation": "2437:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 457,
												"src": "2429:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 452,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2429:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 455,
												"mutability": "mutable",
												"name": "token1",
												"nameLocation": "2453:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 457,
												"src": "2445:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 454,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2445:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2428:32:7"
									},
									"scope": 524,
									"src": "2382:79:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 458,
										"nodeType": "StructuredDocumentation",
										"src": "2467:150:7",
										"text": "@notice The currently in range liquidity available to the pool\n @dev This value has no relationship to the total liquidity across all ticks"
									},
									"functionSelector": "1a686502",
									"id": 463,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "liquidity",
									"nameLocation": "2631:9:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 459,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2640:2:7"
									},
									"returnParameters": {
										"id": 462,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 461,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 463,
												"src": "2666:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 460,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2666:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2665:9:7"
									},
									"scope": 524,
									"src": "2622:53:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 464,
										"nodeType": "StructuredDocumentation",
										"src": "2681:1244:7",
										"text": "@notice Look up information about a specific tick in the pool\n @param tick The tick to look up\n @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n tick upper,\n liquidityNet how much liquidity changes when the pool price crosses the tick,\n feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n secondsOutside the seconds spent on the other side of the tick from the current tick,\n initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n In addition, these values are only relative and must be used only in comparison to previous snapshots for\n a specific position."
									},
									"functionSelector": "f30dba93",
									"id": 485,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ticks",
									"nameLocation": "3939:5:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 467,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 466,
												"mutability": "mutable",
												"name": "tick",
												"nameLocation": "3951:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 485,
												"src": "3945:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 465,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3945:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3944:12:7"
									},
									"returnParameters": {
										"id": 484,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 469,
												"mutability": "mutable",
												"name": "liquidityGross",
												"nameLocation": "4025:14:7",
												"nodeType": "VariableDeclaration",
												"scope": 485,
												"src": "4017:22:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 468,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4017:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 471,
												"mutability": "mutable",
												"name": "liquidityNet",
												"nameLocation": "4060:12:7",
												"nodeType": "VariableDeclaration",
												"scope": 485,
												"src": "4053:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 470,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "4053:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 473,
												"mutability": "mutable",
												"name": "feeGrowthOutside0X128",
												"nameLocation": "4094:21:7",
												"nodeType": "VariableDeclaration",
												"scope": 485,
												"src": "4086:29:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 472,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4086:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 475,
												"mutability": "mutable",
												"name": "feeGrowthOutside1X128",
												"nameLocation": "4137:21:7",
												"nodeType": "VariableDeclaration",
												"scope": 485,
												"src": "4129:29:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 474,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4129:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 477,
												"mutability": "mutable",
												"name": "tickCumulativeOutside",
												"nameLocation": "4178:21:7",
												"nodeType": "VariableDeclaration",
												"scope": 485,
												"src": "4172:27:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 476,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "4172:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 479,
												"mutability": "mutable",
												"name": "secondsPerLiquidityOutsideX128",
												"nameLocation": "4221:30:7",
												"nodeType": "VariableDeclaration",
												"scope": 485,
												"src": "4213:38:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 478,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4213:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 481,
												"mutability": "mutable",
												"name": "secondsOutside",
												"nameLocation": "4272:14:7",
												"nodeType": "VariableDeclaration",
												"scope": 485,
												"src": "4265:21:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 480,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "4265:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 483,
												"mutability": "mutable",
												"name": "initialized",
												"nameLocation": "4305:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 485,
												"src": "4300:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 482,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4300:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4003:323:7"
									},
									"scope": 524,
									"src": "3930:397:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 486,
										"nodeType": "StructuredDocumentation",
										"src": "4333:99:7",
										"text": "@notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
									},
									"functionSelector": "5339c296",
									"id": 493,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tickBitmap",
									"nameLocation": "4446:10:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 489,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 488,
												"mutability": "mutable",
												"name": "wordPosition",
												"nameLocation": "4463:12:7",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "4457:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int16",
													"typeString": "int16"
												},
												"typeName": {
													"id": 487,
													"name": "int16",
													"nodeType": "ElementaryTypeName",
													"src": "4457:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int16",
														"typeString": "int16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4456:20:7"
									},
									"returnParameters": {
										"id": 492,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 491,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "4500:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 490,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4500:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4499:9:7"
									},
									"scope": 524,
									"src": "4437:72:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 494,
										"nodeType": "StructuredDocumentation",
										"src": "4515:700:7",
										"text": "@notice Returns the information about a position by the position's key\n @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n @return _liquidity The amount of liquidity in the position,\n Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
									},
									"functionSelector": "514ea4bf",
									"id": 509,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "positions",
									"nameLocation": "5229:9:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 497,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 496,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "5247:3:7",
												"nodeType": "VariableDeclaration",
												"scope": 509,
												"src": "5239:11:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 495,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5239:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5238:13:7"
									},
									"returnParameters": {
										"id": 508,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 499,
												"mutability": "mutable",
												"name": "_liquidity",
												"nameLocation": "5320:10:7",
												"nodeType": "VariableDeclaration",
												"scope": 509,
												"src": "5312:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 498,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5312:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 501,
												"mutability": "mutable",
												"name": "feeGrowthInside0LastX128",
												"nameLocation": "5352:24:7",
												"nodeType": "VariableDeclaration",
												"scope": 509,
												"src": "5344:32:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 500,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5344:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 503,
												"mutability": "mutable",
												"name": "feeGrowthInside1LastX128",
												"nameLocation": "5398:24:7",
												"nodeType": "VariableDeclaration",
												"scope": 509,
												"src": "5390:32:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 502,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5390:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 505,
												"mutability": "mutable",
												"name": "tokensOwed0",
												"nameLocation": "5444:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 509,
												"src": "5436:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 504,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5436:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 507,
												"mutability": "mutable",
												"name": "tokensOwed1",
												"nameLocation": "5477:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 509,
												"src": "5469:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 506,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5469:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5298:200:7"
									},
									"scope": 524,
									"src": "5220:279:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 510,
										"nodeType": "StructuredDocumentation",
										"src": "5505:749:7",
										"text": "@notice Returns data about a specific observation index\n @param index The element of the observations array to fetch\n @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n ago, rather than at a specific index in the array.\n @return blockTimestamp The timestamp of the observation,\n Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n Returns initialized whether the observation has been initialized and the values are safe to use"
									},
									"functionSelector": "252c09d7",
									"id": 523,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "observations",
									"nameLocation": "6268:12:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 513,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 512,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "6289:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 523,
												"src": "6281:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 511,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6281:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6280:15:7"
									},
									"returnParameters": {
										"id": 522,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 515,
												"mutability": "mutable",
												"name": "blockTimestamp",
												"nameLocation": "6363:14:7",
												"nodeType": "VariableDeclaration",
												"scope": 523,
												"src": "6356:21:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 514,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "6356:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 517,
												"mutability": "mutable",
												"name": "tickCumulative",
												"nameLocation": "6397:14:7",
												"nodeType": "VariableDeclaration",
												"scope": 523,
												"src": "6391:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 516,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "6391:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 519,
												"mutability": "mutable",
												"name": "secondsPerLiquidityCumulativeX128",
												"nameLocation": "6433:33:7",
												"nodeType": "VariableDeclaration",
												"scope": 523,
												"src": "6425:41:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 518,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "6425:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 521,
												"mutability": "mutable",
												"name": "initialized",
												"nameLocation": "6485:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 523,
												"src": "6480:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 520,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6480:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6342:164:7"
									},
									"scope": 524,
									"src": "6259:248:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 525,
							"src": "240:6269:7",
							"usedErrors": []
						}
					],
					"src": "45:6465:7"
				},
				"id": 7
			},
			"contracts/interfaces/IERC20.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							616
						]
					},
					"id": 617,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 526,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".17"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 616,
							"linearizedBaseContracts": [
								616
							],
							"name": "IERC20",
							"nameLocation": "68:6:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 534,
									"name": "Approval",
									"nameLocation": "87:8:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 533,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 528,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "112:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 534,
												"src": "96:21:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 527,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "96:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 530,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "135:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 534,
												"src": "119:23:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 529,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "119:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 532,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "149:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 534,
												"src": "144:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 531,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "144:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "95:60:8"
									},
									"src": "81:75:8"
								},
								{
									"anonymous": false,
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 542,
									"name": "Transfer",
									"nameLocation": "167:8:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 541,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 536,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "192:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 542,
												"src": "176:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 535,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "176:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 538,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "214:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 542,
												"src": "198:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 537,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "198:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 540,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "223:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 542,
												"src": "218:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 539,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "218:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "175:54:8"
									},
									"src": "161:69:8"
								},
								{
									"functionSelector": "06fdde03",
									"id": 547,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "245:4:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 543,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "249:2:8"
									},
									"returnParameters": {
										"id": 546,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 545,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 547,
												"src": "275:13:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 544,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "275:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "274:15:8"
									},
									"scope": 616,
									"src": "236:54:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "95d89b41",
									"id": 552,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "304:6:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 548,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "310:2:8"
									},
									"returnParameters": {
										"id": 551,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 550,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 552,
												"src": "336:13:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 549,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "336:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "335:15:8"
									},
									"scope": 616,
									"src": "295:56:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "313ce567",
									"id": 557,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "365:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 553,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "373:2:8"
									},
									"returnParameters": {
										"id": 556,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 555,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 557,
												"src": "399:5:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 554,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "399:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "398:7:8"
									},
									"scope": 616,
									"src": "356:50:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "18160ddd",
									"id": 562,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "420:11:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 558,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "431:2:8"
									},
									"returnParameters": {
										"id": 561,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 560,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 562,
												"src": "457:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 559,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "457:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "456:6:8"
									},
									"scope": 616,
									"src": "411:52:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "70a08231",
									"id": 569,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "477:9:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 565,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 564,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "495:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 569,
												"src": "487:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 563,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "487:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "486:15:8"
									},
									"returnParameters": {
										"id": 568,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 567,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 569,
												"src": "525:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 566,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "525:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "524:6:8"
									},
									"scope": 616,
									"src": "468:63:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "dd62ed3e",
									"id": 578,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "545:9:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 574,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 571,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "563:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 578,
												"src": "555:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 570,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "555:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 573,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "578:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 578,
												"src": "570:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 572,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "570:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "554:32:8"
									},
									"returnParameters": {
										"id": 577,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 576,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 578,
												"src": "610:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 575,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "610:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "609:6:8"
									},
									"scope": 616,
									"src": "536:80:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "095ea7b3",
									"id": 587,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "631:7:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 583,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 580,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "647:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 587,
												"src": "639:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 579,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "639:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 582,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "661:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 587,
												"src": "656:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 581,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "656:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "638:29:8"
									},
									"returnParameters": {
										"id": 586,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 585,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 587,
												"src": "686:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 584,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "686:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "685:6:8"
									},
									"scope": 616,
									"src": "622:70:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "a9059cbb",
									"id": 596,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "706:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 592,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 589,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "723:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 596,
												"src": "715:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 588,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "715:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 591,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "732:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 596,
												"src": "727:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 590,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "727:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "714:24:8"
									},
									"returnParameters": {
										"id": 595,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 594,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 596,
												"src": "757:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 593,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "757:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "756:6:8"
									},
									"scope": 616,
									"src": "697:66:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "23b872dd",
									"id": 607,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "777:12:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 603,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 598,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "798:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 607,
												"src": "790:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 597,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "790:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 600,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "812:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 607,
												"src": "804:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 599,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "804:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 602,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "821:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 607,
												"src": "816:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 601,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "816:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "789:38:8"
									},
									"returnParameters": {
										"id": 606,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 605,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 607,
												"src": "846:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 604,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "846:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "845:6:8"
									},
									"scope": 616,
									"src": "768:84:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "d0e30db0",
									"id": 610,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deposit",
									"nameLocation": "866:7:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 608,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "873:2:8"
									},
									"returnParameters": {
										"id": 609,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "892:0:8"
									},
									"scope": 616,
									"src": "857:36:8",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "2e1a7d4d",
									"id": 615,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "withdraw",
									"nameLocation": "907:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 613,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 612,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 615,
												"src": "916:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 611,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "916:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "915:6:8"
									},
									"returnParameters": {
										"id": 614,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "930:0:8"
									},
									"scope": 616,
									"src": "898:33:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 617,
							"src": "58:875:8",
							"usedErrors": []
						}
					],
					"src": "32:901:8"
				},
				"id": 8
			},
			"contracts/libraries/UniswapV3.sol": {
				"ast": {
					"absolutePath": "contracts/libraries/UniswapV3.sol",
					"exportedSymbols": {
						"IERC20": [
							616
						],
						"IUniswapV3Factory": [
							82
						],
						"IUniswapV3Pool": [
							104
						],
						"IUniswapV3PoolActions": [
							200
						],
						"IUniswapV3PoolDerivedState": [
							231
						],
						"IUniswapV3PoolEvents": [
							350
						],
						"IUniswapV3PoolImmutables": [
							390
						],
						"IUniswapV3PoolOwnerActions": [
							416
						],
						"IUniswapV3PoolState": [
							524
						],
						"UniswapV3": [
							716
						]
					},
					"id": 717,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 618,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".17"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:9"
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol",
							"file": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol",
							"id": 619,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 717,
							"sourceUnit": 83,
							"src": "58:69:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol ",
							"file": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol ",
							"id": 620,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 717,
							"sourceUnit": 105,
							"src": "128:67:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/IERC20.sol",
							"file": "../interfaces/IERC20.sol",
							"id": 621,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 717,
							"sourceUnit": 617,
							"src": "196:34:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "UniswapV3",
							"contractDependencies": [],
							"contractKind": "library",
							"fullyImplemented": true,
							"id": 716,
							"linearizedBaseContracts": [
								716
							],
							"name": "UniswapV3",
							"nameLocation": "240:9:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 714,
										"nodeType": "Block",
										"src": "369:659:9",
										"statements": [
											{
												"body": {
													"id": 712,
													"nodeType": "Block",
													"src": "409:613:9",
													"statements": [
														{
															"assignments": [
																647
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 647,
																	"mutability": "mutable",
																	"name": "pool",
																	"nameLocation": "431:4:9",
																	"nodeType": "VariableDeclaration",
																	"scope": 712,
																	"src": "423:12:9",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"typeName": {
																		"id": 646,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "423:7:9",
																		"stateMutability": "nonpayable",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 658,
															"initialValue": {
																"arguments": [
																	{
																		"id": 652,
																		"name": "t1",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 628,
																		"src": "474:2:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 653,
																		"name": "t2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 630,
																		"src": "477:2:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"baseExpression": {
																			"id": 654,
																			"name": "fee",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 624,
																			"src": "480:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_uint24_$dyn_calldata_ptr",
																				"typeString": "uint24[] calldata"
																			}
																		},
																		"id": 656,
																		"indexExpression": {
																			"id": 655,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 636,
																			"src": "484:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "480:6:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint24",
																			"typeString": "uint24"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint24",
																			"typeString": "uint24"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 649,
																				"name": "provider",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 626,
																				"src": "456:8:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 648,
																			"name": "IUniswapV3Factory",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 82,
																			"src": "438:17:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IUniswapV3Factory_$82_$",
																				"typeString": "type(contract IUniswapV3Factory)"
																			}
																		},
																		"id": 650,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "438:27:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IUniswapV3Factory_$82",
																			"typeString": "contract IUniswapV3Factory"
																		}
																	},
																	"id": 651,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "466:7:9",
																	"memberName": "getPool",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 55,
																	"src": "438:35:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$_t_uint24_$returns$_t_address_$",
																		"typeString": "function (address,address,uint24) view external returns (address)"
																	}
																},
																"id": 657,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "438:49:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "423:64:9"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 664,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 659,
																	"name": "pool",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 647,
																	"src": "505:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"arguments": [
																		{
																			"hexValue": "30",
																			"id": 662,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "521:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			}
																		],
																		"id": 661,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "513:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 660,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "513:7:9",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 663,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "513:10:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "505:18:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 667,
															"nodeType": "IfStatement",
															"src": "501:66:9",
															"trueBody": {
																"id": 666,
																"nodeType": "Block",
																"src": "525:42:9",
																"statements": [
																	{
																		"id": 665,
																		"nodeType": "Continue",
																		"src": "543:8:9"
																	}
																]
															}
														},
														{
															"assignments": [
																669
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 669,
																	"mutability": "mutable",
																	"name": "l",
																	"nameLocation": "588:1:9",
																	"nodeType": "VariableDeclaration",
																	"scope": 712,
																	"src": "580:9:9",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	},
																	"typeName": {
																		"id": 668,
																		"name": "uint128",
																		"nodeType": "ElementaryTypeName",
																		"src": "580:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 675,
															"initialValue": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"arguments": [
																			{
																				"id": 671,
																				"name": "pool",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 647,
																				"src": "607:4:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 670,
																			"name": "IUniswapV3Pool",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 104,
																			"src": "592:14:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IUniswapV3Pool_$104_$",
																				"typeString": "type(contract IUniswapV3Pool)"
																			}
																		},
																		"id": 672,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "592:20:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IUniswapV3Pool_$104",
																			"typeString": "contract IUniswapV3Pool"
																		}
																	},
																	"id": 673,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "613:9:9",
																	"memberName": "liquidity",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 463,
																	"src": "592:30:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$__$returns$_t_uint128_$",
																		"typeString": "function () view external returns (uint128)"
																	}
																},
																"id": 674,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "592:32:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "580:44:9"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																},
																"id": 678,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 676,
																	"name": "l",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 669,
																	"src": "642:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 677,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "647:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "642:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 681,
															"nodeType": "IfStatement",
															"src": "638:56:9",
															"trueBody": {
																"id": 680,
																"nodeType": "Block",
																"src": "650:44:9",
																"statements": [
																	{
																		"id": 679,
																		"nodeType": "Continue",
																		"src": "668:8:9"
																	}
																]
															}
														},
														{
															"assignments": [
																683,
																null,
																null,
																null,
																null,
																null,
																null
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 683,
																	"mutability": "mutable",
																	"name": "sqrtPriceX96",
																	"nameLocation": "716:12:9",
																	"nodeType": "VariableDeclaration",
																	"scope": 712,
																	"src": "708:20:9",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	},
																	"typeName": {
																		"id": 682,
																		"name": "uint160",
																		"nodeType": "ElementaryTypeName",
																		"src": "708:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	},
																	"visibility": "internal"
																},
																null,
																null,
																null,
																null,
																null,
																null
															],
															"id": 689,
															"initialValue": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"arguments": [
																			{
																				"id": 685,
																				"name": "pool",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 647,
																				"src": "753:4:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 684,
																			"name": "IUniswapV3Pool",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 104,
																			"src": "738:14:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IUniswapV3Pool_$104_$",
																				"typeString": "type(contract IUniswapV3Pool)"
																			}
																		},
																		"id": 686,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "738:20:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IUniswapV3Pool_$104",
																			"typeString": "contract IUniswapV3Pool"
																		}
																	},
																	"id": 687,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "759:5:9",
																	"memberName": "slot0",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 437,
																	"src": "738:26:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$__$returns$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint8_$_t_bool_$",
																		"typeString": "function () view external returns (uint160,int24,uint16,uint16,uint16,uint8,bool)"
																	}
																},
																"id": 688,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "738:28:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint8_$_t_bool_$",
																	"typeString": "tuple(uint160,int24,uint16,uint16,uint16,uint8,bool)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "707:59:9"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 692,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 690,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 683,
																	"src": "783:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 691,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "799:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "783:17:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 695,
															"nodeType": "IfStatement",
															"src": "780:64:9",
															"trueBody": {
																"id": 694,
																"nodeType": "Block",
																"src": "802:42:9",
																"statements": [
																	{
																		"id": 693,
																		"nodeType": "Continue",
																		"src": "820:8:9"
																	}
																]
															}
														},
														{
															"assignments": [
																697
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 697,
																	"mutability": "mutable",
																	"name": "d1",
																	"nameLocation": "864:2:9",
																	"nodeType": "VariableDeclaration",
																	"scope": 712,
																	"src": "858:8:9",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	"typeName": {
																		"id": 696,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "858:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 703,
															"initialValue": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"arguments": [
																			{
																				"id": 699,
																				"name": "t1",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 628,
																				"src": "876:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 698,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 616,
																			"src": "869:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$616_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 700,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "869:10:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$616",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 701,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "880:8:9",
																	"memberName": "decimals",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 557,
																	"src": "869:19:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$__$returns$_t_uint8_$",
																		"typeString": "function () view external returns (uint8)"
																	}
																},
																"id": 702,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "869:21:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "858:32:9"
														},
														{
															"assignments": [
																705
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 705,
																	"mutability": "mutable",
																	"name": "d2",
																	"nameLocation": "910:2:9",
																	"nodeType": "VariableDeclaration",
																	"scope": 712,
																	"src": "904:8:9",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	"typeName": {
																		"id": 704,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "904:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 711,
															"initialValue": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"arguments": [
																			{
																				"id": 707,
																				"name": "t2",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 630,
																				"src": "922:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 706,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 616,
																			"src": "915:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$616_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 708,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "915:10:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$616",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 709,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "926:8:9",
																	"memberName": "decimals",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 557,
																	"src": "915:19:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$__$returns$_t_uint8_$",
																		"typeString": "function () view external returns (uint8)"
																	}
																},
																"id": 710,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "915:21:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "904:32:9"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 642,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 639,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 636,
														"src": "392:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 640,
															"name": "fee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 624,
															"src": "394:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint24_$dyn_calldata_ptr",
																"typeString": "uint24[] calldata"
															}
														},
														"id": 641,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "398:6:9",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "394:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "392:12:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 713,
												"initializationExpression": {
													"assignments": [
														636
													],
													"declarations": [
														{
															"constant": false,
															"id": 636,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "388:1:9",
															"nodeType": "VariableDeclaration",
															"scope": 713,
															"src": "383:6:9",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 635,
																"name": "uint",
																"nodeType": "ElementaryTypeName",
																"src": "383:4:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 638,
													"initialValue": {
														"hexValue": "30",
														"id": 637,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "390:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "383:8:9"
												},
												"loopExpression": {
													"expression": {
														"id": 644,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "405:3:9",
														"subExpression": {
															"id": 643,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 636,
															"src": "405:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 645,
													"nodeType": "ExpressionStatement",
													"src": "405:3:9"
												},
												"nodeType": "ForStatement",
												"src": "379:643:9"
											}
										]
									},
									"functionSelector": "97d784b1",
									"id": 715,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "price",
									"nameLocation": "270:5:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 631,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 624,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "294:3:9",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "276:21:9",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint24_$dyn_calldata_ptr",
													"typeString": "uint24[]"
												},
												"typeName": {
													"baseType": {
														"id": 622,
														"name": "uint24",
														"nodeType": "ElementaryTypeName",
														"src": "276:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint24",
															"typeString": "uint24"
														}
													},
													"id": 623,
													"nodeType": "ArrayTypeName",
													"src": "276:8:9",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint24_$dyn_storage_ptr",
														"typeString": "uint24[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 626,
												"mutability": "mutable",
												"name": "provider",
												"nameLocation": "306:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "298:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 625,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "298:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 628,
												"mutability": "mutable",
												"name": "t1",
												"nameLocation": "323:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "315:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 627,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "315:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 630,
												"mutability": "mutable",
												"name": "t2",
												"nameLocation": "334:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "326:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 629,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "326:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "275:62:9"
									},
									"returnParameters": {
										"id": 634,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 633,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "361:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 632,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "361:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "360:9:9"
									},
									"scope": 716,
									"src": "261:767:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 717,
							"src": "232:798:9",
							"usedErrors": []
						}
					],
					"src": "32:998:9"
				},
				"id": 9
			}
		}
	}
}