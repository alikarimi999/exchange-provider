{
	"id": "68057eb598aa4863228bea2bd46449f6",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.7.6",
	"solcLongVersion": "0.7.6+commit.7338295f",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/libraries/UniswapV3.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.6;\n\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol';\nimport './OracleLibrary.sol';\n\nimport '../interfaces/IERC20.sol';\n\nlibrary UniswapV3 {\n\n        function Price(address factory,address t0,address t1) external view returns (uint256 price,uint24 fee){\n        uint16[4] memory fees = [100,500,3000,10000];\n        for(uint8 i=0;i<4;i++){\n        address pool = IUniswapV3Factory(factory).getPool(t0,t1,fees[i]);\n        if (pool == address(0)) continue ;\n        \n        uint8 d0 = IERC20(t0).decimals();\n        uint8 d1 = IERC20(t1).decimals();\n        \n        if (IERC20(t0).balanceOf(pool) < 10**d0) continue ;\n        if (IERC20(t1).balanceOf(pool) < 10**d1) continue ; \n\n        int24 tick = OracleLibrary.consult(pool,1);\n        uint256 amountOut = OracleLibrary.getQuoteAtTick(tick,uint128(10**d0),t0,t1);\n        if (i == 0){\n            price = amountOut;\n            fee = fees[i];\n        }\n        if (i > 0 && (price == 0 || amountOut < price)) {\n            price = amountOut;\n            fee = fees[i];\n            }\n        }\n        return (price,fee);\n    }\n\n\n    function PoolExists(address factory,address t0,address t1,uint min0,uint min1) external view returns (bool){\n        uint16[4] memory fees = [100,500,3000,10000];\n        uint16[4] memory fs;\n        for(uint8 i=0;i<4;i++){\n           address pool = IUniswapV3Factory(factory).getPool(t0,t1,fees[i]);\n           if (pool == address(0)) continue ;\n           if (IERC20(t0).balanceOf(pool) < min0) continue ;\n           if (IERC20(t1).balanceOf(pool) < min1) continue ; \n           return true;\n        }\n        return false;\n    }\n\n}\n\n"
			},
			"contracts/interfaces/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function deposit() external payable;\n    function withdraw(uint) external;\n}"
			},
			"contracts/libraries/OracleLibrary.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.6;\n\nimport '@uniswap/v3-core/contracts/libraries/FullMath.sol';\nimport '@uniswap/v3-core/contracts/libraries/TickMath.sol';\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\n\nlibrary OracleLibrary {\n  function consult(address pool, uint32 secondsAgo)\n        internal\n        view\n        returns (int24 tick)\n    {\n        require(secondsAgo != 0, 'BP');\n\n        uint32[] memory secondsAgos = new uint32[](2);\n        secondsAgos[0] = secondsAgo;\n        secondsAgos[1] = 0;\n\n        (int56[] memory tickCumulatives, ) =\n            IUniswapV3Pool(pool).observe(secondsAgos);\n\n        int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\n  \n        tick = int24(tickCumulativesDelta / secondsAgo);\n        // Always round to negative infinity\n        if (tickCumulativesDelta < 0 && (tickCumulativesDelta % secondsAgo != 0)) tick--;\n\n    }\n\n\n    function getQuoteAtTick(\n        int24 tick,\n        uint128 baseAmount,\n        address baseToken,\n        address quoteToken\n    ) internal pure returns (uint256 quoteAmount) {\n        uint160 sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick);\n\n        // Calculate quoteAmount with better precision if it doesn't overflow when multiplied by itself\n        if (sqrtRatioX96 <= type(uint128).max) {\n            uint256 ratioX192 = uint256(sqrtRatioX96) * sqrtRatioX96;\n            quoteAmount = baseToken < quoteToken\n                ? FullMath.mulDiv(ratioX192, baseAmount, 1 << 192)\n                : FullMath.mulDiv(1 << 192, baseAmount, ratioX192);\n        } else {\n            uint256 ratioX128 = FullMath.mulDiv(sqrtRatioX96, sqrtRatioX96, 1 << 64);\n            quoteAmount = baseToken < quoteToken\n                ? FullMath.mulDiv(ratioX128, baseAmount, 1 << 128)\n                : FullMath.mulDiv(1 << 128, baseAmount, ratioX128);\n        }\n    }\n}\n"
			},
			"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title The interface for the Uniswap V3 Factory\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\ninterface IUniswapV3Factory {\n    /// @notice Emitted when the owner of the factory is changed\n    /// @param oldOwner The owner before the owner was changed\n    /// @param newOwner The owner after the owner was changed\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(\n        address indexed token0,\n        address indexed token1,\n        uint24 indexed fee,\n        int24 tickSpacing,\n        address pool\n    );\n\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n    /// @param fee The enabled fee, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n    /// @return The tick spacing\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param fee The desired fee for the pool\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n    /// are invalid.\n    /// @return pool The address of the newly created pool\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external returns (address pool);\n\n    /// @notice Updates the owner of the factory\n    /// @dev Must be called by the current owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Enables a fee amount with the given tickSpacing\n    /// @dev Fee amounts may never be removed once enabled\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n}\n"
			},
			"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\nimport './pool/IUniswapV3PoolDerivedState.sol';\nimport './pool/IUniswapV3PoolActions.sol';\nimport './pool/IUniswapV3PoolOwnerActions.sol';\nimport './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"
			},
			"@uniswap/v3-core/contracts/libraries/TickMath.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0 <0.8.0;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n        require(absTick <= uint256(MAX_TICK), 'T');\n\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n        if (tick > 0) ratio = type(uint256).max / ratio;\n\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        // second inequality must be < because the price can never reach the price at the max tick\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n        uint256 r = ratio;\n        uint256 msb = 0;\n\n        assembly {\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(5, gt(r, 0xFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(4, gt(r, 0xFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(3, gt(r, 0xFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(2, gt(r, 0xF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(1, gt(r, 0x3))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := gt(r, 0x1)\n            msb := or(msb, f)\n        }\n\n        if (msb >= 128) r = ratio >> (msb - 127);\n        else r = ratio << (127 - msb);\n\n        int256 log_2 = (int256(msb) - 128) << 64;\n\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(63, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(62, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(61, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(60, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(59, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(58, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(57, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(56, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(55, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(54, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(53, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(52, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(51, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(50, f))\n        }\n\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n    }\n}\n"
			},
			"@uniswap/v3-core/contracts/libraries/FullMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.0 <0.8.0;\n\n/// @title Contains 512-bit math functions\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\nlibrary FullMath {\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n    function mulDiv(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // 512-bit multiply [prod1 prod0] = a * b\n        // Compute the product mod 2**256 and mod 2**256 - 1\n        // then use the Chinese Remainder Theorem to reconstruct\n        // the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2**256 + prod0\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(a, b, not(0))\n            prod0 := mul(a, b)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        // Handle non-overflow cases, 256 by 256 division\n        if (prod1 == 0) {\n            require(denominator > 0);\n            assembly {\n                result := div(prod0, denominator)\n            }\n            return result;\n        }\n\n        // Make sure the result is less than 2**256.\n        // Also prevents denominator == 0\n        require(denominator > prod1);\n\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n\n        // Make division exact by subtracting the remainder from [prod1 prod0]\n        // Compute remainder using mulmod\n        uint256 remainder;\n        assembly {\n            remainder := mulmod(a, b, denominator)\n        }\n        // Subtract 256 bit number from 512 bit number\n        assembly {\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n\n        // Factor powers of two out of denominator\n        // Compute largest power of two divisor of denominator.\n        // Always >= 1.\n        uint256 twos = -denominator & denominator;\n        // Divide denominator by power of two\n        assembly {\n            denominator := div(denominator, twos)\n        }\n\n        // Divide [prod1 prod0] by the factors of two\n        assembly {\n            prod0 := div(prod0, twos)\n        }\n        // Shift in bits from prod1 into prod0. For this we need\n        // to flip `twos` such that it is 2**256 / twos.\n        // If twos is zero, then it becomes one\n        assembly {\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        prod0 |= prod1 * twos;\n\n        // Invert denominator mod 2**256\n        // Now that denominator is an odd number, it has an inverse\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n        // Compute the inverse by starting with a seed that is correct\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\n        uint256 inv = (3 * denominator) ^ 2;\n        // Now use Newton-Raphson iteration to improve the precision.\n        // Thanks to Hensel's lifting lemma, this also works in modular\n        // arithmetic, doubling the correct bits in each step.\n        inv *= 2 - denominator * inv; // inverse mod 2**8\n        inv *= 2 - denominator * inv; // inverse mod 2**16\n        inv *= 2 - denominator * inv; // inverse mod 2**32\n        inv *= 2 - denominator * inv; // inverse mod 2**64\n        inv *= 2 - denominator * inv; // inverse mod 2**128\n        inv *= 2 - denominator * inv; // inverse mod 2**256\n\n        // Because the division is now exact we can divide by multiplying\n        // with the modular inverse of denominator. This will give us the\n        // correct result modulo 2**256. Since the precoditions guarantee\n        // that the outcome is less than 2**256, this is the final result.\n        // We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inv;\n        return result;\n    }\n\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    function mulDivRoundingUp(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        result = mulDiv(a, b, denominator);\n        if (mulmod(a, b, denominator) > 0) {\n            require(result < type(uint256).max);\n            result++;\n        }\n    }\n}\n"
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol": {
				"IUniswapV3Factory": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								}
							],
							"name": "FeeAmountEnabled",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "oldOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnerChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"name": "PoolCreated",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								}
							],
							"name": "createPool",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								}
							],
							"name": "enableFeeAmount",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								}
							],
							"name": "feeAmountTickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								}
							],
							"name": "getPool",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								}
							],
							"name": "setOwner",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"FeeAmountEnabled(uint24,int24)": {
								"params": {
									"fee": "The enabled fee, denominated in hundredths of a bip",
									"tickSpacing": "The minimum number of ticks between initialized ticks for pools created with the given fee"
								}
							},
							"OwnerChanged(address,address)": {
								"params": {
									"newOwner": "The owner after the owner was changed",
									"oldOwner": "The owner before the owner was changed"
								}
							},
							"PoolCreated(address,address,uint24,int24,address)": {
								"params": {
									"fee": "The fee collected upon every swap in the pool, denominated in hundredths of a bip",
									"pool": "The address of the created pool",
									"tickSpacing": "The minimum number of ticks between initialized ticks",
									"token0": "The first token of the pool by address sort order",
									"token1": "The second token of the pool by address sort order"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"createPool(address,address,uint24)": {
								"details": "tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments are invalid.",
								"params": {
									"fee": "The desired fee for the pool",
									"tokenA": "One of the two tokens in the desired pool",
									"tokenB": "The other of the two tokens in the desired pool"
								},
								"returns": {
									"pool": "The address of the newly created pool"
								}
							},
							"enableFeeAmount(uint24,int24)": {
								"details": "Fee amounts may never be removed once enabled",
								"params": {
									"fee": "The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)",
									"tickSpacing": "The spacing between ticks to be enforced for all pools created with the given fee amount"
								}
							},
							"feeAmountTickSpacing(uint24)": {
								"details": "A fee amount can never be removed, so this value should be hard coded or cached in the calling context",
								"params": {
									"fee": "The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee"
								},
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"getPool(address,address,uint24)": {
								"details": "tokenA and tokenB may be passed in either token0/token1 or token1/token0 order",
								"params": {
									"fee": "The fee collected upon every swap in the pool, denominated in hundredths of a bip",
									"tokenA": "The contract address of either token0 or token1",
									"tokenB": "The contract address of the other token"
								},
								"returns": {
									"pool": "The pool address"
								}
							},
							"owner()": {
								"details": "Can be changed by the current owner via setOwner",
								"returns": {
									"_0": "The address of the factory owner"
								}
							},
							"setOwner(address)": {
								"details": "Must be called by the current owner",
								"params": {
									"_owner": "The new owner of the factory"
								}
							}
						},
						"title": "The interface for the Uniswap V3 Factory",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"createPool(address,address,uint24)": "a1671295",
							"enableFeeAmount(uint24,int24)": "8a7c195f",
							"feeAmountTickSpacing(uint24)": "22afcccb",
							"getPool(address,address,uint24)": "1698ee82",
							"owner()": "8da5cb5b",
							"setOwner(address)": "13af4035"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"}],\"name\":\"FeeAmountEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"}],\"name\":\"enableFeeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"feeAmountTickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"FeeAmountEnabled(uint24,int24)\":{\"params\":{\"fee\":\"The enabled fee, denominated in hundredths of a bip\",\"tickSpacing\":\"The minimum number of ticks between initialized ticks for pools created with the given fee\"}},\"OwnerChanged(address,address)\":{\"params\":{\"newOwner\":\"The owner after the owner was changed\",\"oldOwner\":\"The owner before the owner was changed\"}},\"PoolCreated(address,address,uint24,int24,address)\":{\"params\":{\"fee\":\"The fee collected upon every swap in the pool, denominated in hundredths of a bip\",\"pool\":\"The address of the created pool\",\"tickSpacing\":\"The minimum number of ticks between initialized ticks\",\"token0\":\"The first token of the pool by address sort order\",\"token1\":\"The second token of the pool by address sort order\"}}},\"kind\":\"dev\",\"methods\":{\"createPool(address,address,uint24)\":{\"details\":\"tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments are invalid.\",\"params\":{\"fee\":\"The desired fee for the pool\",\"tokenA\":\"One of the two tokens in the desired pool\",\"tokenB\":\"The other of the two tokens in the desired pool\"},\"returns\":{\"pool\":\"The address of the newly created pool\"}},\"enableFeeAmount(uint24,int24)\":{\"details\":\"Fee amounts may never be removed once enabled\",\"params\":{\"fee\":\"The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\",\"tickSpacing\":\"The spacing between ticks to be enforced for all pools created with the given fee amount\"}},\"feeAmountTickSpacing(uint24)\":{\"details\":\"A fee amount can never be removed, so this value should be hard coded or cached in the calling context\",\"params\":{\"fee\":\"The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\"},\"returns\":{\"_0\":\"The tick spacing\"}},\"getPool(address,address,uint24)\":{\"details\":\"tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\",\"params\":{\"fee\":\"The fee collected upon every swap in the pool, denominated in hundredths of a bip\",\"tokenA\":\"The contract address of either token0 or token1\",\"tokenB\":\"The contract address of the other token\"},\"returns\":{\"pool\":\"The pool address\"}},\"owner()\":{\"details\":\"Can be changed by the current owner via setOwner\",\"returns\":{\"_0\":\"The address of the factory owner\"}},\"setOwner(address)\":{\"details\":\"Must be called by the current owner\",\"params\":{\"_owner\":\"The new owner of the factory\"}}},\"title\":\"The interface for the Uniswap V3 Factory\",\"version\":1},\"userdoc\":{\"events\":{\"FeeAmountEnabled(uint24,int24)\":{\"notice\":\"Emitted when a new fee amount is enabled for pool creation via the factory\"},\"OwnerChanged(address,address)\":{\"notice\":\"Emitted when the owner of the factory is changed\"},\"PoolCreated(address,address,uint24,int24,address)\":{\"notice\":\"Emitted when a pool is created\"}},\"kind\":\"user\",\"methods\":{\"createPool(address,address,uint24)\":{\"notice\":\"Creates a pool for the given two tokens and fee\"},\"enableFeeAmount(uint24,int24)\":{\"notice\":\"Enables a fee amount with the given tickSpacing\"},\"feeAmountTickSpacing(uint24)\":{\"notice\":\"Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\"},\"getPool(address,address,uint24)\":{\"notice\":\"Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\"},\"owner()\":{\"notice\":\"Returns the current owner of the factory\"},\"setOwner(address)\":{\"notice\":\"Updates the owner of the factory\"}},\"notice\":\"The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":\"IUniswapV3Factory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b9379ad954680c44a0bc523b314ae4c4da735f9fe1d02aa56ea5bdba6f1136f2\",\"dweb:/ipfs/QmZXdgQNXKAckrXWz9R3mc47F1fvDvr28a2ewJrwNAw71B\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"FeeAmountEnabled(uint24,int24)": {
								"notice": "Emitted when a new fee amount is enabled for pool creation via the factory"
							},
							"OwnerChanged(address,address)": {
								"notice": "Emitted when the owner of the factory is changed"
							},
							"PoolCreated(address,address,uint24,int24,address)": {
								"notice": "Emitted when a pool is created"
							}
						},
						"kind": "user",
						"methods": {
							"createPool(address,address,uint24)": {
								"notice": "Creates a pool for the given two tokens and fee"
							},
							"enableFeeAmount(uint24,int24)": {
								"notice": "Enables a fee amount with the given tickSpacing"
							},
							"feeAmountTickSpacing(uint24)": {
								"notice": "Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled"
							},
							"getPool(address,address,uint24)": {
								"notice": "Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist"
							},
							"owner()": {
								"notice": "Returns the current owner of the factory"
							},
							"setOwner(address)": {
								"notice": "Updates the owner of the factory"
							}
						},
						"notice": "The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees",
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
				"IUniswapV3Pool": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Burn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "CollectProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid1",
									"type": "uint256"
								}
							],
							"name": "Flash",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextOld",
									"type": "uint16"
								},
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextNew",
									"type": "uint16"
								}
							],
							"name": "IncreaseObservationCardinalityNext",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Initialize",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Mint",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0New",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1New",
									"type": "uint8"
								}
							],
							"name": "SetFeeProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Swap",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collectProtocol",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "fee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal0X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal1X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "flash",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								}
							],
							"name": "increaseObservationCardinalityNext",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "liquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxLiquidityPerTick",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "observations",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "blockTimestamp",
									"type": "uint32"
								},
								{
									"internalType": "int56",
									"name": "tickCumulative",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityCumulativeX128",
									"type": "uint160"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint32[]",
									"name": "secondsAgos",
									"type": "uint32[]"
								}
							],
							"name": "observe",
							"outputs": [
								{
									"internalType": "int56[]",
									"name": "tickCumulatives",
									"type": "int56[]"
								},
								{
									"internalType": "uint160[]",
									"name": "secondsPerLiquidityCumulativeX128s",
									"type": "uint160[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "_liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "protocolFees",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "token0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "token1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint8",
									"name": "feeProtocol0",
									"type": "uint8"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol1",
									"type": "uint8"
								}
							],
							"name": "setFeeProtocol",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "slot0",
							"outputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								},
								{
									"internalType": "uint16",
									"name": "observationIndex",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinality",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol",
									"type": "uint8"
								},
								{
									"internalType": "bool",
									"name": "unlocked",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								}
							],
							"name": "snapshotCumulativesInside",
							"outputs": [
								{
									"internalType": "int56",
									"name": "tickCumulativeInside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityInsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsInside",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "zeroForOne",
									"type": "bool"
								},
								{
									"internalType": "int256",
									"name": "amountSpecified",
									"type": "int256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "swap",
							"outputs": [
								{
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int16",
									"name": "wordPosition",
									"type": "int16"
								}
							],
							"name": "tickBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "ticks",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidityGross",
									"type": "uint128"
								},
								{
									"internalType": "int128",
									"name": "liquidityNet",
									"type": "int128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside0X128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside1X128",
									"type": "uint256"
								},
								{
									"internalType": "int56",
									"name": "tickCumulativeOutside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityOutsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsOutside",
									"type": "uint32"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "The pool interface is broken up into many smaller pieces",
						"kind": "dev",
						"methods": {
							"burn(int24,int24,uint128)": {
								"details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
								"params": {
									"amount": "How much liquidity to burn",
									"tickLower": "The lower tick of the position for which to burn liquidity",
									"tickUpper": "The upper tick of the position for which to burn liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 sent to the recipient",
									"amount1": "The amount of token1 sent to the recipient"
								}
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
								"params": {
									"amount0Requested": "How much token0 should be withdrawn from the fees owed",
									"amount1Requested": "How much token1 should be withdrawn from the fees owed",
									"recipient": "The address which should receive the fees collected",
									"tickLower": "The lower tick of the position for which to collect fees",
									"tickUpper": "The upper tick of the position for which to collect fees"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"collectProtocol(address,uint128,uint128)": {
								"params": {
									"amount0Requested": "The maximum amount of token0 to send, can be 0 to collect fees in only token1",
									"amount1Requested": "The maximum amount of token1 to send, can be 0 to collect fees in only token0",
									"recipient": "The address to which collected protocol fees should be sent"
								},
								"returns": {
									"amount0": "The protocol fee collected in token0",
									"amount1": "The protocol fee collected in token1"
								}
							},
							"factory()": {
								"returns": {
									"_0": "The contract address"
								}
							},
							"fee()": {
								"returns": {
									"_0": "The fee"
								}
							},
							"feeGrowthGlobal0X128()": {
								"details": "This value can overflow the uint256"
							},
							"feeGrowthGlobal1X128()": {
								"details": "This value can overflow the uint256"
							},
							"flash(address,uint256,uint256,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback",
								"params": {
									"amount0": "The amount of token0 to send",
									"amount1": "The amount of token1 to send",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address which will receive the token0 and token1 amounts"
								}
							},
							"increaseObservationCardinalityNext(uint16)": {
								"details": "This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.",
								"params": {
									"observationCardinalityNext": "The desired minimum number of observations for the pool to store"
								}
							},
							"initialize(uint160)": {
								"details": "Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value",
								"params": {
									"sqrtPriceX96": "the initial sqrt price of the pool as a Q64.96"
								}
							},
							"liquidity()": {
								"details": "This value has no relationship to the total liquidity across all ticks"
							},
							"maxLiquidityPerTick()": {
								"details": "This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool",
								"returns": {
									"_0": "The max amount of liquidity per tick"
								}
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.",
								"params": {
									"amount": "The amount of liquidity to mint",
									"data": "Any data that should be passed through to the callback",
									"recipient": "The address for which the liquidity will be created",
									"tickLower": "The lower tick of the position in which to add liquidity",
									"tickUpper": "The upper tick of the position in which to add liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback",
									"amount1": "The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
								}
							},
							"observations(uint256)": {
								"details": "You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.",
								"params": {
									"index": "The element of the observations array to fetch"
								},
								"returns": {
									"blockTimestamp": "The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"
								}
							},
							"observe(uint32[])": {
								"details": "To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.",
								"params": {
									"secondsAgos": "From how long ago each cumulative tick and liquidity value should be returned"
								},
								"returns": {
									"secondsPerLiquidityCumulativeX128s": "Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp",
									"tickCumulatives": "Cumulative tick values as of each `secondsAgos` from the current block timestamp"
								}
							},
							"positions(bytes32)": {
								"params": {
									"key": "The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"
								},
								"returns": {
									"_liquidity": "The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
								}
							},
							"protocolFees()": {
								"details": "Protocol fees will never exceed uint128 max in either token"
							},
							"setFeeProtocol(uint8,uint8)": {
								"params": {
									"feeProtocol0": "new protocol fee for token0 of the pool",
									"feeProtocol1": "new protocol fee for token1 of the pool"
								}
							},
							"slot0()": {
								"returns": {
									"sqrtPriceX96": "The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy"
								}
							},
							"snapshotCumulativesInside(int24,int24)": {
								"details": "Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.",
								"params": {
									"tickLower": "The lower tick of the range",
									"tickUpper": "The upper tick of the range"
								},
								"returns": {
									"secondsInside": "The snapshot of seconds per liquidity for the range",
									"secondsPerLiquidityInsideX128": "The snapshot of seconds per liquidity for the range",
									"tickCumulativeInside": "The snapshot of the tick accumulator for the range"
								}
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback",
								"params": {
									"amountSpecified": "The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address to receive the output of the swap",
									"sqrtPriceLimitX96": "The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap",
									"zeroForOne": "The direction of the swap, true for token0 to token1, false for token1 to token0"
								},
								"returns": {
									"amount0": "The delta of the balance of token0 of the pool, exact when negative, minimum when positive",
									"amount1": "The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
								}
							},
							"tickSpacing()": {
								"details": "Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.",
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"ticks(int24)": {
								"params": {
									"tick": "The tick to look up"
								},
								"returns": {
									"liquidityGross": "the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."
								}
							},
							"token0()": {
								"returns": {
									"_0": "The token contract address"
								}
							},
							"token1()": {
								"returns": {
									"_0": "The token contract address"
								}
							}
						},
						"title": "The interface for a Uniswap V3 Pool",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"burn(int24,int24,uint128)": "a34123a7",
							"collect(address,int24,int24,uint128,uint128)": "4f1eb3d8",
							"collectProtocol(address,uint128,uint128)": "85b66729",
							"factory()": "c45a0155",
							"fee()": "ddca3f43",
							"feeGrowthGlobal0X128()": "f3058399",
							"feeGrowthGlobal1X128()": "46141319",
							"flash(address,uint256,uint256,bytes)": "490e6cbc",
							"increaseObservationCardinalityNext(uint16)": "32148f67",
							"initialize(uint160)": "f637731d",
							"liquidity()": "1a686502",
							"maxLiquidityPerTick()": "70cf754a",
							"mint(address,int24,int24,uint128,bytes)": "3c8a7d8d",
							"observations(uint256)": "252c09d7",
							"observe(uint32[])": "883bdbfd",
							"positions(bytes32)": "514ea4bf",
							"protocolFees()": "1ad8b03b",
							"setFeeProtocol(uint8,uint8)": "8206a4d1",
							"slot0()": "3850c7bd",
							"snapshotCumulativesInside(int24,int24)": "a38807f2",
							"swap(address,bool,int256,uint160,bytes)": "128acb08",
							"tickBitmap(int16)": "5339c296",
							"tickSpacing()": "d0c93a7c",
							"ticks(int24)": "f30dba93",
							"token0()": "0dfe1681",
							"token1()": "d21220a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collectProtocol\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeProtocol0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol1\",\"type\":\"uint8\"}],\"name\":\"setFeeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The pool interface is broken up into many smaller pieces\",\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"collectProtocol(address,uint128,uint128)\":{\"params\":{\"amount0Requested\":\"The maximum amount of token0 to send, can be 0 to collect fees in only token1\",\"amount1Requested\":\"The maximum amount of token1 to send, can be 0 to collect fees in only token0\",\"recipient\":\"The address to which collected protocol fees should be sent\"},\"returns\":{\"amount0\":\"The protocol fee collected in token0\",\"amount1\":\"The protocol fee collected in token1\"}},\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(uint160)\":{\"details\":\"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\",\"params\":{\"sqrtPriceX96\":\"the initial sqrt price of the pool as a Q64.96\"}},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticks\"},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"protocolFees()\":{\"details\":\"Protocol fees will never exceed uint128 max in either token\"},\"setFeeProtocol(uint8,uint8)\":{\"params\":{\"feeProtocol0\":\"new protocol fee for token0 of the pool\",\"feeProtocol1\":\"new protocol fee for token1 of the pool\"}},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"The interface for a Uniswap V3 Pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectProtocol(address,address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the factory owner\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"collectProtocol(address,uint128,uint128)\":{\"notice\":\"Collect the protocol fee accrued to the pool\"},\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(uint160)\":{\"notice\":\"Sets the initial price for the pool\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"protocolFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the protocol\"},\"setFeeProtocol(uint8,uint8)\":{\"notice\":\"Set the denominator of the protocol's % share of the fees\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"notice\":\"A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":\"IUniswapV3Pool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1c42b9e6f5902ac38dd43e25750939baa7e0c1425dc75afd717c4412731065d5\",\"dweb:/ipfs/QmWaoacnzsucTvBME2o7YgZBZMhaHv7fkj83htHMVWJKWh\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when a position's liquidity is removed"
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"notice": "Emitted when fees are collected by the owner of a position"
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"notice": "Emitted when the collected protocol fees are withdrawn by the factory owner"
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"notice": "Emitted by the pool for any flashes of token0/token1"
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"notice": "Emitted by the pool for increases to the number of observations that can be stored"
							},
							"Initialize(uint160,int24)": {
								"notice": "Emitted exactly once by a pool when #initialize is first called on the pool"
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is minted for a given position"
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"notice": "Emitted when the protocol fee is changed by the pool"
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"notice": "Emitted by the pool for any swaps between token0 and token1"
							}
						},
						"kind": "user",
						"methods": {
							"burn(int24,int24,uint128)": {
								"notice": "Burn liquidity from the sender and account tokens owed for the liquidity to the position"
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"notice": "Collects tokens owed to a position"
							},
							"collectProtocol(address,uint128,uint128)": {
								"notice": "Collect the protocol fee accrued to the pool"
							},
							"factory()": {
								"notice": "The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface"
							},
							"fee()": {
								"notice": "The pool's fee in hundredths of a bip, i.e. 1e-6"
							},
							"feeGrowthGlobal0X128()": {
								"notice": "The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"
							},
							"feeGrowthGlobal1X128()": {
								"notice": "The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"
							},
							"flash(address,uint256,uint256,bytes)": {
								"notice": "Receive token0 and/or token1 and pay it back, plus a fee, in the callback"
							},
							"increaseObservationCardinalityNext(uint16)": {
								"notice": "Increase the maximum number of price and liquidity observations that this pool will store"
							},
							"initialize(uint160)": {
								"notice": "Sets the initial price for the pool"
							},
							"liquidity()": {
								"notice": "The currently in range liquidity available to the pool"
							},
							"maxLiquidityPerTick()": {
								"notice": "The maximum amount of position liquidity that can use any tick in the range"
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"notice": "Adds liquidity for the given recipient/tickLower/tickUpper position"
							},
							"observations(uint256)": {
								"notice": "Returns data about a specific observation index"
							},
							"observe(uint32[])": {
								"notice": "Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"
							},
							"positions(bytes32)": {
								"notice": "Returns the information about a position by the position's key"
							},
							"protocolFees()": {
								"notice": "The amounts of token0 and token1 that are owed to the protocol"
							},
							"setFeeProtocol(uint8,uint8)": {
								"notice": "Set the denominator of the protocol's % share of the fees"
							},
							"slot0()": {
								"notice": "The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."
							},
							"snapshotCumulativesInside(int24,int24)": {
								"notice": "Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"notice": "Swap token0 for token1, or token1 for token0"
							},
							"tickBitmap(int16)": {
								"notice": "Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
							},
							"tickSpacing()": {
								"notice": "The pool tick spacing"
							},
							"ticks(int24)": {
								"notice": "Look up information about a specific tick in the pool"
							},
							"token0()": {
								"notice": "The first of the two tokens of the pool, sorted by address"
							},
							"token1()": {
								"notice": "The second of the two tokens of the pool, sorted by address"
							}
						},
						"notice": "A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification",
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
				"IUniswapV3PoolActions": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "flash",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								}
							],
							"name": "increaseObservationCardinalityNext",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "zeroForOne",
									"type": "bool"
								},
								{
									"internalType": "int256",
									"name": "amountSpecified",
									"type": "int256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "swap",
							"outputs": [
								{
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"burn(int24,int24,uint128)": {
								"details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
								"params": {
									"amount": "How much liquidity to burn",
									"tickLower": "The lower tick of the position for which to burn liquidity",
									"tickUpper": "The upper tick of the position for which to burn liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 sent to the recipient",
									"amount1": "The amount of token1 sent to the recipient"
								}
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
								"params": {
									"amount0Requested": "How much token0 should be withdrawn from the fees owed",
									"amount1Requested": "How much token1 should be withdrawn from the fees owed",
									"recipient": "The address which should receive the fees collected",
									"tickLower": "The lower tick of the position for which to collect fees",
									"tickUpper": "The upper tick of the position for which to collect fees"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"flash(address,uint256,uint256,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback",
								"params": {
									"amount0": "The amount of token0 to send",
									"amount1": "The amount of token1 to send",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address which will receive the token0 and token1 amounts"
								}
							},
							"increaseObservationCardinalityNext(uint16)": {
								"details": "This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.",
								"params": {
									"observationCardinalityNext": "The desired minimum number of observations for the pool to store"
								}
							},
							"initialize(uint160)": {
								"details": "Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value",
								"params": {
									"sqrtPriceX96": "the initial sqrt price of the pool as a Q64.96"
								}
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.",
								"params": {
									"amount": "The amount of liquidity to mint",
									"data": "Any data that should be passed through to the callback",
									"recipient": "The address for which the liquidity will be created",
									"tickLower": "The lower tick of the position in which to add liquidity",
									"tickUpper": "The upper tick of the position in which to add liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback",
									"amount1": "The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
								}
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback",
								"params": {
									"amountSpecified": "The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address to receive the output of the swap",
									"sqrtPriceLimitX96": "The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap",
									"zeroForOne": "The direction of the swap, true for token0 to token1, false for token1 to token0"
								},
								"returns": {
									"amount0": "The delta of the balance of token0 of the pool, exact when negative, minimum when positive",
									"amount1": "The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
								}
							}
						},
						"title": "Permissionless pool actions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"burn(int24,int24,uint128)": "a34123a7",
							"collect(address,int24,int24,uint128,uint128)": "4f1eb3d8",
							"flash(address,uint256,uint256,bytes)": "490e6cbc",
							"increaseObservationCardinalityNext(uint16)": "32148f67",
							"initialize(uint160)": "f637731d",
							"mint(address,int24,int24,uint128,bytes)": "3c8a7d8d",
							"swap(address,bool,int256,uint160,bytes)": "128acb08"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(uint160)\":{\"details\":\"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\",\"params\":{\"sqrtPriceX96\":\"the initial sqrt price of the pool as a Q64.96\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}}},\"title\":\"Permissionless pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(uint160)\":{\"notice\":\"Sets the initial price for the pool\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"}},\"notice\":\"Contains pool methods that can be called by anyone\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":\"IUniswapV3PoolActions\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"burn(int24,int24,uint128)": {
								"notice": "Burn liquidity from the sender and account tokens owed for the liquidity to the position"
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"notice": "Collects tokens owed to a position"
							},
							"flash(address,uint256,uint256,bytes)": {
								"notice": "Receive token0 and/or token1 and pay it back, plus a fee, in the callback"
							},
							"increaseObservationCardinalityNext(uint16)": {
								"notice": "Increase the maximum number of price and liquidity observations that this pool will store"
							},
							"initialize(uint160)": {
								"notice": "Sets the initial price for the pool"
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"notice": "Adds liquidity for the given recipient/tickLower/tickUpper position"
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"notice": "Swap token0 for token1, or token1 for token0"
							}
						},
						"notice": "Contains pool methods that can be called by anyone",
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
				"IUniswapV3PoolDerivedState": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint32[]",
									"name": "secondsAgos",
									"type": "uint32[]"
								}
							],
							"name": "observe",
							"outputs": [
								{
									"internalType": "int56[]",
									"name": "tickCumulatives",
									"type": "int56[]"
								},
								{
									"internalType": "uint160[]",
									"name": "secondsPerLiquidityCumulativeX128s",
									"type": "uint160[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								}
							],
							"name": "snapshotCumulativesInside",
							"outputs": [
								{
									"internalType": "int56",
									"name": "tickCumulativeInside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityInsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsInside",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"observe(uint32[])": {
								"details": "To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.",
								"params": {
									"secondsAgos": "From how long ago each cumulative tick and liquidity value should be returned"
								},
								"returns": {
									"secondsPerLiquidityCumulativeX128s": "Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp",
									"tickCumulatives": "Cumulative tick values as of each `secondsAgos` from the current block timestamp"
								}
							},
							"snapshotCumulativesInside(int24,int24)": {
								"details": "Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.",
								"params": {
									"tickLower": "The lower tick of the range",
									"tickUpper": "The upper tick of the range"
								},
								"returns": {
									"secondsInside": "The snapshot of seconds per liquidity for the range",
									"secondsPerLiquidityInsideX128": "The snapshot of seconds per liquidity for the range",
									"tickCumulativeInside": "The snapshot of the tick accumulator for the range"
								}
							}
						},
						"title": "Pool state that is not stored",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"observe(uint32[])": "883bdbfd",
							"snapshotCumulativesInside(int24,int24)": "a38807f2"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}}},\"title\":\"Pool state that is not stored\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"}},\"notice\":\"Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":\"IUniswapV3PoolDerivedState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"observe(uint32[])": {
								"notice": "Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"
							},
							"snapshotCumulativesInside(int24,int24)": {
								"notice": "Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"
							}
						},
						"notice": "Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.",
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
				"IUniswapV3PoolEvents": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Burn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "CollectProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid1",
									"type": "uint256"
								}
							],
							"name": "Flash",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextOld",
									"type": "uint16"
								},
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextNew",
									"type": "uint16"
								}
							],
							"name": "IncreaseObservationCardinalityNext",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Initialize",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Mint",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0New",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1New",
									"type": "uint8"
								}
							],
							"name": "SetFeeProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Swap",
							"type": "event"
						}
					],
					"devdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"details": "Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect",
								"params": {
									"amount": "The amount of liquidity to remove",
									"amount0": "The amount of token0 withdrawn",
									"amount1": "The amount of token1 withdrawn",
									"owner": "The owner of the position for which liquidity is removed",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"details": "Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees",
								"params": {
									"amount0": "The amount of token0 fees collected",
									"amount1": "The amount of token1 fees collected",
									"owner": "The owner of the position for which fees are collected",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"params": {
									"amount0": "The amount of token1 protocol fees that is withdrawn",
									"recipient": "The address that receives the collected protocol fees",
									"sender": "The address that collects the protocol fees"
								}
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"params": {
									"amount0": "The amount of token0 that was flashed",
									"amount1": "The amount of token1 that was flashed",
									"paid0": "The amount of token0 paid for the flash, which can exceed the amount0 plus the fee",
									"paid1": "The amount of token1 paid for the flash, which can exceed the amount1 plus the fee",
									"recipient": "The address that received the tokens from flash",
									"sender": "The address that initiated the swap call, and that received the callback"
								}
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"details": "observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.",
								"params": {
									"observationCardinalityNextNew": "The updated value of the next observation cardinality",
									"observationCardinalityNextOld": "The previous value of the next observation cardinality"
								}
							},
							"Initialize(uint160,int24)": {
								"details": "Mint/Burn/Swap cannot be emitted by the pool before Initialize",
								"params": {
									"sqrtPriceX96": "The initial sqrt price of the pool, as a Q64.96",
									"tick": "The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"
								}
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"params": {
									"amount": "The amount of liquidity minted to the position range",
									"amount0": "How much token0 was required for the minted liquidity",
									"amount1": "How much token1 was required for the minted liquidity",
									"owner": "The owner of the position and recipient of any minted liquidity",
									"sender": "The address that minted the liquidity",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"params": {
									"feeProtocol0New": "The updated value of the token0 protocol fee",
									"feeProtocol0Old": "The previous value of the token0 protocol fee",
									"feeProtocol1New": "The updated value of the token1 protocol fee",
									"feeProtocol1Old": "The previous value of the token1 protocol fee"
								}
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"params": {
									"amount0": "The delta of the token0 balance of the pool",
									"amount1": "The delta of the token1 balance of the pool",
									"liquidity": "The liquidity of the pool after the swap",
									"recipient": "The address that received the output of the swap",
									"sender": "The address that initiated the swap call, and that received the callback",
									"sqrtPriceX96": "The sqrt(price) of the pool after the swap, as a Q64.96",
									"tick": "The log base 1.0001 of price of the pool after the swap"
								}
							}
						},
						"kind": "dev",
						"methods": {},
						"title": "Events emitted by a pool",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"details\":\"Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\",\"params\":{\"amount\":\"The amount of liquidity to remove\",\"amount0\":\"The amount of token0 withdrawn\",\"amount1\":\"The amount of token1 withdrawn\",\"owner\":\"The owner of the position for which liquidity is removed\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"details\":\"Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\",\"params\":{\"amount0\":\"The amount of token0 fees collected\",\"amount1\":\"The amount of token1 fees collected\",\"owner\":\"The owner of the position for which fees are collected\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"CollectProtocol(address,address,uint128,uint128)\":{\"params\":{\"amount0\":\"The amount of token1 protocol fees that is withdrawn\",\"recipient\":\"The address that receives the collected protocol fees\",\"sender\":\"The address that collects the protocol fees\"}},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"amount0\":\"The amount of token0 that was flashed\",\"amount1\":\"The amount of token1 that was flashed\",\"paid0\":\"The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\",\"paid1\":\"The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\",\"recipient\":\"The address that received the tokens from flash\",\"sender\":\"The address that initiated the swap call, and that received the callback\"}},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"details\":\"observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.\",\"params\":{\"observationCardinalityNextNew\":\"The updated value of the next observation cardinality\",\"observationCardinalityNextOld\":\"The previous value of the next observation cardinality\"}},\"Initialize(uint160,int24)\":{\"details\":\"Mint/Burn/Swap cannot be emitted by the pool before Initialize\",\"params\":{\"sqrtPriceX96\":\"The initial sqrt price of the pool, as a Q64.96\",\"tick\":\"The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\"}},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of liquidity minted to the position range\",\"amount0\":\"How much token0 was required for the minted liquidity\",\"amount1\":\"How much token1 was required for the minted liquidity\",\"owner\":\"The owner of the position and recipient of any minted liquidity\",\"sender\":\"The address that minted the liquidity\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"params\":{\"feeProtocol0New\":\"The updated value of the token0 protocol fee\",\"feeProtocol0Old\":\"The previous value of the token0 protocol fee\",\"feeProtocol1New\":\"The updated value of the token1 protocol fee\",\"feeProtocol1Old\":\"The previous value of the token1 protocol fee\"}},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"params\":{\"amount0\":\"The delta of the token0 balance of the pool\",\"amount1\":\"The delta of the token1 balance of the pool\",\"liquidity\":\"The liquidity of the pool after the swap\",\"recipient\":\"The address that received the output of the swap\",\"sender\":\"The address that initiated the swap call, and that received the callback\",\"sqrtPriceX96\":\"The sqrt(price) of the pool after the swap, as a Q64.96\",\"tick\":\"The log base 1.0001 of price of the pool after the swap\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"Events emitted by a pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectProtocol(address,address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the factory owner\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains all events emitted by the pool\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":\"IUniswapV3PoolEvents\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when a position's liquidity is removed"
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"notice": "Emitted when fees are collected by the owner of a position"
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"notice": "Emitted when the collected protocol fees are withdrawn by the factory owner"
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"notice": "Emitted by the pool for any flashes of token0/token1"
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"notice": "Emitted by the pool for increases to the number of observations that can be stored"
							},
							"Initialize(uint160,int24)": {
								"notice": "Emitted exactly once by a pool when #initialize is first called on the pool"
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is minted for a given position"
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"notice": "Emitted when the protocol fee is changed by the pool"
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"notice": "Emitted by the pool for any swaps between token0 and token1"
							}
						},
						"kind": "user",
						"methods": {},
						"notice": "Contains all events emitted by the pool",
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
				"IUniswapV3PoolImmutables": {
					"abi": [
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "fee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxLiquidityPerTick",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"factory()": {
								"returns": {
									"_0": "The contract address"
								}
							},
							"fee()": {
								"returns": {
									"_0": "The fee"
								}
							},
							"maxLiquidityPerTick()": {
								"details": "This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool",
								"returns": {
									"_0": "The max amount of liquidity per tick"
								}
							},
							"tickSpacing()": {
								"details": "Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.",
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"token0()": {
								"returns": {
									"_0": "The token contract address"
								}
							},
							"token1()": {
								"returns": {
									"_0": "The token contract address"
								}
							}
						},
						"title": "Pool state that never changes",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"factory()": "c45a0155",
							"fee()": "ddca3f43",
							"maxLiquidityPerTick()": "70cf754a",
							"tickSpacing()": "d0c93a7c",
							"token0()": "0dfe1681",
							"token1()": "d21220a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"Pool state that never changes\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"notice\":\"These parameters are fixed for a pool forever, i.e., the methods will always return the same values\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":\"IUniswapV3PoolImmutables\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"factory()": {
								"notice": "The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface"
							},
							"fee()": {
								"notice": "The pool's fee in hundredths of a bip, i.e. 1e-6"
							},
							"maxLiquidityPerTick()": {
								"notice": "The maximum amount of position liquidity that can use any tick in the range"
							},
							"tickSpacing()": {
								"notice": "The pool tick spacing"
							},
							"token0()": {
								"notice": "The first of the two tokens of the pool, sorted by address"
							},
							"token1()": {
								"notice": "The second of the two tokens of the pool, sorted by address"
							}
						},
						"notice": "These parameters are fixed for a pool forever, i.e., the methods will always return the same values",
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
				"IUniswapV3PoolOwnerActions": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collectProtocol",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint8",
									"name": "feeProtocol0",
									"type": "uint8"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol1",
									"type": "uint8"
								}
							],
							"name": "setFeeProtocol",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"collectProtocol(address,uint128,uint128)": {
								"params": {
									"amount0Requested": "The maximum amount of token0 to send, can be 0 to collect fees in only token1",
									"amount1Requested": "The maximum amount of token1 to send, can be 0 to collect fees in only token0",
									"recipient": "The address to which collected protocol fees should be sent"
								},
								"returns": {
									"amount0": "The protocol fee collected in token0",
									"amount1": "The protocol fee collected in token1"
								}
							},
							"setFeeProtocol(uint8,uint8)": {
								"params": {
									"feeProtocol0": "new protocol fee for token0 of the pool",
									"feeProtocol1": "new protocol fee for token1 of the pool"
								}
							}
						},
						"title": "Permissioned pool actions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"collectProtocol(address,uint128,uint128)": "85b66729",
							"setFeeProtocol(uint8,uint8)": "8206a4d1"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collectProtocol\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeProtocol0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol1\",\"type\":\"uint8\"}],\"name\":\"setFeeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"collectProtocol(address,uint128,uint128)\":{\"params\":{\"amount0Requested\":\"The maximum amount of token0 to send, can be 0 to collect fees in only token1\",\"amount1Requested\":\"The maximum amount of token1 to send, can be 0 to collect fees in only token0\",\"recipient\":\"The address to which collected protocol fees should be sent\"},\"returns\":{\"amount0\":\"The protocol fee collected in token0\",\"amount1\":\"The protocol fee collected in token1\"}},\"setFeeProtocol(uint8,uint8)\":{\"params\":{\"feeProtocol0\":\"new protocol fee for token0 of the pool\",\"feeProtocol1\":\"new protocol fee for token1 of the pool\"}}},\"title\":\"Permissioned pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collectProtocol(address,uint128,uint128)\":{\"notice\":\"Collect the protocol fee accrued to the pool\"},\"setFeeProtocol(uint8,uint8)\":{\"notice\":\"Set the denominator of the protocol's % share of the fees\"}},\"notice\":\"Contains pool methods that may only be called by the factory owner\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":\"IUniswapV3PoolOwnerActions\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"collectProtocol(address,uint128,uint128)": {
								"notice": "Collect the protocol fee accrued to the pool"
							},
							"setFeeProtocol(uint8,uint8)": {
								"notice": "Set the denominator of the protocol's % share of the fees"
							}
						},
						"notice": "Contains pool methods that may only be called by the factory owner",
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
				"IUniswapV3PoolState": {
					"abi": [
						{
							"inputs": [],
							"name": "feeGrowthGlobal0X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal1X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "liquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "observations",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "blockTimestamp",
									"type": "uint32"
								},
								{
									"internalType": "int56",
									"name": "tickCumulative",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityCumulativeX128",
									"type": "uint160"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "_liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "protocolFees",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "token0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "token1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "slot0",
							"outputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								},
								{
									"internalType": "uint16",
									"name": "observationIndex",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinality",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol",
									"type": "uint8"
								},
								{
									"internalType": "bool",
									"name": "unlocked",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int16",
									"name": "wordPosition",
									"type": "int16"
								}
							],
							"name": "tickBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "ticks",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidityGross",
									"type": "uint128"
								},
								{
									"internalType": "int128",
									"name": "liquidityNet",
									"type": "int128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside0X128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside1X128",
									"type": "uint256"
								},
								{
									"internalType": "int56",
									"name": "tickCumulativeOutside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityOutsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsOutside",
									"type": "uint32"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"feeGrowthGlobal0X128()": {
								"details": "This value can overflow the uint256"
							},
							"feeGrowthGlobal1X128()": {
								"details": "This value can overflow the uint256"
							},
							"liquidity()": {
								"details": "This value has no relationship to the total liquidity across all ticks"
							},
							"observations(uint256)": {
								"details": "You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.",
								"params": {
									"index": "The element of the observations array to fetch"
								},
								"returns": {
									"blockTimestamp": "The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"
								}
							},
							"positions(bytes32)": {
								"params": {
									"key": "The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"
								},
								"returns": {
									"_liquidity": "The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
								}
							},
							"protocolFees()": {
								"details": "Protocol fees will never exceed uint128 max in either token"
							},
							"slot0()": {
								"returns": {
									"sqrtPriceX96": "The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy"
								}
							},
							"ticks(int24)": {
								"params": {
									"tick": "The tick to look up"
								},
								"returns": {
									"liquidityGross": "the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."
								}
							}
						},
						"title": "Pool state that can change",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"feeGrowthGlobal0X128()": "f3058399",
							"feeGrowthGlobal1X128()": "46141319",
							"liquidity()": "1a686502",
							"observations(uint256)": "252c09d7",
							"positions(bytes32)": "514ea4bf",
							"protocolFees()": "1ad8b03b",
							"slot0()": "3850c7bd",
							"tickBitmap(int16)": "5339c296",
							"ticks(int24)": "f30dba93"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticks\"},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"protocolFees()\":{\"details\":\"Protocol fees will never exceed uint128 max in either token\"},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}}},\"title\":\"Pool state that can change\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"protocolFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the protocol\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"}},\"notice\":\"These methods compose the pool's state, and can change with any frequency including multiple times per transaction\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":\"IUniswapV3PoolState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"feeGrowthGlobal0X128()": {
								"notice": "The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"
							},
							"feeGrowthGlobal1X128()": {
								"notice": "The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"
							},
							"liquidity()": {
								"notice": "The currently in range liquidity available to the pool"
							},
							"observations(uint256)": {
								"notice": "Returns data about a specific observation index"
							},
							"positions(bytes32)": {
								"notice": "Returns the information about a position by the position's key"
							},
							"protocolFees()": {
								"notice": "The amounts of token0 and token1 that are owed to the protocol"
							},
							"slot0()": {
								"notice": "The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."
							},
							"tickBitmap(int16)": {
								"notice": "Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
							},
							"ticks(int24)": {
								"notice": "Look up information about a specific tick in the pool"
							}
						},
						"notice": "These methods compose the pool's state, and can change with any frequency including multiple times per transaction",
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/libraries/FullMath.sol": {
				"FullMath": {
					"abi": [],
					"devdoc": {
						"details": "Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits",
						"kind": "dev",
						"methods": {},
						"title": "Contains 512-bit math functions",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":362:5124  library FullMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":362:5124  library FullMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220f9c35d942826af63c46e2adc8357fe9661b937b7379149bc153b8b50b845489764736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f9c35d942826af63c46e2adc8357fe9661b937b7379149bc153b8b50b845489764736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF9 0xC3 0x5D SWAP5 0x28 0x26 0xAF PUSH4 0xC46E2ADC DUP4 JUMPI INVALID SWAP7 PUSH2 0xB937 0xB7 CALLDATACOPY SWAP2 0x49 0xBC ISZERO EXTCODESIZE DUP12 POP 0xB8 GASLIMIT 0x48 SWAP8 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "362:4762:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f9c35d942826af63c46e2adc8357fe9661b937b7379149bc153b8b50b845489764736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF9 0xC3 0x5D SWAP5 0x28 0x26 0xAF PUSH4 0xC46E2ADC DUP4 JUMPI INVALID SWAP7 PUSH2 0xB937 0xB7 CALLDATACOPY SWAP2 0x49 0xBC ISZERO EXTCODESIZE DUP12 POP 0xB8 GASLIMIT 0x48 SWAP8 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "362:4762:8:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"mulDiv(uint256,uint256,uint256)": "infinite",
								"mulDivRoundingUp(uint256,uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 362,
									"end": 5124,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "PUSH",
									"source": 8,
									"value": "B"
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "BYTE",
									"source": 8
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "EQ",
									"source": 8
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "INVALID",
									"source": 8
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "ADDRESS",
									"source": 8
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "MSTORE8",
									"source": 8
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220f9c35d942826af63c46e2adc8357fe9661b937b7379149bc153b8b50b845489764736f6c63430007060033",
									".code": [
										{
											"begin": 362,
											"end": 5124,
											"name": "PUSHDEPLOYADDRESS",
											"source": 8
										},
										{
											"begin": 362,
											"end": 5124,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 362,
											"end": 5124,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 362,
											"end": 5124,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 362,
											"end": 5124,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 362,
											"end": 5124,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 362,
											"end": 5124,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 362,
											"end": 5124,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 362,
											"end": 5124,
											"name": "REVERT",
											"source": 8
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Contains 512-bit math functions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":\"FullMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"keccak256\":\"0x50e87f7a3197525d1c6f7e04290060e848677c8a4e86c554bc6ace4a4d0d476d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3874093a6b37d8e68f9475a91f8eb0a1c808cb6153c84cfe6c37909505a4d24e\",\"dweb:/ipfs/QmUqGpQqvSHX4SwUvcBCs9g4ZhR9JPhgD3615oUigAhtjj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision",
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/libraries/TickMath.sol": {
				"TickMath": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"MAX_SQRT_RATIO": {
								"details": "The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)"
							},
							"MAX_TICK": {
								"details": "The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128"
							},
							"MIN_SQRT_RATIO": {
								"details": "The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)"
							},
							"MIN_TICK": {
								"details": "The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128"
							}
						},
						"title": "Math library for computing sqrt prices from ticks and vice versa",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":313:8644  library TickMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":313:8644  library TickMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220088155d964d43a73867fb878ddd461135a55c36ccca22ac587972e02302871a164736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220088155d964d43a73867fb878ddd461135a55c36ccca22ac587972e02302871a164736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDMOD DUP2 SSTORE 0xD9 PUSH5 0xD43A73867F 0xB8 PUSH25 0xDDD461135A55C36CCCA22AC587972E02302871A164736F6C63 NUMBER STOP SMOD MOD STOP CALLER ",
							"sourceMap": "313:8331:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220088155d964d43a73867fb878ddd461135a55c36ccca22ac587972e02302871a164736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDMOD DUP2 SSTORE 0xD9 PUSH5 0xD43A73867F 0xB8 PUSH25 0xDDD461135A55C36CCCA22AC587972E02302871A164736F6C63 NUMBER STOP SMOD MOD STOP CALLER ",
							"sourceMap": "313:8331:9:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"getSqrtRatioAtTick(int24)": "infinite",
								"getTickAtSqrtRatio(uint160)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 9,
									"value": "B"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "BYTE",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "INVALID",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "ADDRESS",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "MSTORE8",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220088155d964d43a73867fb878ddd461135a55c36ccca22ac587972e02302871a164736f6c63430007060033",
									".code": [
										{
											"begin": 313,
											"end": 8644,
											"name": "PUSHDEPLOYADDRESS",
											"source": 9
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "REVERT",
											"source": 9
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"MAX_SQRT_RATIO\":{\"details\":\"The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\"},\"MAX_TICK\":{\"details\":\"The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\"},\"MIN_SQRT_RATIO\":{\"details\":\"The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\"},\"MIN_TICK\":{\"details\":\"The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\"}},\"title\":\"Math library for computing sqrt prices from ticks and vice versa\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":\"TickMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":{\"keccak256\":\"0xda8c2c0b12d2976acfd364453ba5f5bf0117ba3c91175ee9e1067d3fb26944d9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://3f3d2d7c2723c91830c74d96292f28fc1cfe28d388cdb9c1a5ebadb4c2b96f81\",\"dweb:/ipfs/QmYU4wk8MEm33wVWR38LoncvR7b8PP1mLuGBKX3dUpYJVE\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128",
						"version": 1
					}
				}
			},
			"contracts/interfaces/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "deposit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"deposit()": "d0e30db0",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"withdraw(uint256)": "2e1a7d4d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0x7df9d93243a890a6dc175905d65495ae5726330faa50409ab8460c4c00c672e1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3ff91fe9d915b97343e152f1a15a46e5ff9477e90e90a4431dca38f79eb2cdba\",\"dweb:/ipfs/QmcHUAJs2MfcdbAFTzdQE1eGevxCGHNDXECiuGLDaUs34S\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/libraries/OracleLibrary.sol": {
				"OracleLibrary": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/libraries/OracleLibrary.sol\":244:1891  library OracleLibrary {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/libraries/OracleLibrary.sol\":244:1891  library OracleLibrary {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212204cb18eca1a86f36ab91ff0a9f7641f0861759bc9f21ce31608dcdd6beba0020464736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204cb18eca1a86f36ab91ff0a9f7641f0861759bc9f21ce31608dcdd6beba0020464736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4C 0xB1 DUP15 0xCA BYTE DUP7 RETURN PUSH11 0xB91FF0A9F7641F0861759B 0xC9 CALLCODE SHR 0xE3 AND ADDMOD 0xDC 0xDD PUSH12 0xEBA0020464736F6C63430007 MOD STOP CALLER ",
							"sourceMap": "244:1647:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204cb18eca1a86f36ab91ff0a9f7641f0861759bc9f21ce31608dcdd6beba0020464736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4C 0xB1 DUP15 0xCA BYTE DUP7 RETURN PUSH11 0xB91FF0A9F7641F0861759B 0xC9 CALLCODE SHR 0xE3 AND ADDMOD 0xDC 0xDD PUSH12 0xEBA0020464736F6C63430007 MOD STOP CALLER ",
							"sourceMap": "244:1647:11:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"consult(address,uint32)": "infinite",
								"getQuoteAtTick(int24,uint128,address,address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 244,
									"end": 1891,
									"name": "PUSH #[$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 244,
									"end": 1891,
									"name": "PUSH [$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 244,
									"end": 1891,
									"name": "PUSH",
									"source": 11,
									"value": "B"
								},
								{
									"begin": 244,
									"end": 1891,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 244,
									"end": 1891,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 244,
									"end": 1891,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 244,
									"end": 1891,
									"name": "CODECOPY",
									"source": 11
								},
								{
									"begin": 244,
									"end": 1891,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 244,
									"end": 1891,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 244,
									"end": 1891,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 244,
									"end": 1891,
									"name": "BYTE",
									"source": 11
								},
								{
									"begin": 244,
									"end": 1891,
									"name": "PUSH",
									"source": 11,
									"value": "73"
								},
								{
									"begin": 244,
									"end": 1891,
									"name": "EQ",
									"source": 11
								},
								{
									"begin": 244,
									"end": 1891,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 244,
									"end": 1891,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 244,
									"end": 1891,
									"name": "INVALID",
									"source": 11
								},
								{
									"begin": 244,
									"end": 1891,
									"name": "tag",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 244,
									"end": 1891,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 244,
									"end": 1891,
									"name": "ADDRESS",
									"source": 11
								},
								{
									"begin": 244,
									"end": 1891,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 244,
									"end": 1891,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 244,
									"end": 1891,
									"name": "PUSH",
									"source": 11,
									"value": "73"
								},
								{
									"begin": 244,
									"end": 1891,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 244,
									"end": 1891,
									"name": "MSTORE8",
									"source": 11
								},
								{
									"begin": 244,
									"end": 1891,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 244,
									"end": 1891,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 244,
									"end": 1891,
									"name": "RETURN",
									"source": 11
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212204cb18eca1a86f36ab91ff0a9f7641f0861759bc9f21ce31608dcdd6beba0020464736f6c63430007060033",
									".code": [
										{
											"begin": 244,
											"end": 1891,
											"name": "PUSHDEPLOYADDRESS",
											"source": 11
										},
										{
											"begin": 244,
											"end": 1891,
											"name": "ADDRESS",
											"source": 11
										},
										{
											"begin": 244,
											"end": 1891,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 244,
											"end": 1891,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 244,
											"end": 1891,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 244,
											"end": 1891,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 244,
											"end": 1891,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 244,
											"end": 1891,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 244,
											"end": 1891,
											"name": "REVERT",
											"source": 11
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/OracleLibrary.sol\":\"OracleLibrary\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1c42b9e6f5902ac38dd43e25750939baa7e0c1425dc75afd717c4412731065d5\",\"dweb:/ipfs/QmWaoacnzsucTvBME2o7YgZBZMhaHv7fkj83htHMVWJKWh\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"keccak256\":\"0x50e87f7a3197525d1c6f7e04290060e848677c8a4e86c554bc6ace4a4d0d476d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3874093a6b37d8e68f9475a91f8eb0a1c808cb6153c84cfe6c37909505a4d24e\",\"dweb:/ipfs/QmUqGpQqvSHX4SwUvcBCs9g4ZhR9JPhgD3615oUigAhtjj\"]},\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":{\"keccak256\":\"0xda8c2c0b12d2976acfd364453ba5f5bf0117ba3c91175ee9e1067d3fb26944d9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://3f3d2d7c2723c91830c74d96292f28fc1cfe28d388cdb9c1a5ebadb4c2b96f81\",\"dweb:/ipfs/QmYU4wk8MEm33wVWR38LoncvR7b8PP1mLuGBKX3dUpYJVE\"]},\"contracts/libraries/OracleLibrary.sol\":{\"keccak256\":\"0xfe374d779a9fdb16c102035c181002ffd393138a38acc916e9f4e98139f5b399\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://497ed18360c8fef9ca485f60669fa56247b2a46a464483b2d93fe24792d68d1f\",\"dweb:/ipfs/QmY6gSGfuAi5BQnJxhQKLHwqmo7ZG3WVqXqAmPRZRyapGv\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/libraries/UniswapV3.sol": {
				"UniswapV3": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "factory",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "t0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "t1",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "min0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "min1",
									"type": "uint256"
								}
							],
							"name": "PoolExists",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "factory",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "t0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "t1",
									"type": "address"
								}
							],
							"name": "Price",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "price",
									"type": "uint256"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/libraries/UniswapV3.sol\":260:1761  library UniswapV3 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/libraries/UniswapV3.sol\":260:1761  library UniswapV3 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xbcbcaa29\n      eq\n      tag_2\n      jumpi\n      dup1\n      0xc361e0b1\n      eq\n      tag_3\n      jumpi\n    tag_1:\n      0x00\n      dup1\n      revert\n        /* \"contracts/libraries/UniswapV3.sol\":1227:1758  function PoolExists(address factory,address t0,address t1,uint min0,uint min1) external view returns (bool){... */\n    tag_2:\n      tag_4\n      0x04\n      dup1\n      calldatasize\n      sub\n      0xa0\n      dup2\n      lt\n      iszero\n      tag_5\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_5:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_6\n      jump\t// in\n    tag_4:\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/libraries/UniswapV3.sol\":289:1220  function Price(address factory,address t0,address t1) external view returns (uint256 price,uint24 fee){... */\n    tag_3:\n      tag_7\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x60\n      dup2\n      lt\n      iszero\n      tag_8\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_8:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_9\n      jump\t// in\n    tag_7:\n      mload(0x40)\n      dup1\n      dup4\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      0xffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/libraries/UniswapV3.sol\":1227:1758  function PoolExists(address factory,address t0,address t1,uint min0,uint min1) external view returns (bool){... */\n    tag_6:\n        /* \"contracts/libraries/UniswapV3.sol\":1329:1333  bool */\n      0x00\n        /* \"contracts/libraries/UniswapV3.sol\":1344:1365  uint16[4] memory fees */\n      dup1\n        /* \"contracts/libraries/UniswapV3.sol\":1344:1388  uint16[4] memory fees = [100,500,3000,10000] */\n      mload(0x40)\n      dup1\n      0x80\n      add\n      0x40\n      mstore\n      dup1\n        /* \"contracts/libraries/UniswapV3.sol\":1369:1372  100 */\n      0x64\n        /* \"contracts/libraries/UniswapV3.sol\":1344:1388  uint16[4] memory fees = [100,500,3000,10000] */\n      0xffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/libraries/UniswapV3.sol\":1373:1376  500 */\n      0x01f4\n        /* \"contracts/libraries/UniswapV3.sol\":1344:1388  uint16[4] memory fees = [100,500,3000,10000] */\n      0xffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/libraries/UniswapV3.sol\":1377:1381  3000 */\n      0x0bb8\n        /* \"contracts/libraries/UniswapV3.sol\":1344:1388  uint16[4] memory fees = [100,500,3000,10000] */\n      0xffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/libraries/UniswapV3.sol\":1382:1387  10000 */\n      0x2710\n        /* \"contracts/libraries/UniswapV3.sol\":1344:1388  uint16[4] memory fees = [100,500,3000,10000] */\n      0xffff\n      and\n      dup2\n      mstore\n      pop\n      swap1\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":1398:1417  uint16[4] memory fs */\n      tag_11\n      tag_12\n      jump\t// in\n    tag_11:\n        /* \"contracts/libraries/UniswapV3.sol\":1431:1438  uint8 i */\n      0x00\n        /* \"contracts/libraries/UniswapV3.sol\":1427:1730  for(uint8 i=0;i<4;i++){... */\n    tag_13:\n        /* \"contracts/libraries/UniswapV3.sol\":1443:1444  4 */\n      0x04\n        /* \"contracts/libraries/UniswapV3.sol\":1441:1442  i */\n      dup2\n        /* \"contracts/libraries/UniswapV3.sol\":1441:1444  i<4 */\n      0xff\n      and\n      lt\n        /* \"contracts/libraries/UniswapV3.sol\":1427:1730  for(uint8 i=0;i<4;i++){... */\n      iszero\n      tag_14\n      jumpi\n        /* \"contracts/libraries/UniswapV3.sol\":1462:1474  address pool */\n      0x00\n        /* \"contracts/libraries/UniswapV3.sol\":1495:1502  factory */\n      dup10\n        /* \"contracts/libraries/UniswapV3.sol\":1477:1511  IUniswapV3Factory(factory).getPool */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x1698ee82\n        /* \"contracts/libraries/UniswapV3.sol\":1512:1514  t0 */\n      dup11\n        /* \"contracts/libraries/UniswapV3.sol\":1515:1517  t1 */\n      dup11\n        /* \"contracts/libraries/UniswapV3.sol\":1518:1522  fees */\n      dup8\n        /* \"contracts/libraries/UniswapV3.sol\":1523:1524  i */\n      dup7\n        /* \"contracts/libraries/UniswapV3.sol\":1518:1525  fees[i] */\n      0xff\n      and\n      0x04\n      dup2\n      lt\n      tag_16\n      jumpi\n      invalid\n    tag_16:\n      0x20\n      mul\n      add\n      mload\n        /* \"contracts/libraries/UniswapV3.sol\":1477:1526  IUniswapV3Factory(factory).getPool(t0,t1,fees[i]) */\n      mload(0x40)\n      dup5\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup5\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      0xffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap4\n      pop\n      pop\n      pop\n      pop\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_17\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_17:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_19\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_19:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_20\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_20:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":1462:1526  address pool = IUniswapV3Factory(factory).getPool(t0,t1,fees[i]) */\n      swap1\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":1559:1560  0 */\n      0x00\n        /* \"contracts/libraries/UniswapV3.sol\":1543:1561  pool == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/libraries/UniswapV3.sol\":1543:1547  pool */\n      dup2\n        /* \"contracts/libraries/UniswapV3.sol\":1543:1561  pool == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/libraries/UniswapV3.sol\":1539:1571  if (pool == address(0)) continue */\n      iszero\n      tag_21\n      jumpi\n        /* \"contracts/libraries/UniswapV3.sol\":1563:1571  continue */\n      pop\n      jump(tag_15)\n        /* \"contracts/libraries/UniswapV3.sol\":1539:1571  if (pool == address(0)) continue */\n    tag_21:\n        /* \"contracts/libraries/UniswapV3.sol\":1618:1622  min0 */\n      dup7\n        /* \"contracts/libraries/UniswapV3.sol\":1596:1598  t0 */\n      dup10\n        /* \"contracts/libraries/UniswapV3.sol\":1589:1609  IERC20(t0).balanceOf */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x70a08231\n        /* \"contracts/libraries/UniswapV3.sol\":1610:1614  pool */\n      dup4\n        /* \"contracts/libraries/UniswapV3.sol\":1589:1615  IERC20(t0).balanceOf(pool) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_22\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_22:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_24\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_24:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_25\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_25:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":1589:1622  IERC20(t0).balanceOf(pool) < min0 */\n      lt\n        /* \"contracts/libraries/UniswapV3.sol\":1585:1632  if (IERC20(t0).balanceOf(pool) < min0) continue */\n      iszero\n      tag_26\n      jumpi\n        /* \"contracts/libraries/UniswapV3.sol\":1624:1632  continue */\n      pop\n      jump(tag_15)\n        /* \"contracts/libraries/UniswapV3.sol\":1585:1632  if (IERC20(t0).balanceOf(pool) < min0) continue */\n    tag_26:\n        /* \"contracts/libraries/UniswapV3.sol\":1679:1683  min1 */\n      dup6\n        /* \"contracts/libraries/UniswapV3.sol\":1657:1659  t1 */\n      dup9\n        /* \"contracts/libraries/UniswapV3.sol\":1650:1670  IERC20(t1).balanceOf */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x70a08231\n        /* \"contracts/libraries/UniswapV3.sol\":1671:1675  pool */\n      dup4\n        /* \"contracts/libraries/UniswapV3.sol\":1650:1676  IERC20(t1).balanceOf(pool) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_27\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_27:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_29\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_29:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_30\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_30:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":1650:1683  IERC20(t1).balanceOf(pool) < min1 */\n      lt\n        /* \"contracts/libraries/UniswapV3.sol\":1646:1693  if (IERC20(t1).balanceOf(pool) < min1) continue */\n      iszero\n      tag_31\n      jumpi\n        /* \"contracts/libraries/UniswapV3.sol\":1685:1693  continue */\n      pop\n      jump(tag_15)\n        /* \"contracts/libraries/UniswapV3.sol\":1646:1693  if (IERC20(t1).balanceOf(pool) < min1) continue */\n    tag_31:\n        /* \"contracts/libraries/UniswapV3.sol\":1715:1719  true */\n      0x01\n        /* \"contracts/libraries/UniswapV3.sol\":1708:1719  return true */\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump(tag_10)\n        /* \"contracts/libraries/UniswapV3.sol\":1427:1730  for(uint8 i=0;i<4;i++){... */\n    tag_15:\n        /* \"contracts/libraries/UniswapV3.sol\":1445:1448  i++ */\n      dup1\n      dup1\n      0x01\n      add\n      swap2\n      pop\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":1427:1730  for(uint8 i=0;i<4;i++){... */\n      jump(tag_13)\n    tag_14:\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":1746:1751  false */\n      0x00\n        /* \"contracts/libraries/UniswapV3.sol\":1739:1751  return false */\n      swap3\n      pop\n      pop\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":1227:1758  function PoolExists(address factory,address t0,address t1,uint min0,uint min1) external view returns (bool){... */\n    tag_10:\n      swap6\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/libraries/UniswapV3.sol\":289:1220  function Price(address factory,address t0,address t1) external view returns (uint256 price,uint24 fee){... */\n    tag_9:\n        /* \"contracts/libraries/UniswapV3.sol\":366:379  uint256 price */\n      0x00\n        /* \"contracts/libraries/UniswapV3.sol\":380:390  uint24 fee */\n      dup1\n        /* \"contracts/libraries/UniswapV3.sol\":401:422  uint16[4] memory fees */\n      0x00\n        /* \"contracts/libraries/UniswapV3.sol\":401:445  uint16[4] memory fees = [100,500,3000,10000] */\n      mload(0x40)\n      dup1\n      0x80\n      add\n      0x40\n      mstore\n      dup1\n        /* \"contracts/libraries/UniswapV3.sol\":426:429  100 */\n      0x64\n        /* \"contracts/libraries/UniswapV3.sol\":401:445  uint16[4] memory fees = [100,500,3000,10000] */\n      0xffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/libraries/UniswapV3.sol\":430:433  500 */\n      0x01f4\n        /* \"contracts/libraries/UniswapV3.sol\":401:445  uint16[4] memory fees = [100,500,3000,10000] */\n      0xffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/libraries/UniswapV3.sol\":434:438  3000 */\n      0x0bb8\n        /* \"contracts/libraries/UniswapV3.sol\":401:445  uint16[4] memory fees = [100,500,3000,10000] */\n      0xffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/libraries/UniswapV3.sol\":439:444  10000 */\n      0x2710\n        /* \"contracts/libraries/UniswapV3.sol\":401:445  uint16[4] memory fees = [100,500,3000,10000] */\n      0xffff\n      and\n      dup2\n      mstore\n      pop\n      swap1\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":459:466  uint8 i */\n      0x00\n        /* \"contracts/libraries/UniswapV3.sol\":455:1186  for(uint8 i=0;i<4;i++){... */\n    tag_33:\n        /* \"contracts/libraries/UniswapV3.sol\":471:472  4 */\n      0x04\n        /* \"contracts/libraries/UniswapV3.sol\":469:470  i */\n      dup2\n        /* \"contracts/libraries/UniswapV3.sol\":469:472  i<4 */\n      0xff\n      and\n      lt\n        /* \"contracts/libraries/UniswapV3.sol\":455:1186  for(uint8 i=0;i<4;i++){... */\n      iszero\n      tag_34\n      jumpi\n        /* \"contracts/libraries/UniswapV3.sol\":487:499  address pool */\n      0x00\n        /* \"contracts/libraries/UniswapV3.sol\":520:527  factory */\n      dup8\n        /* \"contracts/libraries/UniswapV3.sol\":502:536  IUniswapV3Factory(factory).getPool */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x1698ee82\n        /* \"contracts/libraries/UniswapV3.sol\":537:539  t0 */\n      dup9\n        /* \"contracts/libraries/UniswapV3.sol\":540:542  t1 */\n      dup9\n        /* \"contracts/libraries/UniswapV3.sol\":543:547  fees */\n      dup7\n        /* \"contracts/libraries/UniswapV3.sol\":548:549  i */\n      dup7\n        /* \"contracts/libraries/UniswapV3.sol\":543:550  fees[i] */\n      0xff\n      and\n      0x04\n      dup2\n      lt\n      tag_36\n      jumpi\n      invalid\n    tag_36:\n      0x20\n      mul\n      add\n      mload\n        /* \"contracts/libraries/UniswapV3.sol\":502:551  IUniswapV3Factory(factory).getPool(t0,t1,fees[i]) */\n      mload(0x40)\n      dup5\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup5\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      0xffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap4\n      pop\n      pop\n      pop\n      pop\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_37\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_37:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_39\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_39:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_40\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_40:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":487:551  address pool = IUniswapV3Factory(factory).getPool(t0,t1,fees[i]) */\n      swap1\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":581:582  0 */\n      0x00\n        /* \"contracts/libraries/UniswapV3.sol\":565:583  pool == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/libraries/UniswapV3.sol\":565:569  pool */\n      dup2\n        /* \"contracts/libraries/UniswapV3.sol\":565:583  pool == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/libraries/UniswapV3.sol\":561:593  if (pool == address(0)) continue */\n      iszero\n      tag_41\n      jumpi\n        /* \"contracts/libraries/UniswapV3.sol\":585:593  continue */\n      pop\n      jump(tag_35)\n        /* \"contracts/libraries/UniswapV3.sol\":561:593  if (pool == address(0)) continue */\n    tag_41:\n        /* \"contracts/libraries/UniswapV3.sol\":613:621  uint8 d0 */\n      0x00\n        /* \"contracts/libraries/UniswapV3.sol\":631:633  t0 */\n      dup8\n        /* \"contracts/libraries/UniswapV3.sol\":624:643  IERC20(t0).decimals */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x313ce567\n        /* \"contracts/libraries/UniswapV3.sol\":624:645  IERC20(t0).decimals() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_42\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_42:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_44\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_44:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_45\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_45:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":613:645  uint8 d0 = IERC20(t0).decimals() */\n      swap1\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":655:663  uint8 d1 */\n      0x00\n        /* \"contracts/libraries/UniswapV3.sol\":673:675  t1 */\n      dup8\n        /* \"contracts/libraries/UniswapV3.sol\":666:685  IERC20(t1).decimals */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x313ce567\n        /* \"contracts/libraries/UniswapV3.sol\":666:687  IERC20(t1).decimals() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_46\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_46:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_48\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_48:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_49\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_49:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":655:687  uint8 d1 = IERC20(t1).decimals() */\n      swap1\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":743:745  d0 */\n      dup2\n        /* \"contracts/libraries/UniswapV3.sol\":739:745  10**d0 */\n      0xff\n      and\n        /* \"contracts/libraries/UniswapV3.sol\":739:741  10 */\n      0x0a\n        /* \"contracts/libraries/UniswapV3.sol\":739:745  10**d0 */\n      exp\n        /* \"contracts/libraries/UniswapV3.sol\":717:719  t0 */\n      dup10\n        /* \"contracts/libraries/UniswapV3.sol\":710:730  IERC20(t0).balanceOf */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x70a08231\n        /* \"contracts/libraries/UniswapV3.sol\":731:735  pool */\n      dup6\n        /* \"contracts/libraries/UniswapV3.sol\":710:736  IERC20(t0).balanceOf(pool) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_50\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_50:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_52\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_52:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_53\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_53:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":710:745  IERC20(t0).balanceOf(pool) < 10**d0 */\n      lt\n        /* \"contracts/libraries/UniswapV3.sol\":706:755  if (IERC20(t0).balanceOf(pool) < 10**d0) continue */\n      iszero\n      tag_54\n      jumpi\n        /* \"contracts/libraries/UniswapV3.sol\":747:755  continue */\n      pop\n      pop\n      pop\n      jump(tag_35)\n        /* \"contracts/libraries/UniswapV3.sol\":706:755  if (IERC20(t0).balanceOf(pool) < 10**d0) continue */\n    tag_54:\n        /* \"contracts/libraries/UniswapV3.sol\":803:805  d1 */\n      dup1\n        /* \"contracts/libraries/UniswapV3.sol\":799:805  10**d1 */\n      0xff\n      and\n        /* \"contracts/libraries/UniswapV3.sol\":799:801  10 */\n      0x0a\n        /* \"contracts/libraries/UniswapV3.sol\":799:805  10**d1 */\n      exp\n        /* \"contracts/libraries/UniswapV3.sol\":777:779  t1 */\n      dup9\n        /* \"contracts/libraries/UniswapV3.sol\":770:790  IERC20(t1).balanceOf */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x70a08231\n        /* \"contracts/libraries/UniswapV3.sol\":791:795  pool */\n      dup6\n        /* \"contracts/libraries/UniswapV3.sol\":770:796  IERC20(t1).balanceOf(pool) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_55\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_55:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_57\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_57:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_58\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_58:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":770:805  IERC20(t1).balanceOf(pool) < 10**d1 */\n      lt\n        /* \"contracts/libraries/UniswapV3.sol\":766:815  if (IERC20(t1).balanceOf(pool) < 10**d1) continue */\n      iszero\n      tag_59\n      jumpi\n        /* \"contracts/libraries/UniswapV3.sol\":807:815  continue */\n      pop\n      pop\n      pop\n      jump(tag_35)\n        /* \"contracts/libraries/UniswapV3.sol\":766:815  if (IERC20(t1).balanceOf(pool) < 10**d1) continue */\n    tag_59:\n        /* \"contracts/libraries/UniswapV3.sol\":828:838  int24 tick */\n      0x00\n        /* \"contracts/libraries/UniswapV3.sol\":841:870  OracleLibrary.consult(pool,1) */\n      tag_60\n        /* \"contracts/libraries/UniswapV3.sol\":863:867  pool */\n      dup5\n        /* \"contracts/libraries/UniswapV3.sol\":868:869  1 */\n      0x01\n        /* \"contracts/libraries/UniswapV3.sol\":841:862  OracleLibrary.consult */\n      tag_61\n        /* \"contracts/libraries/UniswapV3.sol\":841:870  OracleLibrary.consult(pool,1) */\n      jump\t// in\n    tag_60:\n        /* \"contracts/libraries/UniswapV3.sol\":828:870  int24 tick = OracleLibrary.consult(pool,1) */\n      swap1\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":880:897  uint256 amountOut */\n      0x00\n        /* \"contracts/libraries/UniswapV3.sol\":900:956  OracleLibrary.getQuoteAtTick(tick,uint128(10**d0),t0,t1) */\n      tag_62\n        /* \"contracts/libraries/UniswapV3.sol\":929:933  tick */\n      dup3\n        /* \"contracts/libraries/UniswapV3.sol\":946:948  d0 */\n      dup6\n        /* \"contracts/libraries/UniswapV3.sol\":942:948  10**d0 */\n      0xff\n      and\n        /* \"contracts/libraries/UniswapV3.sol\":942:944  10 */\n      0x0a\n        /* \"contracts/libraries/UniswapV3.sol\":942:948  10**d0 */\n      exp\n        /* \"contracts/libraries/UniswapV3.sol\":950:952  t0 */\n      dup14\n        /* \"contracts/libraries/UniswapV3.sol\":953:955  t1 */\n      dup14\n        /* \"contracts/libraries/UniswapV3.sol\":900:928  OracleLibrary.getQuoteAtTick */\n      tag_63\n        /* \"contracts/libraries/UniswapV3.sol\":900:956  OracleLibrary.getQuoteAtTick(tick,uint128(10**d0),t0,t1) */\n      jump\t// in\n    tag_62:\n        /* \"contracts/libraries/UniswapV3.sol\":880:956  uint256 amountOut = OracleLibrary.getQuoteAtTick(tick,uint128(10**d0),t0,t1) */\n      swap1\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":975:976  0 */\n      0x00\n        /* \"contracts/libraries/UniswapV3.sol\":970:971  i */\n      dup7\n        /* \"contracts/libraries/UniswapV3.sol\":970:976  i == 0 */\n      0xff\n      and\n      eq\n        /* \"contracts/libraries/UniswapV3.sol\":966:1046  if (i == 0){... */\n      iszero\n      tag_64\n      jumpi\n        /* \"contracts/libraries/UniswapV3.sol\":999:1008  amountOut */\n      dup1\n        /* \"contracts/libraries/UniswapV3.sol\":991:1008  price = amountOut */\n      swap9\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":1028:1032  fees */\n      dup7\n        /* \"contracts/libraries/UniswapV3.sol\":1033:1034  i */\n      dup7\n        /* \"contracts/libraries/UniswapV3.sol\":1028:1035  fees[i] */\n      0xff\n      and\n      0x04\n      dup2\n      lt\n      tag_65\n      jumpi\n      invalid\n    tag_65:\n      0x20\n      mul\n      add\n      mload\n        /* \"contracts/libraries/UniswapV3.sol\":1022:1035  fee = fees[i] */\n      0xffff\n      and\n      swap8\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":966:1046  if (i == 0){... */\n    tag_64:\n        /* \"contracts/libraries/UniswapV3.sol\":1063:1064  0 */\n      0x00\n        /* \"contracts/libraries/UniswapV3.sol\":1059:1060  i */\n      dup7\n        /* \"contracts/libraries/UniswapV3.sol\":1059:1064  i > 0 */\n      0xff\n      and\n      gt\n        /* \"contracts/libraries/UniswapV3.sol\":1059:1101  i > 0 && (price == 0 || amountOut < price) */\n      dup1\n      iszero\n      tag_66\n      jumpi\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":1078:1079  0 */\n      0x00\n        /* \"contracts/libraries/UniswapV3.sol\":1069:1074  price */\n      dup10\n        /* \"contracts/libraries/UniswapV3.sol\":1069:1079  price == 0 */\n      eq\n        /* \"contracts/libraries/UniswapV3.sol\":1069:1100  price == 0 || amountOut < price */\n      dup1\n      tag_67\n      jumpi\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":1095:1100  price */\n      dup9\n        /* \"contracts/libraries/UniswapV3.sol\":1083:1092  amountOut */\n      dup2\n        /* \"contracts/libraries/UniswapV3.sol\":1083:1100  amountOut < price */\n      lt\n        /* \"contracts/libraries/UniswapV3.sol\":1069:1100  price == 0 || amountOut < price */\n    tag_67:\n        /* \"contracts/libraries/UniswapV3.sol\":1059:1101  i > 0 && (price == 0 || amountOut < price) */\n    tag_66:\n        /* \"contracts/libraries/UniswapV3.sol\":1055:1176  if (i > 0 && (price == 0 || amountOut < price)) {... */\n      iszero\n      tag_68\n      jumpi\n        /* \"contracts/libraries/UniswapV3.sol\":1125:1134  amountOut */\n      dup1\n        /* \"contracts/libraries/UniswapV3.sol\":1117:1134  price = amountOut */\n      swap9\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":1154:1158  fees */\n      dup7\n        /* \"contracts/libraries/UniswapV3.sol\":1159:1160  i */\n      dup7\n        /* \"contracts/libraries/UniswapV3.sol\":1154:1161  fees[i] */\n      0xff\n      and\n      0x04\n      dup2\n      lt\n      tag_69\n      jumpi\n      invalid\n    tag_69:\n      0x20\n      mul\n      add\n      mload\n        /* \"contracts/libraries/UniswapV3.sol\":1148:1161  fee = fees[i] */\n      0xffff\n      and\n      swap8\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":1055:1176  if (i > 0 && (price == 0 || amountOut < price)) {... */\n    tag_68:\n        /* \"contracts/libraries/UniswapV3.sol\":455:1186  for(uint8 i=0;i<4;i++){... */\n      pop\n      pop\n      pop\n      pop\n      pop\n    tag_35:\n        /* \"contracts/libraries/UniswapV3.sol\":473:476  i++ */\n      dup1\n      dup1\n      0x01\n      add\n      swap2\n      pop\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":455:1186  for(uint8 i=0;i<4;i++){... */\n      jump(tag_33)\n    tag_34:\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":1195:1213  return (price,fee) */\n      pop\n        /* \"contracts/libraries/UniswapV3.sol\":289:1220  function Price(address factory,address t0,address t1) external view returns (uint256 price,uint24 fee){... */\n      swap4\n      pop\n      swap4\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/libraries/OracleLibrary.sol\":270:927  function consult(address pool, uint32 secondsAgo)... */\n    tag_61:\n        /* \"contracts/libraries/OracleLibrary.sol\":367:377  int24 tick */\n      0x00\n        /* \"contracts/libraries/OracleLibrary.sol\":415:416  0 */\n      dup1\n        /* \"contracts/libraries/OracleLibrary.sol\":401:411  secondsAgo */\n      dup3\n        /* \"contracts/libraries/OracleLibrary.sol\":401:416  secondsAgo != 0 */\n      0xffffffff\n      and\n      eq\n      iszero\n        /* \"contracts/libraries/OracleLibrary.sol\":393:423  require(secondsAgo != 0, 'BP') */\n      tag_71\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x02\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x4250000000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_71:\n        /* \"contracts/libraries/OracleLibrary.sol\":434:461  uint32[] memory secondsAgos */\n      0x00\n        /* \"contracts/libraries/OracleLibrary.sol\":477:478  2 */\n      0x02\n        /* \"contracts/libraries/OracleLibrary.sol\":464:479  new uint32[](2) */\n      0xffffffffffffffff\n      dup2\n      gt\n      dup1\n      iszero\n      tag_72\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_72:\n      pop\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_73\n      jumpi\n      dup2\n      0x20\n      add\n      0x20\n      dup3\n      mul\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      dup1\n      dup3\n      add\n      swap2\n      pop\n      pop\n      swap1\n      pop\n    tag_73:\n      pop\n        /* \"contracts/libraries/OracleLibrary.sol\":434:479  uint32[] memory secondsAgos = new uint32[](2) */\n      swap1\n      pop\n        /* \"contracts/libraries/OracleLibrary.sol\":506:516  secondsAgo */\n      dup3\n        /* \"contracts/libraries/OracleLibrary.sol\":489:500  secondsAgos */\n      dup2\n        /* \"contracts/libraries/OracleLibrary.sol\":501:502  0 */\n      0x00\n        /* \"contracts/libraries/OracleLibrary.sol\":489:503  secondsAgos[0] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_74\n      jumpi\n      invalid\n    tag_74:\n      0x20\n      mul\n      0x20\n      add\n      add\n        /* \"contracts/libraries/OracleLibrary.sol\":489:516  secondsAgos[0] = secondsAgo */\n      swap1\n      0xffffffff\n      and\n      swap1\n      dup2\n      0xffffffff\n      and\n      dup2\n      mstore\n      pop\n      pop\n        /* \"contracts/libraries/OracleLibrary.sol\":543:544  0 */\n      0x00\n        /* \"contracts/libraries/OracleLibrary.sol\":526:537  secondsAgos */\n      dup2\n        /* \"contracts/libraries/OracleLibrary.sol\":538:539  1 */\n      0x01\n        /* \"contracts/libraries/OracleLibrary.sol\":526:540  secondsAgos[1] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_75\n      jumpi\n      invalid\n    tag_75:\n      0x20\n      mul\n      0x20\n      add\n      add\n        /* \"contracts/libraries/OracleLibrary.sol\":526:544  secondsAgos[1] = 0 */\n      swap1\n      0xffffffff\n      and\n      swap1\n      dup2\n      0xffffffff\n      and\n      dup2\n      mstore\n      pop\n      pop\n        /* \"contracts/libraries/OracleLibrary.sol\":556:586  int56[] memory tickCumulatives */\n      0x00\n        /* \"contracts/libraries/OracleLibrary.sol\":619:623  pool */\n      dup5\n        /* \"contracts/libraries/OracleLibrary.sol\":604:632  IUniswapV3Pool(pool).observe */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x883bdbfd\n        /* \"contracts/libraries/OracleLibrary.sol\":633:644  secondsAgos */\n      dup4\n        /* \"contracts/libraries/OracleLibrary.sol\":604:645  IUniswapV3Pool(pool).observe(secondsAgos) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup4\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      0x20\n      mul\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_76:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_78\n      jumpi\n      dup1\n      dup3\n      add\n      mload\n      dup2\n      dup5\n      add\n      mstore\n      0x20\n      dup2\n      add\n      swap1\n      pop\n      jump(tag_76)\n    tag_78:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      add\n      swap3\n      pop\n      pop\n      pop\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_79\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_79:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_81\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_81:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x00\n      dup3\n      returndatacopy\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      0x40\n      dup2\n      lt\n      iszero\n      tag_82\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_82:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      mload\n      mload(0x40)\n      swap4\n      swap3\n      swap2\n      swap1\n      dup5\n      0x0100000000\n      dup3\n      gt\n      iszero\n      tag_83\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_83:\n      dup4\n      dup3\n      add\n      swap2\n      pop\n      0x20\n      dup3\n      add\n      dup6\n      dup2\n      gt\n      iszero\n      tag_84\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_84:\n      dup3\n      mload\n      dup7\n      0x20\n      dup3\n      mul\n      dup4\n      add\n      gt\n      0x0100000000\n      dup3\n      gt\n      or\n      iszero\n      tag_85\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_85:\n      dup1\n      dup4\n      mstore\n      0x20\n      dup4\n      add\n      swap3\n      pop\n      pop\n      pop\n      swap1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      0x20\n      mul\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_86:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_88\n      jumpi\n      dup1\n      dup3\n      add\n      mload\n      dup2\n      dup5\n      add\n      mstore\n      0x20\n      dup2\n      add\n      swap1\n      pop\n      jump(tag_86)\n    tag_88:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      add\n      0x40\n      mstore\n      0x20\n      add\n      dup1\n      mload\n      mload(0x40)\n      swap4\n      swap3\n      swap2\n      swap1\n      dup5\n      0x0100000000\n      dup3\n      gt\n      iszero\n      tag_89\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_89:\n      dup4\n      dup3\n      add\n      swap2\n      pop\n      0x20\n      dup3\n      add\n      dup6\n      dup2\n      gt\n      iszero\n      tag_90\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_90:\n      dup3\n      mload\n      dup7\n      0x20\n      dup3\n      mul\n      dup4\n      add\n      gt\n      0x0100000000\n      dup3\n      gt\n      or\n      iszero\n      tag_91\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_91:\n      dup1\n      dup4\n      mstore\n      0x20\n      dup4\n      add\n      swap3\n      pop\n      pop\n      pop\n      swap1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      0x20\n      mul\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_92:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_94\n      jumpi\n      dup1\n      dup3\n      add\n      mload\n      dup2\n      dup5\n      add\n      mstore\n      0x20\n      dup2\n      add\n      swap1\n      pop\n      jump(tag_92)\n    tag_94:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      add\n      0x40\n      mstore\n      pop\n      pop\n      pop\n        /* \"contracts/libraries/OracleLibrary.sol\":555:645  (int56[] memory tickCumulatives, ) =... */\n      pop\n      swap1\n      pop\n        /* \"contracts/libraries/OracleLibrary.sol\":656:682  int56 tickCumulativesDelta */\n      0x00\n        /* \"contracts/libraries/OracleLibrary.sol\":706:721  tickCumulatives */\n      dup2\n        /* \"contracts/libraries/OracleLibrary.sol\":722:723  0 */\n      0x00\n        /* \"contracts/libraries/OracleLibrary.sol\":706:724  tickCumulatives[0] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_95\n      jumpi\n      invalid\n    tag_95:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n        /* \"contracts/libraries/OracleLibrary.sol\":685:700  tickCumulatives */\n      dup3\n        /* \"contracts/libraries/OracleLibrary.sol\":701:702  1 */\n      0x01\n        /* \"contracts/libraries/OracleLibrary.sol\":685:703  tickCumulatives[1] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_96\n      jumpi\n      invalid\n    tag_96:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n        /* \"contracts/libraries/OracleLibrary.sol\":685:724  tickCumulatives[1] - tickCumulatives[0] */\n      sub\n        /* \"contracts/libraries/OracleLibrary.sol\":656:724  int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0] */\n      swap1\n      pop\n        /* \"contracts/libraries/OracleLibrary.sol\":773:783  secondsAgo */\n      dup5\n        /* \"contracts/libraries/OracleLibrary.sol\":750:783  tickCumulativesDelta / secondsAgo */\n      0xffffffff\n      and\n        /* \"contracts/libraries/OracleLibrary.sol\":750:770  tickCumulativesDelta */\n      dup2\n        /* \"contracts/libraries/OracleLibrary.sol\":750:783  tickCumulativesDelta / secondsAgo */\n      0x06\n      signextend\n      dup2\n      tag_97\n      jumpi\n      invalid\n    tag_97:\n      sdiv\n        /* \"contracts/libraries/OracleLibrary.sol\":737:784  tick = int24(tickCumulativesDelta / secondsAgo) */\n      swap4\n      pop\n        /* \"contracts/libraries/OracleLibrary.sol\":866:867  0 */\n      0x00\n        /* \"contracts/libraries/OracleLibrary.sol\":843:863  tickCumulativesDelta */\n      dup2\n        /* \"contracts/libraries/OracleLibrary.sol\":843:867  tickCumulativesDelta < 0 */\n      0x06\n      signextend\n      slt\n        /* \"contracts/libraries/OracleLibrary.sol\":843:911  tickCumulativesDelta < 0 && (tickCumulativesDelta % secondsAgo != 0) */\n      dup1\n      iszero\n      tag_98\n      jumpi\n      pop\n        /* \"contracts/libraries/OracleLibrary.sol\":909:910  0 */\n      0x00\n        /* \"contracts/libraries/OracleLibrary.sol\":895:905  secondsAgo */\n      dup6\n        /* \"contracts/libraries/OracleLibrary.sol\":872:905  tickCumulativesDelta % secondsAgo */\n      0xffffffff\n      and\n        /* \"contracts/libraries/OracleLibrary.sol\":872:892  tickCumulativesDelta */\n      dup3\n        /* \"contracts/libraries/OracleLibrary.sol\":872:905  tickCumulativesDelta % secondsAgo */\n      0x06\n      signextend\n      dup2\n      tag_99\n      jumpi\n      invalid\n    tag_99:\n      smod\n        /* \"contracts/libraries/OracleLibrary.sol\":872:910  tickCumulativesDelta % secondsAgo != 0 */\n      0x06\n      signextend\n      eq\n      iszero\n        /* \"contracts/libraries/OracleLibrary.sol\":843:911  tickCumulativesDelta < 0 && (tickCumulativesDelta % secondsAgo != 0) */\n    tag_98:\n        /* \"contracts/libraries/OracleLibrary.sol\":839:919  if (tickCumulativesDelta < 0 && (tickCumulativesDelta % secondsAgo != 0)) tick-- */\n      iszero\n      tag_100\n      jumpi\n        /* \"contracts/libraries/OracleLibrary.sol\":913:919  tick-- */\n      dup4\n      dup1\n      0x01\n      swap1\n      sub\n      swap5\n      pop\n      pop\n        /* \"contracts/libraries/OracleLibrary.sol\":839:919  if (tickCumulativesDelta < 0 && (tickCumulativesDelta % secondsAgo != 0)) tick-- */\n    tag_100:\n        /* \"contracts/libraries/OracleLibrary.sol\":270:927  function consult(address pool, uint32 secondsAgo)... */\n      pop\n      pop\n      pop\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/libraries/OracleLibrary.sol\":934:1889  function getQuoteAtTick(... */\n    tag_63:\n        /* \"contracts/libraries/OracleLibrary.sol\":1090:1109  uint256 quoteAmount */\n      0x00\n        /* \"contracts/libraries/OracleLibrary.sol\":1121:1141  uint160 sqrtRatioX96 */\n      dup1\n        /* \"contracts/libraries/OracleLibrary.sol\":1144:1177  TickMath.getSqrtRatioAtTick(tick) */\n      tag_102\n        /* \"contracts/libraries/OracleLibrary.sol\":1172:1176  tick */\n      dup7\n        /* \"contracts/libraries/OracleLibrary.sol\":1144:1171  TickMath.getSqrtRatioAtTick */\n      tag_103\n        /* \"contracts/libraries/OracleLibrary.sol\":1144:1177  TickMath.getSqrtRatioAtTick(tick) */\n      jump\t// in\n    tag_102:\n        /* \"contracts/libraries/OracleLibrary.sol\":1121:1177  uint160 sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick) */\n      swap1\n      pop\n        /* \"contracts/libraries/OracleLibrary.sol\":1312:1329  type(uint128).max */\n      0xffffffffffffffffffffffffffffffff\n        /* \"contracts/libraries/OracleLibrary.sol\":1296:1329  sqrtRatioX96 <= type(uint128).max */\n      dup1\n      and\n        /* \"contracts/libraries/OracleLibrary.sol\":1296:1308  sqrtRatioX96 */\n      dup2\n        /* \"contracts/libraries/OracleLibrary.sol\":1296:1329  sqrtRatioX96 <= type(uint128).max */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      gt\n        /* \"contracts/libraries/OracleLibrary.sol\":1292:1883  if (sqrtRatioX96 <= type(uint128).max) {... */\n      tag_104\n      jumpi\n        /* \"contracts/libraries/OracleLibrary.sol\":1345:1362  uint256 ratioX192 */\n      0x00\n        /* \"contracts/libraries/OracleLibrary.sol\":1389:1401  sqrtRatioX96 */\n      dup2\n        /* \"contracts/libraries/OracleLibrary.sol\":1365:1401  uint256(sqrtRatioX96) * sqrtRatioX96 */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/libraries/OracleLibrary.sol\":1373:1385  sqrtRatioX96 */\n      dup3\n        /* \"contracts/libraries/OracleLibrary.sol\":1365:1386  uint256(sqrtRatioX96) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/libraries/OracleLibrary.sol\":1365:1401  uint256(sqrtRatioX96) * sqrtRatioX96 */\n      mul\n        /* \"contracts/libraries/OracleLibrary.sol\":1345:1401  uint256 ratioX192 = uint256(sqrtRatioX96) * sqrtRatioX96 */\n      swap1\n      pop\n        /* \"contracts/libraries/OracleLibrary.sol\":1441:1451  quoteToken */\n      dup4\n        /* \"contracts/libraries/OracleLibrary.sol\":1429:1451  baseToken < quoteToken */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/libraries/OracleLibrary.sol\":1429:1438  baseToken */\n      dup6\n        /* \"contracts/libraries/OracleLibrary.sol\":1429:1451  baseToken < quoteToken */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      lt\n        /* \"contracts/libraries/OracleLibrary.sol\":1429:1585  baseToken < quoteToken... */\n      tag_105\n      jumpi\n        /* \"contracts/libraries/OracleLibrary.sol\":1537:1585  FullMath.mulDiv(1 << 192, baseAmount, ratioX192) */\n      tag_106\n        /* \"contracts/libraries/OracleLibrary.sol\":1553:1561  1 << 192 */\n      0x01000000000000000000000000000000000000000000000000\n        /* \"contracts/libraries/OracleLibrary.sol\":1563:1573  baseAmount */\n      dup8\n        /* \"contracts/libraries/OracleLibrary.sol\":1537:1585  FullMath.mulDiv(1 << 192, baseAmount, ratioX192) */\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/libraries/OracleLibrary.sol\":1575:1584  ratioX192 */\n      dup4\n        /* \"contracts/libraries/OracleLibrary.sol\":1537:1552  FullMath.mulDiv */\n      tag_107\n        /* \"contracts/libraries/OracleLibrary.sol\":1537:1585  FullMath.mulDiv(1 << 192, baseAmount, ratioX192) */\n      jump\t// in\n    tag_106:\n        /* \"contracts/libraries/OracleLibrary.sol\":1429:1585  baseToken < quoteToken... */\n      jump(tag_108)\n    tag_105:\n        /* \"contracts/libraries/OracleLibrary.sol\":1470:1518  FullMath.mulDiv(ratioX192, baseAmount, 1 << 192) */\n      tag_109\n        /* \"contracts/libraries/OracleLibrary.sol\":1486:1495  ratioX192 */\n      dup2\n        /* \"contracts/libraries/OracleLibrary.sol\":1497:1507  baseAmount */\n      dup8\n        /* \"contracts/libraries/OracleLibrary.sol\":1470:1518  FullMath.mulDiv(ratioX192, baseAmount, 1 << 192) */\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/libraries/OracleLibrary.sol\":1509:1517  1 << 192 */\n      0x01000000000000000000000000000000000000000000000000\n        /* \"contracts/libraries/OracleLibrary.sol\":1470:1485  FullMath.mulDiv */\n      tag_107\n        /* \"contracts/libraries/OracleLibrary.sol\":1470:1518  FullMath.mulDiv(ratioX192, baseAmount, 1 << 192) */\n      jump\t// in\n    tag_109:\n        /* \"contracts/libraries/OracleLibrary.sol\":1429:1585  baseToken < quoteToken... */\n    tag_108:\n        /* \"contracts/libraries/OracleLibrary.sol\":1415:1585  quoteAmount = baseToken < quoteToken... */\n      swap3\n      pop\n        /* \"contracts/libraries/OracleLibrary.sol\":1292:1883  if (sqrtRatioX96 <= type(uint128).max) {... */\n      pop\n      jump(tag_110)\n    tag_104:\n        /* \"contracts/libraries/OracleLibrary.sol\":1616:1633  uint256 ratioX128 */\n      0x00\n        /* \"contracts/libraries/OracleLibrary.sol\":1636:1688  FullMath.mulDiv(sqrtRatioX96, sqrtRatioX96, 1 << 64) */\n      tag_111\n        /* \"contracts/libraries/OracleLibrary.sol\":1652:1664  sqrtRatioX96 */\n      dup3\n        /* \"contracts/libraries/OracleLibrary.sol\":1636:1688  FullMath.mulDiv(sqrtRatioX96, sqrtRatioX96, 1 << 64) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/libraries/OracleLibrary.sol\":1666:1678  sqrtRatioX96 */\n      dup4\n        /* \"contracts/libraries/OracleLibrary.sol\":1636:1688  FullMath.mulDiv(sqrtRatioX96, sqrtRatioX96, 1 << 64) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/libraries/OracleLibrary.sol\":1680:1687  1 << 64 */\n      0x010000000000000000\n        /* \"contracts/libraries/OracleLibrary.sol\":1636:1651  FullMath.mulDiv */\n      tag_107\n        /* \"contracts/libraries/OracleLibrary.sol\":1636:1688  FullMath.mulDiv(sqrtRatioX96, sqrtRatioX96, 1 << 64) */\n      jump\t// in\n    tag_111:\n        /* \"contracts/libraries/OracleLibrary.sol\":1616:1688  uint256 ratioX128 = FullMath.mulDiv(sqrtRatioX96, sqrtRatioX96, 1 << 64) */\n      swap1\n      pop\n        /* \"contracts/libraries/OracleLibrary.sol\":1728:1738  quoteToken */\n      dup4\n        /* \"contracts/libraries/OracleLibrary.sol\":1716:1738  baseToken < quoteToken */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/libraries/OracleLibrary.sol\":1716:1725  baseToken */\n      dup6\n        /* \"contracts/libraries/OracleLibrary.sol\":1716:1738  baseToken < quoteToken */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      lt\n        /* \"contracts/libraries/OracleLibrary.sol\":1716:1872  baseToken < quoteToken... */\n      tag_112\n      jumpi\n        /* \"contracts/libraries/OracleLibrary.sol\":1824:1872  FullMath.mulDiv(1 << 128, baseAmount, ratioX128) */\n      tag_113\n        /* \"contracts/libraries/OracleLibrary.sol\":1840:1848  1 << 128 */\n      0x0100000000000000000000000000000000\n        /* \"contracts/libraries/OracleLibrary.sol\":1850:1860  baseAmount */\n      dup8\n        /* \"contracts/libraries/OracleLibrary.sol\":1824:1872  FullMath.mulDiv(1 << 128, baseAmount, ratioX128) */\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/libraries/OracleLibrary.sol\":1862:1871  ratioX128 */\n      dup4\n        /* \"contracts/libraries/OracleLibrary.sol\":1824:1839  FullMath.mulDiv */\n      tag_107\n        /* \"contracts/libraries/OracleLibrary.sol\":1824:1872  FullMath.mulDiv(1 << 128, baseAmount, ratioX128) */\n      jump\t// in\n    tag_113:\n        /* \"contracts/libraries/OracleLibrary.sol\":1716:1872  baseToken < quoteToken... */\n      jump(tag_114)\n    tag_112:\n        /* \"contracts/libraries/OracleLibrary.sol\":1757:1805  FullMath.mulDiv(ratioX128, baseAmount, 1 << 128) */\n      tag_115\n        /* \"contracts/libraries/OracleLibrary.sol\":1773:1782  ratioX128 */\n      dup2\n        /* \"contracts/libraries/OracleLibrary.sol\":1784:1794  baseAmount */\n      dup8\n        /* \"contracts/libraries/OracleLibrary.sol\":1757:1805  FullMath.mulDiv(ratioX128, baseAmount, 1 << 128) */\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/libraries/OracleLibrary.sol\":1796:1804  1 << 128 */\n      0x0100000000000000000000000000000000\n        /* \"contracts/libraries/OracleLibrary.sol\":1757:1772  FullMath.mulDiv */\n      tag_107\n        /* \"contracts/libraries/OracleLibrary.sol\":1757:1805  FullMath.mulDiv(ratioX128, baseAmount, 1 << 128) */\n      jump\t// in\n    tag_115:\n        /* \"contracts/libraries/OracleLibrary.sol\":1716:1872  baseToken < quoteToken... */\n    tag_114:\n        /* \"contracts/libraries/OracleLibrary.sol\":1702:1872  quoteAmount = baseToken < quoteToken... */\n      swap3\n      pop\n        /* \"contracts/libraries/OracleLibrary.sol\":1292:1883  if (sqrtRatioX96 <= type(uint128).max) {... */\n      pop\n    tag_110:\n        /* \"contracts/libraries/OracleLibrary.sol\":934:1889  function getQuoteAtTick(... */\n      pop\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1362:3942  function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {... */\n    tag_103:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1425:1445  uint160 sqrtPriceX96 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1457:1472  uint256 absTick */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1482:1483  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1475:1479  tick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1475:1483  tick < 0 */\n      0x02\n      signextend\n      slt\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1475:1532  tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick)) */\n      tag_117\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1526:1530  tick */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1519:1531  int256(tick) */\n      0x02\n      signextend\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1475:1532  tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick)) */\n      jump(tag_118)\n    tag_117:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1502:1506  tick */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1495:1507  int256(tick) */\n      0x02\n      signextend\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1494:1507  -int256(tick) */\n      0x00\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1475:1532  tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick)) */\n    tag_118:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1457:1532  uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick)) */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":484:491  -887272 */\n      0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":644:653  -MIN_TICK */\n      0x00\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1561:1578  uint256(MAX_TICK) */\n      0x02\n      signextend\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1550:1557  absTick */\n      dup2\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1550:1578  absTick <= uint256(MAX_TICK) */\n      gt\n      iszero\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1542:1584  require(absTick <= uint256(MAX_TICK), 'T') */\n      tag_119\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x01\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x5400000000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_119:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1595:1608  uint256 ratio */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1628:1629  0 */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1621:1624  0x1 */\n      0x01\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1611:1618  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1611:1624  absTick & 0x1 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1611:1629  absTick & 0x1 != 0 */\n      eq\n      iszero\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1611:1704  absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000 */\n      tag_120\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1669:1704  0x100000000000000000000000000000000 */\n      0x0100000000000000000000000000000000\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1611:1704  absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000 */\n      jump(tag_121)\n    tag_120:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1632:1666  0xfffcb933bd6fad37aa2d162d1a594001 */\n      0xfffcb933bd6fad37aa2d162d1a594001\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1611:1704  absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000 */\n    tag_121:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1595:1704  uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000 */\n      0xffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1735:1736  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1728:1731  0x2 */\n      0x02\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1718:1725  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1718:1731  absTick & 0x2 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1718:1736  absTick & 0x2 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1714:1797  if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128 */\n      tag_122\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1794:1797  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1755:1789  0xfff97272373d413259a46990580e213a */\n      0xfff97272373d413259a46990580e213a\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1747:1752  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1747:1789  ratio * 0xfff97272373d413259a46990580e213a */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1746:1797  (ratio * 0xfff97272373d413259a46990580e213a) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1738:1797  ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1714:1797  if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128 */\n    tag_122:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1828:1829  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1821:1824  0x4 */\n      0x04\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1811:1818  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1811:1824  absTick & 0x4 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1811:1829  absTick & 0x4 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1807:1890  if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128 */\n      tag_123\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1887:1890  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1848:1882  0xfff2e50f5f656932ef12357cf3c7fdcc */\n      0xfff2e50f5f656932ef12357cf3c7fdcc\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1840:1845  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1840:1882  ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1839:1890  (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1831:1890  ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1807:1890  if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128 */\n    tag_123:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1921:1922  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1914:1917  0x8 */\n      0x08\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1904:1911  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1904:1917  absTick & 0x8 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1904:1922  absTick & 0x8 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1900:1983  if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128 */\n      tag_124\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1980:1983  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1941:1975  0xffe5caca7e10e4e61c3624eaa0941cd0 */\n      0xffe5caca7e10e4e61c3624eaa0941cd0\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1933:1938  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1933:1975  ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0 */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1932:1983  (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1924:1983  ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1900:1983  if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128 */\n    tag_124:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2015:2016  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2007:2011  0x10 */\n      0x10\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1997:2004  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1997:2011  absTick & 0x10 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1997:2016  absTick & 0x10 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1993:2077  if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128 */\n      tag_125\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2074:2077  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2035:2069  0xffcb9843d60f6159c9db58835c926644 */\n      0xffcb9843d60f6159c9db58835c926644\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2027:2032  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2027:2069  ratio * 0xffcb9843d60f6159c9db58835c926644 */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2026:2077  (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2018:2077  ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1993:2077  if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128 */\n    tag_125:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2109:2110  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2101:2105  0x20 */\n      0x20\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2091:2098  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2091:2105  absTick & 0x20 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2091:2110  absTick & 0x20 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2087:2171  if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128 */\n      tag_126\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2168:2171  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2129:2163  0xff973b41fa98c081472e6896dfb254c0 */\n      0xff973b41fa98c081472e6896dfb254c0\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2121:2126  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2121:2163  ratio * 0xff973b41fa98c081472e6896dfb254c0 */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2120:2171  (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2112:2171  ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2087:2171  if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128 */\n    tag_126:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2203:2204  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2195:2199  0x40 */\n      0x40\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2185:2192  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2185:2199  absTick & 0x40 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2185:2204  absTick & 0x40 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2181:2265  if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128 */\n      tag_127\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2262:2265  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2223:2257  0xff2ea16466c96a3843ec78b326b52861 */\n      0xff2ea16466c96a3843ec78b326b52861\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2215:2220  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2215:2257  ratio * 0xff2ea16466c96a3843ec78b326b52861 */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2214:2265  (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2206:2265  ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2181:2265  if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128 */\n    tag_127:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2297:2298  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2289:2293  0x80 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2279:2286  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2279:2293  absTick & 0x80 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2279:2298  absTick & 0x80 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2275:2359  if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128 */\n      tag_128\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2356:2359  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2317:2351  0xfe5dee046a99a2a811c461f1969c3053 */\n      0xfe5dee046a99a2a811c461f1969c3053\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2309:2314  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2309:2351  ratio * 0xfe5dee046a99a2a811c461f1969c3053 */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2308:2359  (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2300:2359  ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2275:2359  if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128 */\n    tag_128:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2392:2393  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2383:2388  0x100 */\n      0x0100\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2373:2380  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2373:2388  absTick & 0x100 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2373:2393  absTick & 0x100 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2369:2454  if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128 */\n      tag_129\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2451:2454  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2412:2446  0xfcbe86c7900a88aedcffc83b479aa3a4 */\n      0xfcbe86c7900a88aedcffc83b479aa3a4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2404:2409  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2404:2446  ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4 */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2403:2454  (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2395:2454  ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2369:2454  if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128 */\n    tag_129:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2487:2488  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2478:2483  0x200 */\n      0x0200\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2468:2475  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2468:2483  absTick & 0x200 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2468:2488  absTick & 0x200 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2464:2549  if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128 */\n      tag_130\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2546:2549  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2507:2541  0xf987a7253ac413176f2b074cf7815e54 */\n      0xf987a7253ac413176f2b074cf7815e54\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2499:2504  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2499:2541  ratio * 0xf987a7253ac413176f2b074cf7815e54 */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2498:2549  (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2490:2549  ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2464:2549  if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128 */\n    tag_130:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2582:2583  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2573:2578  0x400 */\n      0x0400\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2563:2570  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2563:2578  absTick & 0x400 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2563:2583  absTick & 0x400 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2559:2644  if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128 */\n      tag_131\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2641:2644  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2602:2636  0xf3392b0822b70005940c7a398e4b70f3 */\n      0xf3392b0822b70005940c7a398e4b70f3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2594:2599  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2594:2636  ratio * 0xf3392b0822b70005940c7a398e4b70f3 */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2593:2644  (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2585:2644  ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2559:2644  if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128 */\n    tag_131:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2677:2678  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2668:2673  0x800 */\n      0x0800\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2658:2665  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2658:2673  absTick & 0x800 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2658:2678  absTick & 0x800 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2654:2739  if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128 */\n      tag_132\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2736:2739  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2697:2731  0xe7159475a2c29b7443b29c7fa6e889d9 */\n      0xe7159475a2c29b7443b29c7fa6e889d9\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2689:2694  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2689:2731  ratio * 0xe7159475a2c29b7443b29c7fa6e889d9 */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2688:2739  (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2680:2739  ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2654:2739  if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128 */\n    tag_132:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2773:2774  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2763:2769  0x1000 */\n      0x1000\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2753:2760  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2753:2769  absTick & 0x1000 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2753:2774  absTick & 0x1000 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2749:2835  if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128 */\n      tag_133\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2832:2835  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2793:2827  0xd097f3bdfd2022b8845ad8f792aa5825 */\n      0xd097f3bdfd2022b8845ad8f792aa5825\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2785:2790  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2785:2827  ratio * 0xd097f3bdfd2022b8845ad8f792aa5825 */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2784:2835  (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2776:2835  ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2749:2835  if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128 */\n    tag_133:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2869:2870  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2859:2865  0x2000 */\n      0x2000\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2849:2856  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2849:2865  absTick & 0x2000 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2849:2870  absTick & 0x2000 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2845:2931  if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128 */\n      tag_134\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2928:2931  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2889:2923  0xa9f746462d870fdf8a65dc1f90e061e5 */\n      0xa9f746462d870fdf8a65dc1f90e061e5\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2881:2886  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2881:2923  ratio * 0xa9f746462d870fdf8a65dc1f90e061e5 */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2880:2931  (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2872:2931  ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2845:2931  if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128 */\n    tag_134:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2965:2966  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2955:2961  0x4000 */\n      0x4000\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2945:2952  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2945:2961  absTick & 0x4000 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2945:2966  absTick & 0x4000 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2941:3027  if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128 */\n      tag_135\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3024:3027  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2985:3019  0x70d869a156d2a1b890bb3df62baf32f7 */\n      0x70d869a156d2a1b890bb3df62baf32f7\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2977:2982  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2977:3019  ratio * 0x70d869a156d2a1b890bb3df62baf32f7 */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2976:3027  (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2968:3027  ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2941:3027  if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128 */\n    tag_135:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3061:3062  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3051:3057  0x8000 */\n      0x8000\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3041:3048  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3041:3057  absTick & 0x8000 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3041:3062  absTick & 0x8000 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3037:3123  if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128 */\n      tag_136\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3120:3123  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3081:3115  0x31be135f97d08fd981231505542fcfa6 */\n      0x31be135f97d08fd981231505542fcfa6\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3073:3078  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3073:3115  ratio * 0x31be135f97d08fd981231505542fcfa6 */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3072:3123  (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3064:3123  ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3037:3123  if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128 */\n    tag_136:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3158:3159  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3147:3154  0x10000 */\n      0x010000\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3137:3144  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3137:3154  absTick & 0x10000 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3137:3159  absTick & 0x10000 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3133:3219  if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128 */\n      tag_137\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3216:3219  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3178:3211  0x9aa508b5b7a84e1c677de54f3e99bc9 */\n      0x09aa508b5b7a84e1c677de54f3e99bc9\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3170:3175  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3170:3211  ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9 */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3169:3219  (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3161:3219  ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3133:3219  if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128 */\n    tag_137:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3254:3255  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3243:3250  0x20000 */\n      0x020000\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3233:3240  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3233:3250  absTick & 0x20000 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3233:3255  absTick & 0x20000 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3229:3314  if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128 */\n      tag_138\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3311:3314  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3274:3306  0x5d6af8dedb81196699c329225ee604 */\n      0x5d6af8dedb81196699c329225ee604\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3266:3271  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3266:3306  ratio * 0x5d6af8dedb81196699c329225ee604 */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3265:3314  (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3257:3314  ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3229:3314  if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128 */\n    tag_138:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3349:3350  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3338:3345  0x40000 */\n      0x040000\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3328:3335  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3328:3345  absTick & 0x40000 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3328:3350  absTick & 0x40000 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3324:3407  if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128 */\n      tag_139\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3404:3407  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3369:3399  0x2216e584f5fa1ea926041bedfe98 */\n      0x2216e584f5fa1ea926041bedfe98\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3361:3366  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3361:3399  ratio * 0x2216e584f5fa1ea926041bedfe98 */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3360:3407  (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3352:3407  ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3324:3407  if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128 */\n    tag_139:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3442:3443  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3431:3438  0x80000 */\n      0x080000\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3421:3428  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3421:3438  absTick & 0x80000 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3421:3443  absTick & 0x80000 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3417:3495  if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128 */\n      tag_140\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3492:3495  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3462:3487  0x48a170391f7dc42444e8fa2 */\n      0x048a170391f7dc42444e8fa2\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3454:3459  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3454:3487  ratio * 0x48a170391f7dc42444e8fa2 */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3453:3495  (ratio * 0x48a170391f7dc42444e8fa2) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3445:3495  ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3417:3495  if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128 */\n    tag_140:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3517:3518  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3510:3514  tick */\n      dup5\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3510:3518  tick > 0 */\n      0x02\n      signextend\n      sgt\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3506:3553  if (tick > 0) ratio = type(uint256).max / ratio */\n      iszero\n      tag_141\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3548:3553  ratio */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3528:3545  type(uint256).max */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3528:3553  type(uint256).max / ratio */\n      dup2\n      tag_142\n      jumpi\n      invalid\n    tag_142:\n      div\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3520:3553  ratio = type(uint256).max / ratio */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3506:3553  if (tick > 0) ratio = type(uint256).max / ratio */\n    tag_141:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3924:3925  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3912:3919  1 << 32 */\n      0x0100000000\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3903:3908  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3903:3920  ratio % (1 << 32) */\n      dup2\n      tag_143\n      jumpi\n      invalid\n    tag_143:\n      mod\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3903:3925  ratio % (1 << 32) == 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3903:3933  ratio % (1 << 32) == 0 ? 0 : 1 */\n      tag_144\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3932:3933  1 */\n      0x01\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3903:3933  ratio % (1 << 32) == 0 ? 0 : 1 */\n      jump(tag_145)\n    tag_144:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3928:3929  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3903:3933  ratio % (1 << 32) == 0 ? 0 : 1 */\n    tag_145:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3886:3934  (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1) */\n      0xff\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3896:3898  32 */\n      0x20\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3887:3892  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3887:3898  ratio >> 32 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3886:3934  (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1) */\n      add\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3863:3935  sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1)) */\n      swap3\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1362:3942  function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {... */\n      pop\n      pop\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":749:4525  function mulDiv(... */\n    tag_107:\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":861:875  uint256 result */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1190:1203  uint256 prod0 */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1258:1271  uint256 prod1 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1375:1376  0 */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1371:1377  not(0) */\n      not\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1368:1369  b */\n      dup6\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1365:1366  a */\n      dup8\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1358:1378  mulmod(a, b, not(0)) */\n      mulmod\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1407:1408  b */\n      dup6\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1404:1405  a */\n      dup8\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1400:1409  mul(a, b) */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1391:1409  prod0 := mul(a, b) */\n      swap3\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1458:1463  prod0 */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1454:1456  mm */\n      dup2\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1451:1464  lt(mm, prod0) */\n      lt\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1443:1448  prod0 */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1439:1441  mm */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1435:1449  sub(mm, prod0) */\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1431:1465  sub(sub(mm, prod0), lt(mm, prod0)) */\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1422:1465  prod1 := sub(sub(mm, prod0), lt(mm, prod0)) */\n      swap2\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1334:1475  {... */\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1556:1557  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1547:1552  prod1 */\n      dup2\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1547:1557  prod1 == 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1543:1722  if (prod1 == 0) {... */\n      iszero\n      tag_147\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1595:1596  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1581:1592  denominator */\n      dup5\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1581:1596  denominator > 0 */\n      gt\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1573:1597  require(denominator > 0) */\n      tag_148\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_148:\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1659:1670  denominator */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1652:1657  prod0 */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1648:1671  div(prod0, denominator) */\n      div\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1638:1671  result := div(prod0, denominator) */\n      swap3\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1698:1711  return result */\n      pop\n      pop\n      jump(tag_146)\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1543:1722  if (prod1 == 0) {... */\n    tag_147:\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1849:1854  prod1 */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1835:1846  denominator */\n      dup5\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1835:1854  denominator > prod1 */\n      gt\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1827:1855  require(denominator > prod1) */\n      tag_149\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_149:\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2132:2149  uint256 remainder */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2208:2219  denominator */\n      dup5\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2205:2206  b */\n      dup7\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2202:2203  a */\n      dup9\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2195:2220  mulmod(a, b, denominator) */\n      mulmod\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2182:2220  remainder := mulmod(a, b, denominator) */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2351:2356  prod0 */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2340:2349  remainder */\n      dup2\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2337:2357  gt(remainder, prod0) */\n      gt\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2330:2335  prod1 */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2326:2358  sub(prod1, gt(remainder, prod0)) */\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2317:2358  prod1 := sub(prod1, gt(remainder, prod0)) */\n      swap2\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2391:2400  remainder */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2384:2389  prod0 */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2380:2401  sub(prod0, remainder) */\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2371:2401  prod0 := sub(prod0, remainder) */\n      swap3\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2560:2572  uint256 twos */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2590:2601  denominator */\n      dup6\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2576:2587  denominator */\n      dup7\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2575:2587  -denominator */\n      0x00\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2575:2601  -denominator & denominator */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2560:2601  uint256 twos = -denominator & denominator */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2712:2716  twos */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2699:2710  denominator */\n      dup7\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2695:2717  div(denominator, twos) */\n      div\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2680:2717  denominator := div(denominator, twos) */\n      swap6\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2834:2838  twos */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2827:2832  prod0 */\n      dup5\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2823:2839  div(prod0, twos) */\n      div\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2814:2839  prod0 := div(prod0, twos) */\n      swap4\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3088:3089  1 */\n      0x01\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3081:3085  twos */\n      dup2\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3074:3078  twos */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3071:3072  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3067:3079  sub(0, twos) */\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3063:3086  div(sub(0, twos), twos) */\n      div\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3059:3090  add(div(sub(0, twos), twos), 1) */\n      add\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3051:3090  twos := add(div(sub(0, twos), twos), 1) */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3126:3130  twos */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3118:3123  prod1 */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3118:3130  prod1 * twos */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3109:3130  prod0 |= prod1 * twos */\n      dup5\n      or\n      swap4\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3464:3475  uint256 inv */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3498:3499  2 */\n      0x02\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3483:3494  denominator */\n      dup8\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3479:3480  3 */\n      0x03\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3479:3494  3 * denominator */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3478:3499  (3 * denominator) ^ 2 */\n      xor\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3464:3499  uint256 inv = (3 * denominator) ^ 2 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3739:3742  inv */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3725:3736  denominator */\n      dup8\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3725:3742  denominator * inv */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3721:3722  2 */\n      0x02\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3721:3742  2 - denominator * inv */\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3714:3742  inv *= 2 - denominator * inv */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3797:3800  inv */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3783:3794  denominator */\n      dup8\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3783:3800  denominator * inv */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3779:3780  2 */\n      0x02\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3779:3800  2 - denominator * inv */\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3772:3800  inv *= 2 - denominator * inv */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3856:3859  inv */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3842:3853  denominator */\n      dup8\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3842:3859  denominator * inv */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3838:3839  2 */\n      0x02\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3838:3859  2 - denominator * inv */\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3831:3859  inv *= 2 - denominator * inv */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3915:3918  inv */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3901:3912  denominator */\n      dup8\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3901:3918  denominator * inv */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3897:3898  2 */\n      0x02\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3897:3918  2 - denominator * inv */\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3890:3918  inv *= 2 - denominator * inv */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3974:3977  inv */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3960:3971  denominator */\n      dup8\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3960:3977  denominator * inv */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3956:3957  2 */\n      0x02\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3956:3977  2 - denominator * inv */\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3949:3977  inv *= 2 - denominator * inv */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":4034:4037  inv */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":4020:4031  denominator */\n      dup8\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":4020:4037  denominator * inv */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":4016:4017  2 */\n      0x02\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":4016:4037  2 - denominator * inv */\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":4009:4037  inv *= 2 - denominator * inv */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":4492:4495  inv */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":4484:4489  prod0 */\n      dup6\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":4484:4495  prod0 * inv */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":4475:4495  result = prod0 * inv */\n      swap6\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":4505:4518  return result */\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":749:4525  function mulDiv(... */\n    tag_146:\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n    tag_12:\n      mload(0x40)\n      dup1\n      0x80\n      add\n      0x40\n      mstore\n      dup1\n      0x04\n      swap1\n      0x20\n      dup3\n      mul\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      dup1\n      dup3\n      add\n      swap2\n      pop\n      pop\n      swap1\n      pop\n      pop\n      swap1\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220415a6c0e2291f730020f32bf9e2fe03aaa4094b1705e09fca6410f44c8836d6e64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "611431610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c8063bcbcaa2914610045578063c361e0b1146100f3575b600080fd5b6100db600480360360a081101561005b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050610197565b60405180821515815260200191505060405180910390f35b6101756004803603606081101561010957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610492565b604051808381526020018262ffffff1681526020019250505060405180910390f35b6000806040518060800160405280606461ffff1681526020016101f461ffff168152602001610bb861ffff16815260200161271061ffff1681525090506101dc6113d9565b60005b60048160ff1610156104815760008973ffffffffffffffffffffffffffffffffffffffff16631698ee828a8a878660ff166004811061021a57fe5b60200201516040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018261ffff168152602001935050505060206040518083038186803b15801561029157600080fd5b505afa1580156102a5573d6000803e3d6000fd5b505050506040513d60208110156102bb57600080fd5b81019080805190602001909291905050509050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156103095750610474565b868973ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561037157600080fd5b505afa158015610385573d6000803e3d6000fd5b505050506040513d602081101561039b57600080fd5b810190808051906020019092919050505010156103b85750610474565b858873ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561042057600080fd5b505afa158015610434573d6000803e3d6000fd5b505050506040513d602081101561044a57600080fd5b810190808051906020019092919050505010156104675750610474565b6001945050505050610489565b80806001019150506101df565b506000925050505b95945050505050565b60008060006040518060800160405280606461ffff1681526020016101f461ffff168152602001610bb861ffff16815260200161271061ffff16815250905060005b60048160ff1610156109185760008773ffffffffffffffffffffffffffffffffffffffff16631698ee828888868660ff166004811061050f57fe5b60200201516040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018261ffff168152602001935050505060206040518083038186803b15801561058657600080fd5b505afa15801561059a573d6000803e3d6000fd5b505050506040513d60208110156105b057600080fd5b81019080805190602001909291905050509050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156105fe575061090b565b60008773ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561064657600080fd5b505afa15801561065a573d6000803e3d6000fd5b505050506040513d602081101561067057600080fd5b8101908080519060200190929190505050905060008773ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156106cb57600080fd5b505afa1580156106df573d6000803e3d6000fd5b505050506040513d60208110156106f557600080fd5b810190808051906020019092919050505090508160ff16600a0a8973ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561077657600080fd5b505afa15801561078a573d6000803e3d6000fd5b505050506040513d60208110156107a057600080fd5b810190808051906020019092919050505010156107bf5750505061090b565b8060ff16600a0a8873ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561082d57600080fd5b505afa158015610841573d6000803e3d6000fd5b505050506040513d602081101561085757600080fd5b810190808051906020019092919050505010156108765750505061090b565b6000610883846001610922565b90506000610899828560ff16600a0a8d8d610cc1565b905060008660ff1614156108c557809850868660ff16600481106108b957fe5b602002015161ffff1697505b60008660ff161180156108e2575060008914806108e157508881105b5b1561090557809850868660ff16600481106108f957fe5b602002015161ffff1697505b50505050505b80806001019150506104d4565b5050935093915050565b6000808263ffffffff1614156109a0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260028152602001807f425000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000600267ffffffffffffffff811180156109ba57600080fd5b506040519080825280602002602001820160405280156109e95781602001602082028036833780820191505090505b50905082816000815181106109fa57fe5b602002602001019063ffffffff16908163ffffffff1681525050600081600181518110610a2357fe5b602002602001019063ffffffff16908163ffffffff168152505060008473ffffffffffffffffffffffffffffffffffffffff1663883bdbfd836040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019060200280838360005b83811015610aae578082015181840152602081019050610a93565b505050509050019250505060006040518083038186803b158015610ad157600080fd5b505afa158015610ae5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506040811015610b0f57600080fd5b8101908080516040519392919084640100000000821115610b2f57600080fd5b83820191506020820185811115610b4557600080fd5b8251866020820283011164010000000082111715610b6257600080fd5b8083526020830192505050908051906020019060200280838360005b83811015610b99578082015181840152602081019050610b7e565b5050505090500160405260200180516040519392919084640100000000821115610bc257600080fd5b83820191506020820185811115610bd857600080fd5b8251866020820283011164010000000082111715610bf557600080fd5b8083526020830192505050908051906020019060200280838360005b83811015610c2c578082015181840152602081019050610c11565b50505050905001604052505050509050600081600081518110610c4b57fe5b602002602001015182600181518110610c6057fe5b60200260200101510390508463ffffffff168160060b81610c7d57fe5b05935060008160060b128015610ca9575060008563ffffffff168260060b81610ca257fe5b0760060b14155b15610cb8578380600190039450505b50505092915050565b600080610ccd86610ec4565b90506fffffffffffffffffffffffffffffffff80168173ffffffffffffffffffffffffffffffffffffffff1611610dde5760008173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160290508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610610d9f57610d9a7801000000000000000000000000000000000000000000000000876fffffffffffffffffffffffffffffffff16836112ff565b610dd6565b610dd581876fffffffffffffffffffffffffffffffff1678010000000000000000000000000000000000000000000000006112ff565b5b925050610ebb565b6000610e208273ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16680100000000000000006112ff565b90508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610610e8857610e83700100000000000000000000000000000000876fffffffffffffffffffffffffffffffff16836112ff565b610eb7565b610eb681876fffffffffffffffffffffffffffffffff167001000000000000000000000000000000006112ff565b5b9250505b50949350505050565b60008060008360020b12610edb578260020b610ee3565b8260020b6000035b90507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761860000360020b811115610f81576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260018152602001807f540000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600080600183161415610fa557700100000000000000000000000000000000610fb7565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff16905060006002831614610ff15760806ffff97272373d413259a46990580e213a8202901c90505b600060048316146110165760806ffff2e50f5f656932ef12357cf3c7fdcc8202901c90505b6000600883161461103b5760806fffe5caca7e10e4e61c3624eaa0941cd08202901c90505b600060108316146110605760806fffcb9843d60f6159c9db58835c9266448202901c90505b600060208316146110855760806fff973b41fa98c081472e6896dfb254c08202901c90505b600060408316146110aa5760806fff2ea16466c96a3843ec78b326b528618202901c90505b600060808316146110cf5760806ffe5dee046a99a2a811c461f1969c30538202901c90505b60006101008316146110f55760806ffcbe86c7900a88aedcffc83b479aa3a48202901c90505b600061020083161461111b5760806ff987a7253ac413176f2b074cf7815e548202901c90505b60006104008316146111415760806ff3392b0822b70005940c7a398e4b70f38202901c90505b60006108008316146111675760806fe7159475a2c29b7443b29c7fa6e889d98202901c90505b600061100083161461118d5760806fd097f3bdfd2022b8845ad8f792aa58258202901c90505b60006120008316146111b35760806fa9f746462d870fdf8a65dc1f90e061e58202901c90505b60006140008316146111d95760806f70d869a156d2a1b890bb3df62baf32f78202901c90505b60006180008316146111ff5760806f31be135f97d08fd981231505542fcfa68202901c90505b6000620100008316146112265760806f09aa508b5b7a84e1c677de54f3e99bc98202901c90505b60006202000083161461124c5760806e5d6af8dedb81196699c329225ee6048202901c90505b6000620400008316146112715760806d2216e584f5fa1ea926041bedfe988202901c90505b6000620800008316146112945760806b048a170391f7dc42444e8fa28202901c90505b60008460020b13156112cd57807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff816112c957fe5b0490505b600064010000000082816112dd57fe5b06146112ea5760016112ed565b60005b60ff16602082901c0192505050919050565b60008060008019858709858702925082811083820303915050600081141561133a576000841161132e57600080fd5b838204925050506113d2565b80841161134657600080fd5b600084868809905082811182039150808303925060008586600003169050808604955080840493506001818260000304019050808302841793506000600287600302189050808702600203810290508087026002038102905080870260020381029050808702600203810290508087026002038102905080870260020381029050808502955050505050505b9392505050565b604051806080016040528060049060208202803683378082019150509050509056fea2646970667358221220415a6c0e2291f730020f32bf9e2fe03aaa4094b1705e09fca6410f44c8836d6e64736f6c63430007060033",
							"opcodes": "PUSH2 0x1431 PUSH2 0x26 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH2 0x19 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x40 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xBCBCAA29 EQ PUSH2 0x45 JUMPI DUP1 PUSH4 0xC361E0B1 EQ PUSH2 0xF3 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDB PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x197 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x175 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x109 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x492 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH3 0xFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x64 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F4 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xBB8 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2710 PUSH2 0xFFFF AND DUP2 MSTORE POP SWAP1 POP PUSH2 0x1DC PUSH2 0x13D9 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x4 DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x481 JUMPI PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1698EE82 DUP11 DUP11 DUP8 DUP7 PUSH1 0xFF AND PUSH1 0x4 DUP2 LT PUSH2 0x21A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x291 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2A5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x309 JUMPI POP PUSH2 0x474 JUMP JUMPDEST DUP7 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x371 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x385 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x39B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP LT ISZERO PUSH2 0x3B8 JUMPI POP PUSH2 0x474 JUMP JUMPDEST DUP6 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x420 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x434 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x44A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP LT ISZERO PUSH2 0x467 JUMPI POP PUSH2 0x474 JUMP JUMPDEST PUSH1 0x1 SWAP5 POP POP POP POP POP PUSH2 0x489 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x1DF JUMP JUMPDEST POP PUSH1 0x0 SWAP3 POP POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x64 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F4 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xBB8 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2710 PUSH2 0xFFFF AND DUP2 MSTORE POP SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x4 DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x918 JUMPI PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1698EE82 DUP9 DUP9 DUP7 DUP7 PUSH1 0xFF AND PUSH1 0x4 DUP2 LT PUSH2 0x50F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x586 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x59A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x5B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x5FE JUMPI POP PUSH2 0x90B JUMP JUMPDEST PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x646 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x65A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x670 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6DF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP DUP2 PUSH1 0xFF AND PUSH1 0xA EXP DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x776 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x78A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP LT ISZERO PUSH2 0x7BF JUMPI POP POP POP PUSH2 0x90B JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0xA EXP DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x82D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x841 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x857 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP LT ISZERO PUSH2 0x876 JUMPI POP POP POP PUSH2 0x90B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x883 DUP5 PUSH1 0x1 PUSH2 0x922 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x899 DUP3 DUP6 PUSH1 0xFF AND PUSH1 0xA EXP DUP14 DUP14 PUSH2 0xCC1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 PUSH1 0xFF AND EQ ISZERO PUSH2 0x8C5 JUMPI DUP1 SWAP9 POP DUP7 DUP7 PUSH1 0xFF AND PUSH1 0x4 DUP2 LT PUSH2 0x8B9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH2 0xFFFF AND SWAP8 POP JUMPDEST PUSH1 0x0 DUP7 PUSH1 0xFF AND GT DUP1 ISZERO PUSH2 0x8E2 JUMPI POP PUSH1 0x0 DUP10 EQ DUP1 PUSH2 0x8E1 JUMPI POP DUP9 DUP2 LT JUMPDEST JUMPDEST ISZERO PUSH2 0x905 JUMPI DUP1 SWAP9 POP DUP7 DUP7 PUSH1 0xFF AND PUSH1 0x4 DUP2 LT PUSH2 0x8F9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH2 0xFFFF AND SWAP8 POP JUMPDEST POP POP POP POP POP JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x4D4 JUMP JUMPDEST POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH4 0xFFFFFFFF AND EQ ISZERO PUSH2 0x9A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4250000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x9BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x9E9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x9FA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH4 0xFFFFFFFF AND SWAP1 DUP2 PUSH4 0xFFFFFFFF AND DUP2 MSTORE POP POP PUSH1 0x0 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xA23 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH4 0xFFFFFFFF AND SWAP1 DUP2 PUSH4 0xFFFFFFFF AND DUP2 MSTORE POP POP PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x883BDBFD DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xAAE JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xA93 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xAE5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xB0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0xB2F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0xB45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD DUP7 PUSH1 0x20 DUP3 MUL DUP4 ADD GT PUSH5 0x100000000 DUP3 GT OR ISZERO PUSH2 0xB62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 POP POP POP SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xB99 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xB7E JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD PUSH1 0x40 MSTORE PUSH1 0x20 ADD DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0xBC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0xBD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD DUP7 PUSH1 0x20 DUP3 MUL DUP4 ADD GT PUSH5 0x100000000 DUP3 GT OR ISZERO PUSH2 0xBF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 POP POP POP SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xC2C JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xC11 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD PUSH1 0x40 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xC4B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xC60 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SUB SWAP1 POP DUP5 PUSH4 0xFFFFFFFF AND DUP2 PUSH1 0x6 SIGNEXTEND DUP2 PUSH2 0xC7D JUMPI INVALID JUMPDEST SDIV SWAP4 POP PUSH1 0x0 DUP2 PUSH1 0x6 SIGNEXTEND SLT DUP1 ISZERO PUSH2 0xCA9 JUMPI POP PUSH1 0x0 DUP6 PUSH4 0xFFFFFFFF AND DUP3 PUSH1 0x6 SIGNEXTEND DUP2 PUSH2 0xCA2 JUMPI INVALID JUMPDEST SMOD PUSH1 0x6 SIGNEXTEND EQ ISZERO JUMPDEST ISZERO PUSH2 0xCB8 JUMPI DUP4 DUP1 PUSH1 0x1 SWAP1 SUB SWAP5 POP POP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xCCD DUP7 PUSH2 0xEC4 JUMP JUMPDEST SWAP1 POP PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT PUSH2 0xDDE JUMPI PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT PUSH2 0xD9F JUMPI PUSH2 0xD9A PUSH25 0x1000000000000000000000000000000000000000000000000 DUP8 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH2 0x12FF JUMP JUMPDEST PUSH2 0xDD6 JUMP JUMPDEST PUSH2 0xDD5 DUP2 DUP8 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH25 0x1000000000000000000000000000000000000000000000000 PUSH2 0x12FF JUMP JUMPDEST JUMPDEST SWAP3 POP POP PUSH2 0xEBB JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE20 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH9 0x10000000000000000 PUSH2 0x12FF JUMP JUMPDEST SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT PUSH2 0xE88 JUMPI PUSH2 0xE83 PUSH17 0x100000000000000000000000000000000 DUP8 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH2 0x12FF JUMP JUMPDEST PUSH2 0xEB7 JUMP JUMPDEST PUSH2 0xEB6 DUP2 DUP8 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH17 0x100000000000000000000000000000000 PUSH2 0x12FF JUMP JUMPDEST JUMPDEST SWAP3 POP POP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH1 0x2 SIGNEXTEND SLT PUSH2 0xEDB JUMPI DUP3 PUSH1 0x2 SIGNEXTEND PUSH2 0xEE3 JUMP JUMPDEST DUP3 PUSH1 0x2 SIGNEXTEND PUSH1 0x0 SUB JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF27618 PUSH1 0x0 SUB PUSH1 0x2 SIGNEXTEND DUP2 GT ISZERO PUSH2 0xF81 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5400000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 DUP4 AND EQ ISZERO PUSH2 0xFA5 JUMPI PUSH17 0x100000000000000000000000000000000 PUSH2 0xFB7 JUMP JUMPDEST PUSH16 0xFFFCB933BD6FAD37AA2D162D1A594001 JUMPDEST PUSH17 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x2 DUP4 AND EQ PUSH2 0xFF1 JUMPI PUSH1 0x80 PUSH16 0xFFF97272373D413259A46990580E213A DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP4 AND EQ PUSH2 0x1016 JUMPI PUSH1 0x80 PUSH16 0xFFF2E50F5F656932EF12357CF3C7FDCC DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 AND EQ PUSH2 0x103B JUMPI PUSH1 0x80 PUSH16 0xFFE5CACA7E10E4E61C3624EAA0941CD0 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x10 DUP4 AND EQ PUSH2 0x1060 JUMPI PUSH1 0x80 PUSH16 0xFFCB9843D60F6159C9DB58835C926644 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 AND EQ PUSH2 0x1085 JUMPI PUSH1 0x80 PUSH16 0xFF973B41FA98C081472E6896DFB254C0 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP4 AND EQ PUSH2 0x10AA JUMPI PUSH1 0x80 PUSH16 0xFF2EA16466C96A3843EC78B326B52861 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP4 AND EQ PUSH2 0x10CF JUMPI PUSH1 0x80 PUSH16 0xFE5DEE046A99A2A811C461F1969C3053 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP4 AND EQ PUSH2 0x10F5 JUMPI PUSH1 0x80 PUSH16 0xFCBE86C7900A88AEDCFFC83B479AA3A4 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x200 DUP4 AND EQ PUSH2 0x111B JUMPI PUSH1 0x80 PUSH16 0xF987A7253AC413176F2B074CF7815E54 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x400 DUP4 AND EQ PUSH2 0x1141 JUMPI PUSH1 0x80 PUSH16 0xF3392B0822B70005940C7A398E4B70F3 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x800 DUP4 AND EQ PUSH2 0x1167 JUMPI PUSH1 0x80 PUSH16 0xE7159475A2C29B7443B29C7FA6E889D9 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x1000 DUP4 AND EQ PUSH2 0x118D JUMPI PUSH1 0x80 PUSH16 0xD097F3BDFD2022B8845AD8F792AA5825 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x2000 DUP4 AND EQ PUSH2 0x11B3 JUMPI PUSH1 0x80 PUSH16 0xA9F746462D870FDF8A65DC1F90E061E5 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x4000 DUP4 AND EQ PUSH2 0x11D9 JUMPI PUSH1 0x80 PUSH16 0x70D869A156D2A1B890BB3DF62BAF32F7 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x8000 DUP4 AND EQ PUSH2 0x11FF JUMPI PUSH1 0x80 PUSH16 0x31BE135F97D08FD981231505542FCFA6 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH3 0x10000 DUP4 AND EQ PUSH2 0x1226 JUMPI PUSH1 0x80 PUSH16 0x9AA508B5B7A84E1C677DE54F3E99BC9 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH3 0x20000 DUP4 AND EQ PUSH2 0x124C JUMPI PUSH1 0x80 PUSH15 0x5D6AF8DEDB81196699C329225EE604 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH3 0x40000 DUP4 AND EQ PUSH2 0x1271 JUMPI PUSH1 0x80 PUSH14 0x2216E584F5FA1EA926041BEDFE98 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH3 0x80000 DUP4 AND EQ PUSH2 0x1294 JUMPI PUSH1 0x80 PUSH12 0x48A170391F7DC42444E8FA2 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x2 SIGNEXTEND SGT ISZERO PUSH2 0x12CD JUMPI DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 PUSH2 0x12C9 JUMPI INVALID JUMPDEST DIV SWAP1 POP JUMPDEST PUSH1 0x0 PUSH5 0x100000000 DUP3 DUP2 PUSH2 0x12DD JUMPI INVALID JUMPDEST MOD EQ PUSH2 0x12EA JUMPI PUSH1 0x1 PUSH2 0x12ED JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0xFF AND PUSH1 0x20 DUP3 SWAP1 SHR ADD SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 NOT DUP6 DUP8 MULMOD DUP6 DUP8 MUL SWAP3 POP DUP3 DUP2 LT DUP4 DUP3 SUB SUB SWAP2 POP POP PUSH1 0x0 DUP2 EQ ISZERO PUSH2 0x133A JUMPI PUSH1 0x0 DUP5 GT PUSH2 0x132E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP3 DIV SWAP3 POP POP POP PUSH2 0x13D2 JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x1346 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP7 DUP9 MULMOD SWAP1 POP DUP3 DUP2 GT DUP3 SUB SWAP2 POP DUP1 DUP4 SUB SWAP3 POP PUSH1 0x0 DUP6 DUP7 PUSH1 0x0 SUB AND SWAP1 POP DUP1 DUP7 DIV SWAP6 POP DUP1 DUP5 DIV SWAP4 POP PUSH1 0x1 DUP2 DUP3 PUSH1 0x0 SUB DIV ADD SWAP1 POP DUP1 DUP4 MUL DUP5 OR SWAP4 POP PUSH1 0x0 PUSH1 0x2 DUP8 PUSH1 0x3 MUL XOR SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP6 MUL SWAP6 POP POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP POP SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 COINBASE GAS PUSH13 0xE2291F730020F32BF9E2FE03A 0xAA BLOCKHASH SWAP5 0xB1 PUSH17 0x5E09FCA6410F44C8836D6E64736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "260:1501:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c8063bcbcaa2914610045578063c361e0b1146100f3575b600080fd5b6100db600480360360a081101561005b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050610197565b60405180821515815260200191505060405180910390f35b6101756004803603606081101561010957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610492565b604051808381526020018262ffffff1681526020019250505060405180910390f35b6000806040518060800160405280606461ffff1681526020016101f461ffff168152602001610bb861ffff16815260200161271061ffff1681525090506101dc6113d9565b60005b60048160ff1610156104815760008973ffffffffffffffffffffffffffffffffffffffff16631698ee828a8a878660ff166004811061021a57fe5b60200201516040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018261ffff168152602001935050505060206040518083038186803b15801561029157600080fd5b505afa1580156102a5573d6000803e3d6000fd5b505050506040513d60208110156102bb57600080fd5b81019080805190602001909291905050509050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156103095750610474565b868973ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561037157600080fd5b505afa158015610385573d6000803e3d6000fd5b505050506040513d602081101561039b57600080fd5b810190808051906020019092919050505010156103b85750610474565b858873ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561042057600080fd5b505afa158015610434573d6000803e3d6000fd5b505050506040513d602081101561044a57600080fd5b810190808051906020019092919050505010156104675750610474565b6001945050505050610489565b80806001019150506101df565b506000925050505b95945050505050565b60008060006040518060800160405280606461ffff1681526020016101f461ffff168152602001610bb861ffff16815260200161271061ffff16815250905060005b60048160ff1610156109185760008773ffffffffffffffffffffffffffffffffffffffff16631698ee828888868660ff166004811061050f57fe5b60200201516040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018261ffff168152602001935050505060206040518083038186803b15801561058657600080fd5b505afa15801561059a573d6000803e3d6000fd5b505050506040513d60208110156105b057600080fd5b81019080805190602001909291905050509050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156105fe575061090b565b60008773ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561064657600080fd5b505afa15801561065a573d6000803e3d6000fd5b505050506040513d602081101561067057600080fd5b8101908080519060200190929190505050905060008773ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156106cb57600080fd5b505afa1580156106df573d6000803e3d6000fd5b505050506040513d60208110156106f557600080fd5b810190808051906020019092919050505090508160ff16600a0a8973ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561077657600080fd5b505afa15801561078a573d6000803e3d6000fd5b505050506040513d60208110156107a057600080fd5b810190808051906020019092919050505010156107bf5750505061090b565b8060ff16600a0a8873ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561082d57600080fd5b505afa158015610841573d6000803e3d6000fd5b505050506040513d602081101561085757600080fd5b810190808051906020019092919050505010156108765750505061090b565b6000610883846001610922565b90506000610899828560ff16600a0a8d8d610cc1565b905060008660ff1614156108c557809850868660ff16600481106108b957fe5b602002015161ffff1697505b60008660ff161180156108e2575060008914806108e157508881105b5b1561090557809850868660ff16600481106108f957fe5b602002015161ffff1697505b50505050505b80806001019150506104d4565b5050935093915050565b6000808263ffffffff1614156109a0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260028152602001807f425000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000600267ffffffffffffffff811180156109ba57600080fd5b506040519080825280602002602001820160405280156109e95781602001602082028036833780820191505090505b50905082816000815181106109fa57fe5b602002602001019063ffffffff16908163ffffffff1681525050600081600181518110610a2357fe5b602002602001019063ffffffff16908163ffffffff168152505060008473ffffffffffffffffffffffffffffffffffffffff1663883bdbfd836040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019060200280838360005b83811015610aae578082015181840152602081019050610a93565b505050509050019250505060006040518083038186803b158015610ad157600080fd5b505afa158015610ae5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506040811015610b0f57600080fd5b8101908080516040519392919084640100000000821115610b2f57600080fd5b83820191506020820185811115610b4557600080fd5b8251866020820283011164010000000082111715610b6257600080fd5b8083526020830192505050908051906020019060200280838360005b83811015610b99578082015181840152602081019050610b7e565b5050505090500160405260200180516040519392919084640100000000821115610bc257600080fd5b83820191506020820185811115610bd857600080fd5b8251866020820283011164010000000082111715610bf557600080fd5b8083526020830192505050908051906020019060200280838360005b83811015610c2c578082015181840152602081019050610c11565b50505050905001604052505050509050600081600081518110610c4b57fe5b602002602001015182600181518110610c6057fe5b60200260200101510390508463ffffffff168160060b81610c7d57fe5b05935060008160060b128015610ca9575060008563ffffffff168260060b81610ca257fe5b0760060b14155b15610cb8578380600190039450505b50505092915050565b600080610ccd86610ec4565b90506fffffffffffffffffffffffffffffffff80168173ffffffffffffffffffffffffffffffffffffffff1611610dde5760008173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160290508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610610d9f57610d9a7801000000000000000000000000000000000000000000000000876fffffffffffffffffffffffffffffffff16836112ff565b610dd6565b610dd581876fffffffffffffffffffffffffffffffff1678010000000000000000000000000000000000000000000000006112ff565b5b925050610ebb565b6000610e208273ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16680100000000000000006112ff565b90508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610610e8857610e83700100000000000000000000000000000000876fffffffffffffffffffffffffffffffff16836112ff565b610eb7565b610eb681876fffffffffffffffffffffffffffffffff167001000000000000000000000000000000006112ff565b5b9250505b50949350505050565b60008060008360020b12610edb578260020b610ee3565b8260020b6000035b90507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761860000360020b811115610f81576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260018152602001807f540000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600080600183161415610fa557700100000000000000000000000000000000610fb7565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff16905060006002831614610ff15760806ffff97272373d413259a46990580e213a8202901c90505b600060048316146110165760806ffff2e50f5f656932ef12357cf3c7fdcc8202901c90505b6000600883161461103b5760806fffe5caca7e10e4e61c3624eaa0941cd08202901c90505b600060108316146110605760806fffcb9843d60f6159c9db58835c9266448202901c90505b600060208316146110855760806fff973b41fa98c081472e6896dfb254c08202901c90505b600060408316146110aa5760806fff2ea16466c96a3843ec78b326b528618202901c90505b600060808316146110cf5760806ffe5dee046a99a2a811c461f1969c30538202901c90505b60006101008316146110f55760806ffcbe86c7900a88aedcffc83b479aa3a48202901c90505b600061020083161461111b5760806ff987a7253ac413176f2b074cf7815e548202901c90505b60006104008316146111415760806ff3392b0822b70005940c7a398e4b70f38202901c90505b60006108008316146111675760806fe7159475a2c29b7443b29c7fa6e889d98202901c90505b600061100083161461118d5760806fd097f3bdfd2022b8845ad8f792aa58258202901c90505b60006120008316146111b35760806fa9f746462d870fdf8a65dc1f90e061e58202901c90505b60006140008316146111d95760806f70d869a156d2a1b890bb3df62baf32f78202901c90505b60006180008316146111ff5760806f31be135f97d08fd981231505542fcfa68202901c90505b6000620100008316146112265760806f09aa508b5b7a84e1c677de54f3e99bc98202901c90505b60006202000083161461124c5760806e5d6af8dedb81196699c329225ee6048202901c90505b6000620400008316146112715760806d2216e584f5fa1ea926041bedfe988202901c90505b6000620800008316146112945760806b048a170391f7dc42444e8fa28202901c90505b60008460020b13156112cd57807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff816112c957fe5b0490505b600064010000000082816112dd57fe5b06146112ea5760016112ed565b60005b60ff16602082901c0192505050919050565b60008060008019858709858702925082811083820303915050600081141561133a576000841161132e57600080fd5b838204925050506113d2565b80841161134657600080fd5b600084868809905082811182039150808303925060008586600003169050808604955080840493506001818260000304019050808302841793506000600287600302189050808702600203810290508087026002038102905080870260020381029050808702600203810290508087026002038102905080870260020381029050808502955050505050505b9392505050565b604051806080016040528060049060208202803683378082019150509050509056fea2646970667358221220415a6c0e2291f730020f32bf9e2fe03aaa4094b1705e09fca6410f44c8836d6e64736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x40 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xBCBCAA29 EQ PUSH2 0x45 JUMPI DUP1 PUSH4 0xC361E0B1 EQ PUSH2 0xF3 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDB PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x197 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x175 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x109 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x492 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH3 0xFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x64 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F4 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xBB8 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2710 PUSH2 0xFFFF AND DUP2 MSTORE POP SWAP1 POP PUSH2 0x1DC PUSH2 0x13D9 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x4 DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x481 JUMPI PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1698EE82 DUP11 DUP11 DUP8 DUP7 PUSH1 0xFF AND PUSH1 0x4 DUP2 LT PUSH2 0x21A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x291 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2A5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x309 JUMPI POP PUSH2 0x474 JUMP JUMPDEST DUP7 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x371 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x385 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x39B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP LT ISZERO PUSH2 0x3B8 JUMPI POP PUSH2 0x474 JUMP JUMPDEST DUP6 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x420 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x434 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x44A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP LT ISZERO PUSH2 0x467 JUMPI POP PUSH2 0x474 JUMP JUMPDEST PUSH1 0x1 SWAP5 POP POP POP POP POP PUSH2 0x489 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x1DF JUMP JUMPDEST POP PUSH1 0x0 SWAP3 POP POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x64 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F4 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xBB8 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2710 PUSH2 0xFFFF AND DUP2 MSTORE POP SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x4 DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x918 JUMPI PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1698EE82 DUP9 DUP9 DUP7 DUP7 PUSH1 0xFF AND PUSH1 0x4 DUP2 LT PUSH2 0x50F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x586 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x59A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x5B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x5FE JUMPI POP PUSH2 0x90B JUMP JUMPDEST PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x646 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x65A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x670 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6DF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP DUP2 PUSH1 0xFF AND PUSH1 0xA EXP DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x776 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x78A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP LT ISZERO PUSH2 0x7BF JUMPI POP POP POP PUSH2 0x90B JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0xA EXP DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x82D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x841 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x857 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP LT ISZERO PUSH2 0x876 JUMPI POP POP POP PUSH2 0x90B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x883 DUP5 PUSH1 0x1 PUSH2 0x922 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x899 DUP3 DUP6 PUSH1 0xFF AND PUSH1 0xA EXP DUP14 DUP14 PUSH2 0xCC1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 PUSH1 0xFF AND EQ ISZERO PUSH2 0x8C5 JUMPI DUP1 SWAP9 POP DUP7 DUP7 PUSH1 0xFF AND PUSH1 0x4 DUP2 LT PUSH2 0x8B9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH2 0xFFFF AND SWAP8 POP JUMPDEST PUSH1 0x0 DUP7 PUSH1 0xFF AND GT DUP1 ISZERO PUSH2 0x8E2 JUMPI POP PUSH1 0x0 DUP10 EQ DUP1 PUSH2 0x8E1 JUMPI POP DUP9 DUP2 LT JUMPDEST JUMPDEST ISZERO PUSH2 0x905 JUMPI DUP1 SWAP9 POP DUP7 DUP7 PUSH1 0xFF AND PUSH1 0x4 DUP2 LT PUSH2 0x8F9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH2 0xFFFF AND SWAP8 POP JUMPDEST POP POP POP POP POP JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x4D4 JUMP JUMPDEST POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH4 0xFFFFFFFF AND EQ ISZERO PUSH2 0x9A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4250000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x9BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x9E9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x9FA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH4 0xFFFFFFFF AND SWAP1 DUP2 PUSH4 0xFFFFFFFF AND DUP2 MSTORE POP POP PUSH1 0x0 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xA23 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH4 0xFFFFFFFF AND SWAP1 DUP2 PUSH4 0xFFFFFFFF AND DUP2 MSTORE POP POP PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x883BDBFD DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xAAE JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xA93 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xAE5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xB0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0xB2F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0xB45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD DUP7 PUSH1 0x20 DUP3 MUL DUP4 ADD GT PUSH5 0x100000000 DUP3 GT OR ISZERO PUSH2 0xB62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 POP POP POP SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xB99 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xB7E JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD PUSH1 0x40 MSTORE PUSH1 0x20 ADD DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0xBC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0xBD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD DUP7 PUSH1 0x20 DUP3 MUL DUP4 ADD GT PUSH5 0x100000000 DUP3 GT OR ISZERO PUSH2 0xBF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 POP POP POP SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xC2C JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xC11 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD PUSH1 0x40 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xC4B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xC60 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SUB SWAP1 POP DUP5 PUSH4 0xFFFFFFFF AND DUP2 PUSH1 0x6 SIGNEXTEND DUP2 PUSH2 0xC7D JUMPI INVALID JUMPDEST SDIV SWAP4 POP PUSH1 0x0 DUP2 PUSH1 0x6 SIGNEXTEND SLT DUP1 ISZERO PUSH2 0xCA9 JUMPI POP PUSH1 0x0 DUP6 PUSH4 0xFFFFFFFF AND DUP3 PUSH1 0x6 SIGNEXTEND DUP2 PUSH2 0xCA2 JUMPI INVALID JUMPDEST SMOD PUSH1 0x6 SIGNEXTEND EQ ISZERO JUMPDEST ISZERO PUSH2 0xCB8 JUMPI DUP4 DUP1 PUSH1 0x1 SWAP1 SUB SWAP5 POP POP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xCCD DUP7 PUSH2 0xEC4 JUMP JUMPDEST SWAP1 POP PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT PUSH2 0xDDE JUMPI PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT PUSH2 0xD9F JUMPI PUSH2 0xD9A PUSH25 0x1000000000000000000000000000000000000000000000000 DUP8 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH2 0x12FF JUMP JUMPDEST PUSH2 0xDD6 JUMP JUMPDEST PUSH2 0xDD5 DUP2 DUP8 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH25 0x1000000000000000000000000000000000000000000000000 PUSH2 0x12FF JUMP JUMPDEST JUMPDEST SWAP3 POP POP PUSH2 0xEBB JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE20 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH9 0x10000000000000000 PUSH2 0x12FF JUMP JUMPDEST SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT PUSH2 0xE88 JUMPI PUSH2 0xE83 PUSH17 0x100000000000000000000000000000000 DUP8 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH2 0x12FF JUMP JUMPDEST PUSH2 0xEB7 JUMP JUMPDEST PUSH2 0xEB6 DUP2 DUP8 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH17 0x100000000000000000000000000000000 PUSH2 0x12FF JUMP JUMPDEST JUMPDEST SWAP3 POP POP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH1 0x2 SIGNEXTEND SLT PUSH2 0xEDB JUMPI DUP3 PUSH1 0x2 SIGNEXTEND PUSH2 0xEE3 JUMP JUMPDEST DUP3 PUSH1 0x2 SIGNEXTEND PUSH1 0x0 SUB JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF27618 PUSH1 0x0 SUB PUSH1 0x2 SIGNEXTEND DUP2 GT ISZERO PUSH2 0xF81 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5400000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 DUP4 AND EQ ISZERO PUSH2 0xFA5 JUMPI PUSH17 0x100000000000000000000000000000000 PUSH2 0xFB7 JUMP JUMPDEST PUSH16 0xFFFCB933BD6FAD37AA2D162D1A594001 JUMPDEST PUSH17 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x2 DUP4 AND EQ PUSH2 0xFF1 JUMPI PUSH1 0x80 PUSH16 0xFFF97272373D413259A46990580E213A DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP4 AND EQ PUSH2 0x1016 JUMPI PUSH1 0x80 PUSH16 0xFFF2E50F5F656932EF12357CF3C7FDCC DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 AND EQ PUSH2 0x103B JUMPI PUSH1 0x80 PUSH16 0xFFE5CACA7E10E4E61C3624EAA0941CD0 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x10 DUP4 AND EQ PUSH2 0x1060 JUMPI PUSH1 0x80 PUSH16 0xFFCB9843D60F6159C9DB58835C926644 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 AND EQ PUSH2 0x1085 JUMPI PUSH1 0x80 PUSH16 0xFF973B41FA98C081472E6896DFB254C0 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP4 AND EQ PUSH2 0x10AA JUMPI PUSH1 0x80 PUSH16 0xFF2EA16466C96A3843EC78B326B52861 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP4 AND EQ PUSH2 0x10CF JUMPI PUSH1 0x80 PUSH16 0xFE5DEE046A99A2A811C461F1969C3053 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP4 AND EQ PUSH2 0x10F5 JUMPI PUSH1 0x80 PUSH16 0xFCBE86C7900A88AEDCFFC83B479AA3A4 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x200 DUP4 AND EQ PUSH2 0x111B JUMPI PUSH1 0x80 PUSH16 0xF987A7253AC413176F2B074CF7815E54 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x400 DUP4 AND EQ PUSH2 0x1141 JUMPI PUSH1 0x80 PUSH16 0xF3392B0822B70005940C7A398E4B70F3 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x800 DUP4 AND EQ PUSH2 0x1167 JUMPI PUSH1 0x80 PUSH16 0xE7159475A2C29B7443B29C7FA6E889D9 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x1000 DUP4 AND EQ PUSH2 0x118D JUMPI PUSH1 0x80 PUSH16 0xD097F3BDFD2022B8845AD8F792AA5825 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x2000 DUP4 AND EQ PUSH2 0x11B3 JUMPI PUSH1 0x80 PUSH16 0xA9F746462D870FDF8A65DC1F90E061E5 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x4000 DUP4 AND EQ PUSH2 0x11D9 JUMPI PUSH1 0x80 PUSH16 0x70D869A156D2A1B890BB3DF62BAF32F7 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x8000 DUP4 AND EQ PUSH2 0x11FF JUMPI PUSH1 0x80 PUSH16 0x31BE135F97D08FD981231505542FCFA6 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH3 0x10000 DUP4 AND EQ PUSH2 0x1226 JUMPI PUSH1 0x80 PUSH16 0x9AA508B5B7A84E1C677DE54F3E99BC9 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH3 0x20000 DUP4 AND EQ PUSH2 0x124C JUMPI PUSH1 0x80 PUSH15 0x5D6AF8DEDB81196699C329225EE604 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH3 0x40000 DUP4 AND EQ PUSH2 0x1271 JUMPI PUSH1 0x80 PUSH14 0x2216E584F5FA1EA926041BEDFE98 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH3 0x80000 DUP4 AND EQ PUSH2 0x1294 JUMPI PUSH1 0x80 PUSH12 0x48A170391F7DC42444E8FA2 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x2 SIGNEXTEND SGT ISZERO PUSH2 0x12CD JUMPI DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 PUSH2 0x12C9 JUMPI INVALID JUMPDEST DIV SWAP1 POP JUMPDEST PUSH1 0x0 PUSH5 0x100000000 DUP3 DUP2 PUSH2 0x12DD JUMPI INVALID JUMPDEST MOD EQ PUSH2 0x12EA JUMPI PUSH1 0x1 PUSH2 0x12ED JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0xFF AND PUSH1 0x20 DUP3 SWAP1 SHR ADD SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 NOT DUP6 DUP8 MULMOD DUP6 DUP8 MUL SWAP3 POP DUP3 DUP2 LT DUP4 DUP3 SUB SUB SWAP2 POP POP PUSH1 0x0 DUP2 EQ ISZERO PUSH2 0x133A JUMPI PUSH1 0x0 DUP5 GT PUSH2 0x132E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP3 DIV SWAP3 POP POP POP PUSH2 0x13D2 JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x1346 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP7 DUP9 MULMOD SWAP1 POP DUP3 DUP2 GT DUP3 SUB SWAP2 POP DUP1 DUP4 SUB SWAP3 POP PUSH1 0x0 DUP6 DUP7 PUSH1 0x0 SUB AND SWAP1 POP DUP1 DUP7 DIV SWAP6 POP DUP1 DUP5 DIV SWAP4 POP PUSH1 0x1 DUP2 DUP3 PUSH1 0x0 SUB DIV ADD SWAP1 POP DUP1 DUP4 MUL DUP5 OR SWAP4 POP PUSH1 0x0 PUSH1 0x2 DUP8 PUSH1 0x3 MUL XOR SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP6 MUL SWAP6 POP POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP POP SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 COINBASE GAS PUSH13 0xE2291F730020F32BF9E2FE03A 0xAA BLOCKHASH SWAP5 0xB1 PUSH17 0x5E09FCA6410F44C8836D6E64736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "260:1501:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1227:531;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;289:931;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;1227:531;1329:4;1344:21;:44;;;;;;;;1369:3;1344:44;;;;;;1373:3;1344:44;;;;;;1377:4;1344:44;;;;;;1382:5;1344:44;;;;;;;1398:19;;:::i;:::-;1431:7;1427:303;1443:1;1441;:3;;;1427:303;;;1462:12;1495:7;1477:34;;;1512:2;1515;1518:4;1523:1;1518:7;;;;;;;;;;;;;1477:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1462:64;;1559:1;1543:18;;:4;:18;;;1539:32;;;1563:8;;;1539:32;1618:4;1596:2;1589:20;;;1610:4;1589:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:33;1585:47;;;1624:8;;;1585:47;1679:4;1657:2;1650:20;;;1671:4;1650:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:33;1646:47;;;1685:8;;;1646:47;1715:4;1708:11;;;;;;;;1427:303;1445:3;;;;;;;1427:303;;;;1746:5;1739:12;;;;1227:531;;;;;;;;:::o;289:931::-;366:13;380:10;401:21;:44;;;;;;;;426:3;401:44;;;;;;430:3;401:44;;;;;;434:4;401:44;;;;;;439:5;401:44;;;;;;;459:7;455:731;471:1;469;:3;;;455:731;;;487:12;520:7;502:34;;;537:2;540;543:4;548:1;543:7;;;;;;;;;;;;;502:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;487:64;;581:1;565:18;;:4;:18;;;561:32;;;585:8;;;561:32;613:8;631:2;624:19;;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;613:32;;655:8;673:2;666:19;;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;655:32;;743:2;739:6;;:2;:6;717:2;710:20;;;731:4;710:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:35;706:49;;;747:8;;;;;706:49;803:2;799:6;;:2;:6;777:2;770:20;;;791:4;770:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:35;766:49;;;807:8;;;;;766:49;828:10;841:29;863:4;868:1;841:21;:29::i;:::-;828:42;;880:17;900:56;929:4;946:2;942:6;;:2;:6;950:2;953;900:28;:56::i;:::-;880:76;;975:1;970;:6;;;966:80;;;999:9;991:17;;1028:4;1033:1;1028:7;;;;;;;;;;;;;1022:13;;;;966:80;1063:1;1059;:5;;;:42;;;;;1078:1;1069:5;:10;:31;;;;1095:5;1083:9;:17;1069:31;1059:42;1055:121;;;1125:9;1117:17;;1154:4;1159:1;1154:7;;;;;;;;;;;;;1148:13;;;;1055:121;455:731;;;;;;473:3;;;;;;;455:731;;;;1195:18;289:931;;;;;;:::o;270:657:11:-;367:10;415:1;401:10;:15;;;;393:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;434:27;477:1;464:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;434:45;;506:10;489:11;501:1;489:14;;;;;;;;;;;;;:27;;;;;;;;;;;543:1;526:11;538:1;526:14;;;;;;;;;;;;;:18;;;;;;;;;;;556:30;619:4;604:28;;;633:11;604:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;555:90;;;656:26;706:15;722:1;706:18;;;;;;;;;;;;;;685:15;701:1;685:18;;;;;;;;;;;;;;:39;656:68;;773:10;750:33;;:20;:33;;;;;;;;737:47;;866:1;843:20;:24;;;:68;;;;;909:1;895:10;872:33;;:20;:33;;;;;;;;:38;;;;843:68;839:80;;;913:6;;;;;;;;839:80;270:657;;;;;;;:::o;934:955::-;1090:19;1121:20;1144:33;1172:4;1144:27;:33::i;:::-;1121:56;;1312:17;1296:33;;:12;:33;;;1292:591;;1345:17;1389:12;1365:36;;1373:12;1365:21;;:36;1345:56;;1441:10;1429:22;;:9;:22;;;:156;;1537:48;1553:8;1563:10;1537:48;;1575:9;1537:15;:48::i;:::-;1429:156;;;1470:48;1486:9;1497:10;1470:48;;1509:8;1470:15;:48::i;:::-;1429:156;1415:170;;1292:591;;;;1616:17;1636:52;1652:12;1636:52;;1666:12;1636:52;;1680:7;1636:15;:52::i;:::-;1616:72;;1728:10;1716:22;;:9;:22;;;:156;;1824:48;1840:8;1850:10;1824:48;;1862:9;1824:15;:48::i;:::-;1716:156;;;1757:48;1773:9;1784:10;1757:48;;1796:8;1757:15;:48::i;:::-;1716:156;1702:170;;1292:591;;934:955;;;;;;;:::o;1362:2580:9:-;1425:20;1457:15;1482:1;1475:4;:8;;;:57;;1526:4;1519:12;;1475:57;;;1502:4;1495:12;;1494:13;;1475:57;1457:75;;484:7;644:9;;1561:17;;1550:7;:28;;1542:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1595:13;1628:1;1621:3;1611:7;:13;:18;;:93;;1669:35;1611:93;;;1632:34;1611:93;1595:109;;;;1735:1;1728:3;1718:7;:13;:18;1714:83;;1794:3;1755:34;1747:5;:42;1746:51;;1738:59;;1714:83;1828:1;1821:3;1811:7;:13;:18;1807:83;;1887:3;1848:34;1840:5;:42;1839:51;;1831:59;;1807:83;1921:1;1914:3;1904:7;:13;:18;1900:83;;1980:3;1941:34;1933:5;:42;1932:51;;1924:59;;1900:83;2015:1;2007:4;1997:7;:14;:19;1993:84;;2074:3;2035:34;2027:5;:42;2026:51;;2018:59;;1993:84;2109:1;2101:4;2091:7;:14;:19;2087:84;;2168:3;2129:34;2121:5;:42;2120:51;;2112:59;;2087:84;2203:1;2195:4;2185:7;:14;:19;2181:84;;2262:3;2223:34;2215:5;:42;2214:51;;2206:59;;2181:84;2297:1;2289:4;2279:7;:14;:19;2275:84;;2356:3;2317:34;2309:5;:42;2308:51;;2300:59;;2275:84;2392:1;2383:5;2373:7;:15;:20;2369:85;;2451:3;2412:34;2404:5;:42;2403:51;;2395:59;;2369:85;2487:1;2478:5;2468:7;:15;:20;2464:85;;2546:3;2507:34;2499:5;:42;2498:51;;2490:59;;2464:85;2582:1;2573:5;2563:7;:15;:20;2559:85;;2641:3;2602:34;2594:5;:42;2593:51;;2585:59;;2559:85;2677:1;2668:5;2658:7;:15;:20;2654:85;;2736:3;2697:34;2689:5;:42;2688:51;;2680:59;;2654:85;2773:1;2763:6;2753:7;:16;:21;2749:86;;2832:3;2793:34;2785:5;:42;2784:51;;2776:59;;2749:86;2869:1;2859:6;2849:7;:16;:21;2845:86;;2928:3;2889:34;2881:5;:42;2880:51;;2872:59;;2845:86;2965:1;2955:6;2945:7;:16;:21;2941:86;;3024:3;2985:34;2977:5;:42;2976:51;;2968:59;;2941:86;3061:1;3051:6;3041:7;:16;:21;3037:86;;3120:3;3081:34;3073:5;:42;3072:51;;3064:59;;3037:86;3158:1;3147:7;3137;:17;:22;3133:86;;3216:3;3178:33;3170:5;:41;3169:50;;3161:58;;3133:86;3254:1;3243:7;3233;:17;:22;3229:85;;3311:3;3274:32;3266:5;:40;3265:49;;3257:57;;3229:85;3349:1;3338:7;3328;:17;:22;3324:83;;3404:3;3369:30;3361:5;:38;3360:47;;3352:55;;3324:83;3442:1;3431:7;3421;:17;:22;3417:78;;3492:3;3462:25;3454:5;:33;3453:42;;3445:50;;3417:78;3517:1;3510:4;:8;;;3506:47;;;3548:5;3528:17;:25;;;;;;3520:33;;3506:47;3924:1;3912:7;3903:5;:17;;;;;;:22;:30;;3932:1;3903:30;;;3928:1;3903:30;3886:48;;3896:2;3887:5;:11;;3886:48;3863:72;;1362:2580;;;;;:::o;749:3776:8:-;861:14;1190:13;1258;1375:1;1371:6;1368:1;1365;1358:20;1407:1;1404;1400:9;1391:18;;1458:5;1454:2;1451:13;1443:5;1439:2;1435:14;1431:34;1422:43;;1334:141;1556:1;1547:5;:10;1543:179;;;1595:1;1581:11;:15;1573:24;;;;;;1659:11;1652:5;1648:23;1638:33;;1698:13;;;;1543:179;1849:5;1835:11;:19;1827:28;;;;;;2132:17;2208:11;2205:1;2202;2195:25;2182:38;;2351:5;2340:9;2337:20;2330:5;2326:32;2317:41;;2391:9;2384:5;2380:21;2371:30;;2560:12;2590:11;2576;2575:12;;:26;2560:41;;2712:4;2699:11;2695:22;2680:37;;2834:4;2827:5;2823:16;2814:25;;3088:1;3081:4;3074;3071:1;3067:12;3063:23;3059:31;3051:39;;3126:4;3118:5;:12;3109:21;;;;3464:11;3498:1;3483:11;3479:1;:15;3478:21;3464:35;;3739:3;3725:11;:17;3721:1;:21;3714:28;;;;3797:3;3783:11;:17;3779:1;:21;3772:28;;;;3856:3;3842:11;:17;3838:1;:21;3831:28;;;;3915:3;3901:11;:17;3897:1;:21;3890:28;;;;3974:3;3960:11;:17;3956:1;:21;3949:28;;;;4034:3;4020:11;:17;4016:1;:21;4009:28;;;;4492:3;4484:5;:11;4475:20;;4505:13;;;;;749:3776;;;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1033800",
								"executionCost": "1099",
								"totalCost": "1034899"
							},
							"external": {
								"PoolExists(address,address,address,uint256,uint256)": "infinite",
								"Price(address,address,address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 260,
									"end": 1761,
									"name": "PUSH #[$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 260,
									"end": 1761,
									"name": "PUSH [$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 260,
									"end": 1761,
									"name": "PUSH",
									"source": 12,
									"value": "B"
								},
								{
									"begin": 260,
									"end": 1761,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 260,
									"end": 1761,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 260,
									"end": 1761,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 260,
									"end": 1761,
									"name": "CODECOPY",
									"source": 12
								},
								{
									"begin": 260,
									"end": 1761,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 260,
									"end": 1761,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 260,
									"end": 1761,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 260,
									"end": 1761,
									"name": "BYTE",
									"source": 12
								},
								{
									"begin": 260,
									"end": 1761,
									"name": "PUSH",
									"source": 12,
									"value": "73"
								},
								{
									"begin": 260,
									"end": 1761,
									"name": "EQ",
									"source": 12
								},
								{
									"begin": 260,
									"end": 1761,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 260,
									"end": 1761,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 260,
									"end": 1761,
									"name": "INVALID",
									"source": 12
								},
								{
									"begin": 260,
									"end": 1761,
									"name": "tag",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 260,
									"end": 1761,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 260,
									"end": 1761,
									"name": "ADDRESS",
									"source": 12
								},
								{
									"begin": 260,
									"end": 1761,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 260,
									"end": 1761,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 260,
									"end": 1761,
									"name": "PUSH",
									"source": 12,
									"value": "73"
								},
								{
									"begin": 260,
									"end": 1761,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 260,
									"end": 1761,
									"name": "MSTORE8",
									"source": 12
								},
								{
									"begin": 260,
									"end": 1761,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 260,
									"end": 1761,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 260,
									"end": 1761,
									"name": "RETURN",
									"source": 12
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220415a6c0e2291f730020f32bf9e2fe03aaa4094b1705e09fca6410f44c8836d6e64736f6c63430007060033",
									".code": [
										{
											"begin": 260,
											"end": 1761,
											"name": "PUSHDEPLOYADDRESS",
											"source": 12
										},
										{
											"begin": 260,
											"end": 1761,
											"name": "ADDRESS",
											"source": 12
										},
										{
											"begin": 260,
											"end": 1761,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 260,
											"end": 1761,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 260,
											"end": 1761,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 260,
											"end": 1761,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 260,
											"end": 1761,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 260,
											"end": 1761,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 260,
											"end": 1761,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 260,
											"end": 1761,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 260,
											"end": 1761,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 260,
											"end": 1761,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 260,
											"end": 1761,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 260,
											"end": 1761,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 260,
											"end": 1761,
											"name": "SHR",
											"source": 12
										},
										{
											"begin": 260,
											"end": 1761,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 260,
											"end": 1761,
											"name": "PUSH",
											"source": 12,
											"value": "BCBCAA29"
										},
										{
											"begin": 260,
											"end": 1761,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 260,
											"end": 1761,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 260,
											"end": 1761,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 260,
											"end": 1761,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 260,
											"end": 1761,
											"name": "PUSH",
											"source": 12,
											"value": "C361E0B1"
										},
										{
											"begin": 260,
											"end": 1761,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 260,
											"end": 1761,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 260,
											"end": 1761,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 260,
											"end": 1761,
											"name": "tag",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 260,
											"end": 1761,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 260,
											"end": 1761,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 260,
											"end": 1761,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 260,
											"end": 1761,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "tag",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "PUSH",
											"source": 12,
											"value": "A0"
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "tag",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "6"
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "tag",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "RETURN",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "tag",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "7"
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "8"
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "tag",
											"source": 12,
											"value": "8"
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "9"
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "tag",
											"source": 12,
											"value": "7"
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFF"
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "RETURN",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "tag",
											"source": 12,
											"value": "6"
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1329,
											"end": 1333,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1344,
											"end": 1365,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1344,
											"end": 1388,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1344,
											"end": 1388,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1344,
											"end": 1388,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1344,
											"end": 1388,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 1344,
											"end": 1388,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1344,
											"end": 1388,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1344,
											"end": 1388,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1344,
											"end": 1388,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1369,
											"end": 1372,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 1344,
											"end": 1388,
											"name": "PUSH",
											"source": 12,
											"value": "FFFF"
										},
										{
											"begin": 1344,
											"end": 1388,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1344,
											"end": 1388,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1344,
											"end": 1388,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1344,
											"end": 1388,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1344,
											"end": 1388,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1373,
											"end": 1376,
											"name": "PUSH",
											"source": 12,
											"value": "1F4"
										},
										{
											"begin": 1344,
											"end": 1388,
											"name": "PUSH",
											"source": 12,
											"value": "FFFF"
										},
										{
											"begin": 1344,
											"end": 1388,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1344,
											"end": 1388,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1344,
											"end": 1388,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1344,
											"end": 1388,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1344,
											"end": 1388,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1377,
											"end": 1381,
											"name": "PUSH",
											"source": 12,
											"value": "BB8"
										},
										{
											"begin": 1344,
											"end": 1388,
											"name": "PUSH",
											"source": 12,
											"value": "FFFF"
										},
										{
											"begin": 1344,
											"end": 1388,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1344,
											"end": 1388,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1344,
											"end": 1388,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1344,
											"end": 1388,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1344,
											"end": 1388,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1382,
											"end": 1387,
											"name": "PUSH",
											"source": 12,
											"value": "2710"
										},
										{
											"begin": 1344,
											"end": 1388,
											"name": "PUSH",
											"source": 12,
											"value": "FFFF"
										},
										{
											"begin": 1344,
											"end": 1388,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1344,
											"end": 1388,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1344,
											"end": 1388,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1344,
											"end": 1388,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1344,
											"end": 1388,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1344,
											"end": 1388,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1398,
											"end": 1417,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "11"
										},
										{
											"begin": 1398,
											"end": 1417,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "12"
										},
										{
											"begin": 1398,
											"end": 1417,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1398,
											"end": 1417,
											"name": "tag",
											"source": 12,
											"value": "11"
										},
										{
											"begin": 1398,
											"end": 1417,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1431,
											"end": 1438,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1427,
											"end": 1730,
											"name": "tag",
											"source": 12,
											"value": "13"
										},
										{
											"begin": 1427,
											"end": 1730,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1443,
											"end": 1444,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 1441,
											"end": 1442,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1441,
											"end": 1444,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 1441,
											"end": 1444,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1441,
											"end": 1444,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 1427,
											"end": 1730,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1427,
											"end": 1730,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "14"
										},
										{
											"begin": 1427,
											"end": 1730,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1462,
											"end": 1474,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1495,
											"end": 1502,
											"name": "DUP10",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1511,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1477,
											"end": 1511,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1511,
											"name": "PUSH",
											"source": 12,
											"value": "1698EE82"
										},
										{
											"begin": 1512,
											"end": 1514,
											"name": "DUP11",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 1517,
											"name": "DUP11",
											"source": 12
										},
										{
											"begin": 1518,
											"end": 1522,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 1523,
											"end": 1524,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 1518,
											"end": 1525,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 1518,
											"end": 1525,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1518,
											"end": 1525,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 1518,
											"end": 1525,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1518,
											"end": 1525,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 1518,
											"end": 1525,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "16"
										},
										{
											"begin": 1518,
											"end": 1525,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1518,
											"end": 1525,
											"name": "INVALID",
											"source": 12
										},
										{
											"begin": 1518,
											"end": 1525,
											"name": "tag",
											"source": 12,
											"value": "16"
										},
										{
											"begin": 1518,
											"end": 1525,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1518,
											"end": 1525,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1518,
											"end": 1525,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 1518,
											"end": 1525,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1518,
											"end": 1525,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "PUSH",
											"source": 12,
											"value": "FFFF"
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "EXTCODESIZE",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "17"
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "tag",
											"source": 12,
											"value": "17"
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "STATICCALL",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "19"
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "tag",
											"source": 12,
											"value": "19"
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "tag",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1477,
											"end": 1526,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1462,
											"end": 1526,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1462,
											"end": 1526,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1559,
											"end": 1560,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1543,
											"end": 1561,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1543,
											"end": 1561,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1543,
											"end": 1547,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1543,
											"end": 1561,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1543,
											"end": 1561,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1543,
											"end": 1561,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1539,
											"end": 1571,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1539,
											"end": 1571,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "21"
										},
										{
											"begin": 1539,
											"end": 1571,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1563,
											"end": 1571,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1563,
											"end": 1571,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "15"
										},
										{
											"begin": 1563,
											"end": 1571,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1539,
											"end": 1571,
											"name": "tag",
											"source": 12,
											"value": "21"
										},
										{
											"begin": 1539,
											"end": 1571,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1618,
											"end": 1622,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 1596,
											"end": 1598,
											"name": "DUP10",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1609,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1589,
											"end": 1609,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1609,
											"name": "PUSH",
											"source": 12,
											"value": "70A08231"
										},
										{
											"begin": 1610,
											"end": 1614,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "EXTCODESIZE",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "22"
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "tag",
											"source": 12,
											"value": "22"
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "STATICCALL",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "tag",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "25"
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "tag",
											"source": 12,
											"value": "25"
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1615,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1589,
											"end": 1622,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 1585,
											"end": 1632,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1585,
											"end": 1632,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "26"
										},
										{
											"begin": 1585,
											"end": 1632,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1624,
											"end": 1632,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1624,
											"end": 1632,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "15"
										},
										{
											"begin": 1624,
											"end": 1632,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1585,
											"end": 1632,
											"name": "tag",
											"source": 12,
											"value": "26"
										},
										{
											"begin": 1585,
											"end": 1632,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1679,
											"end": 1683,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 1657,
											"end": 1659,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1670,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1650,
											"end": 1670,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1670,
											"name": "PUSH",
											"source": 12,
											"value": "70A08231"
										},
										{
											"begin": 1671,
											"end": 1675,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "EXTCODESIZE",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "27"
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "tag",
											"source": 12,
											"value": "27"
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "STATICCALL",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "tag",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "30"
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "tag",
											"source": 12,
											"value": "30"
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1676,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1683,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 1646,
											"end": 1693,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1646,
											"end": 1693,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "31"
										},
										{
											"begin": 1646,
											"end": 1693,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1685,
											"end": 1693,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1685,
											"end": 1693,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "15"
										},
										{
											"begin": 1685,
											"end": 1693,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1646,
											"end": 1693,
											"name": "tag",
											"source": 12,
											"value": "31"
										},
										{
											"begin": 1646,
											"end": 1693,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1715,
											"end": 1719,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 1708,
											"end": 1719,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 1719,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 1719,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 1719,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 1719,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 1719,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 1719,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "10"
										},
										{
											"begin": 1708,
											"end": 1719,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1427,
											"end": 1730,
											"name": "tag",
											"source": 12,
											"value": "15"
										},
										{
											"begin": 1427,
											"end": 1730,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1445,
											"end": 1448,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1445,
											"end": 1448,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1445,
											"end": 1448,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 1445,
											"end": 1448,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1445,
											"end": 1448,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1445,
											"end": 1448,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1445,
											"end": 1448,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1427,
											"end": 1730,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "13"
										},
										{
											"begin": 1427,
											"end": 1730,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1427,
											"end": 1730,
											"name": "tag",
											"source": 12,
											"value": "14"
										},
										{
											"begin": 1427,
											"end": 1730,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1427,
											"end": 1730,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1746,
											"end": 1751,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1739,
											"end": 1751,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 1739,
											"end": 1751,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1739,
											"end": 1751,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1739,
											"end": 1751,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "tag",
											"source": 12,
											"value": "10"
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "SWAP6",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1758,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "tag",
											"source": 12,
											"value": "9"
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 366,
											"end": 379,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 380,
											"end": 390,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 401,
											"end": 422,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 401,
											"end": 445,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 401,
											"end": 445,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 401,
											"end": 445,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 401,
											"end": 445,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 401,
											"end": 445,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 401,
											"end": 445,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 401,
											"end": 445,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 401,
											"end": 445,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 426,
											"end": 429,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 401,
											"end": 445,
											"name": "PUSH",
											"source": 12,
											"value": "FFFF"
										},
										{
											"begin": 401,
											"end": 445,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 401,
											"end": 445,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 401,
											"end": 445,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 401,
											"end": 445,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 401,
											"end": 445,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 430,
											"end": 433,
											"name": "PUSH",
											"source": 12,
											"value": "1F4"
										},
										{
											"begin": 401,
											"end": 445,
											"name": "PUSH",
											"source": 12,
											"value": "FFFF"
										},
										{
											"begin": 401,
											"end": 445,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 401,
											"end": 445,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 401,
											"end": 445,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 401,
											"end": 445,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 401,
											"end": 445,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 434,
											"end": 438,
											"name": "PUSH",
											"source": 12,
											"value": "BB8"
										},
										{
											"begin": 401,
											"end": 445,
											"name": "PUSH",
											"source": 12,
											"value": "FFFF"
										},
										{
											"begin": 401,
											"end": 445,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 401,
											"end": 445,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 401,
											"end": 445,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 401,
											"end": 445,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 401,
											"end": 445,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 439,
											"end": 444,
											"name": "PUSH",
											"source": 12,
											"value": "2710"
										},
										{
											"begin": 401,
											"end": 445,
											"name": "PUSH",
											"source": 12,
											"value": "FFFF"
										},
										{
											"begin": 401,
											"end": 445,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 401,
											"end": 445,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 401,
											"end": 445,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 401,
											"end": 445,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 401,
											"end": 445,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 401,
											"end": 445,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 459,
											"end": 466,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 455,
											"end": 1186,
											"name": "tag",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 455,
											"end": 1186,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 471,
											"end": 472,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 469,
											"end": 470,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 469,
											"end": 472,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 469,
											"end": 472,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 469,
											"end": 472,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 455,
											"end": 1186,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 455,
											"end": 1186,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "34"
										},
										{
											"begin": 455,
											"end": 1186,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 487,
											"end": 499,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 520,
											"end": 527,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 502,
											"end": 536,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 502,
											"end": 536,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 502,
											"end": 536,
											"name": "PUSH",
											"source": 12,
											"value": "1698EE82"
										},
										{
											"begin": 537,
											"end": 539,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 540,
											"end": 542,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 543,
											"end": 547,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 548,
											"end": 549,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 543,
											"end": 550,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 543,
											"end": 550,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 543,
											"end": 550,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 543,
											"end": 550,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 543,
											"end": 550,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 543,
											"end": 550,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "36"
										},
										{
											"begin": 543,
											"end": 550,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 543,
											"end": 550,
											"name": "INVALID",
											"source": 12
										},
										{
											"begin": 543,
											"end": 550,
											"name": "tag",
											"source": 12,
											"value": "36"
										},
										{
											"begin": 543,
											"end": 550,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 543,
											"end": 550,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 543,
											"end": 550,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 543,
											"end": 550,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 543,
											"end": 550,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 502,
											"end": 551,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFF"
										},
										{
											"begin": 502,
											"end": 551,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 502,
											"end": 551,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 502,
											"end": 551,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 502,
											"end": 551,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 502,
											"end": 551,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 502,
											"end": 551,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 502,
											"end": 551,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "PUSH",
											"source": 12,
											"value": "FFFF"
										},
										{
											"begin": 502,
											"end": 551,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 502,
											"end": 551,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 502,
											"end": 551,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 502,
											"end": 551,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "EXTCODESIZE",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "37"
										},
										{
											"begin": 502,
											"end": 551,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 502,
											"end": 551,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "tag",
											"source": 12,
											"value": "37"
										},
										{
											"begin": 502,
											"end": 551,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "STATICCALL",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "39"
										},
										{
											"begin": 502,
											"end": 551,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 502,
											"end": 551,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 502,
											"end": 551,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "tag",
											"source": 12,
											"value": "39"
										},
										{
											"begin": 502,
											"end": 551,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 502,
											"end": 551,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 502,
											"end": 551,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 502,
											"end": 551,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 502,
											"end": 551,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "tag",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 502,
											"end": 551,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 502,
											"end": 551,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 502,
											"end": 551,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 487,
											"end": 551,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 487,
											"end": 551,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 581,
											"end": 582,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 565,
											"end": 583,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 565,
											"end": 583,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 565,
											"end": 569,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 565,
											"end": 583,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 565,
											"end": 583,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 565,
											"end": 583,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 561,
											"end": 593,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 561,
											"end": 593,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "41"
										},
										{
											"begin": 561,
											"end": 593,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 585,
											"end": 593,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 585,
											"end": 593,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "35"
										},
										{
											"begin": 585,
											"end": 593,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 561,
											"end": 593,
											"name": "tag",
											"source": 12,
											"value": "41"
										},
										{
											"begin": 561,
											"end": 593,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 613,
											"end": 621,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 631,
											"end": 633,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 624,
											"end": 643,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 624,
											"end": 643,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 624,
											"end": 643,
											"name": "PUSH",
											"source": 12,
											"value": "313CE567"
										},
										{
											"begin": 624,
											"end": 645,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 624,
											"end": 645,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFF"
										},
										{
											"begin": 624,
											"end": 645,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 624,
											"end": 645,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 624,
											"end": 645,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 624,
											"end": 645,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 624,
											"end": 645,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "EXTCODESIZE",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "42"
										},
										{
											"begin": 624,
											"end": 645,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 624,
											"end": 645,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "tag",
											"source": 12,
											"value": "42"
										},
										{
											"begin": 624,
											"end": 645,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "STATICCALL",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 624,
											"end": 645,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 624,
											"end": 645,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 624,
											"end": 645,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "tag",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 624,
											"end": 645,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 624,
											"end": 645,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 624,
											"end": 645,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "45"
										},
										{
											"begin": 624,
											"end": 645,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 624,
											"end": 645,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "tag",
											"source": 12,
											"value": "45"
										},
										{
											"begin": 624,
											"end": 645,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 624,
											"end": 645,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 624,
											"end": 645,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 613,
											"end": 645,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 613,
											"end": 645,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 655,
											"end": 663,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 673,
											"end": 675,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 666,
											"end": 685,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 666,
											"end": 685,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 666,
											"end": 685,
											"name": "PUSH",
											"source": 12,
											"value": "313CE567"
										},
										{
											"begin": 666,
											"end": 687,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 666,
											"end": 687,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFF"
										},
										{
											"begin": 666,
											"end": 687,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 666,
											"end": 687,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 666,
											"end": 687,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 666,
											"end": 687,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 666,
											"end": 687,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "EXTCODESIZE",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "46"
										},
										{
											"begin": 666,
											"end": 687,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 666,
											"end": 687,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "tag",
											"source": 12,
											"value": "46"
										},
										{
											"begin": 666,
											"end": 687,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "STATICCALL",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "48"
										},
										{
											"begin": 666,
											"end": 687,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 666,
											"end": 687,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 666,
											"end": 687,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "tag",
											"source": 12,
											"value": "48"
										},
										{
											"begin": 666,
											"end": 687,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 666,
											"end": 687,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 666,
											"end": 687,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "49"
										},
										{
											"begin": 666,
											"end": 687,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 666,
											"end": 687,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "tag",
											"source": 12,
											"value": "49"
										},
										{
											"begin": 666,
											"end": 687,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 666,
											"end": 687,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 666,
											"end": 687,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 655,
											"end": 687,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 655,
											"end": 687,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 743,
											"end": 745,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 739,
											"end": 745,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 739,
											"end": 745,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 739,
											"end": 741,
											"name": "PUSH",
											"source": 12,
											"value": "A"
										},
										{
											"begin": 739,
											"end": 745,
											"name": "EXP",
											"source": 12
										},
										{
											"begin": 717,
											"end": 719,
											"name": "DUP10",
											"source": 12
										},
										{
											"begin": 710,
											"end": 730,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 710,
											"end": 730,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 710,
											"end": 730,
											"name": "PUSH",
											"source": 12,
											"value": "70A08231"
										},
										{
											"begin": 731,
											"end": 735,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 710,
											"end": 736,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFF"
										},
										{
											"begin": 710,
											"end": 736,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 710,
											"end": 736,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 710,
											"end": 736,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 710,
											"end": 736,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 710,
											"end": 736,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 710,
											"end": 736,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 710,
											"end": 736,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "EXTCODESIZE",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "50"
										},
										{
											"begin": 710,
											"end": 736,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 710,
											"end": 736,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "tag",
											"source": 12,
											"value": "50"
										},
										{
											"begin": 710,
											"end": 736,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "STATICCALL",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "52"
										},
										{
											"begin": 710,
											"end": 736,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 710,
											"end": 736,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 710,
											"end": 736,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "tag",
											"source": 12,
											"value": "52"
										},
										{
											"begin": 710,
											"end": 736,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 710,
											"end": 736,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 710,
											"end": 736,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "53"
										},
										{
											"begin": 710,
											"end": 736,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 710,
											"end": 736,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "tag",
											"source": 12,
											"value": "53"
										},
										{
											"begin": 710,
											"end": 736,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 710,
											"end": 736,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 710,
											"end": 736,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 710,
											"end": 745,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 706,
											"end": 755,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 706,
											"end": 755,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "54"
										},
										{
											"begin": 706,
											"end": 755,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 747,
											"end": 755,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 747,
											"end": 755,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 747,
											"end": 755,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 747,
											"end": 755,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "35"
										},
										{
											"begin": 747,
											"end": 755,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 706,
											"end": 755,
											"name": "tag",
											"source": 12,
											"value": "54"
										},
										{
											"begin": 706,
											"end": 755,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 803,
											"end": 805,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 799,
											"end": 805,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 799,
											"end": 805,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 799,
											"end": 801,
											"name": "PUSH",
											"source": 12,
											"value": "A"
										},
										{
											"begin": 799,
											"end": 805,
											"name": "EXP",
											"source": 12
										},
										{
											"begin": 777,
											"end": 779,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 770,
											"end": 790,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 770,
											"end": 790,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 770,
											"end": 790,
											"name": "PUSH",
											"source": 12,
											"value": "70A08231"
										},
										{
											"begin": 791,
											"end": 795,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 770,
											"end": 796,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFF"
										},
										{
											"begin": 770,
											"end": 796,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 770,
											"end": 796,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 770,
											"end": 796,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 770,
											"end": 796,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 770,
											"end": 796,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 770,
											"end": 796,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 770,
											"end": 796,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "EXTCODESIZE",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "55"
										},
										{
											"begin": 770,
											"end": 796,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 770,
											"end": 796,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "tag",
											"source": 12,
											"value": "55"
										},
										{
											"begin": 770,
											"end": 796,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "STATICCALL",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "57"
										},
										{
											"begin": 770,
											"end": 796,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 770,
											"end": 796,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 770,
											"end": 796,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "tag",
											"source": 12,
											"value": "57"
										},
										{
											"begin": 770,
											"end": 796,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 770,
											"end": 796,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 770,
											"end": 796,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "58"
										},
										{
											"begin": 770,
											"end": 796,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 770,
											"end": 796,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "tag",
											"source": 12,
											"value": "58"
										},
										{
											"begin": 770,
											"end": 796,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 770,
											"end": 796,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 770,
											"end": 796,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 770,
											"end": 805,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 766,
											"end": 815,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 766,
											"end": 815,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "59"
										},
										{
											"begin": 766,
											"end": 815,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 807,
											"end": 815,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 807,
											"end": 815,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 807,
											"end": 815,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 807,
											"end": 815,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "35"
										},
										{
											"begin": 807,
											"end": 815,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 766,
											"end": 815,
											"name": "tag",
											"source": 12,
											"value": "59"
										},
										{
											"begin": 766,
											"end": 815,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 828,
											"end": 838,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 841,
											"end": 870,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 863,
											"end": 867,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 868,
											"end": 869,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 841,
											"end": 862,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "61"
										},
										{
											"begin": 841,
											"end": 870,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 841,
											"end": 870,
											"name": "tag",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 841,
											"end": 870,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 828,
											"end": 870,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 828,
											"end": 870,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 880,
											"end": 897,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 900,
											"end": 956,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "62"
										},
										{
											"begin": 929,
											"end": 933,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 946,
											"end": 948,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 942,
											"end": 948,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 942,
											"end": 948,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 942,
											"end": 944,
											"name": "PUSH",
											"source": 12,
											"value": "A"
										},
										{
											"begin": 942,
											"end": 948,
											"name": "EXP",
											"source": 12
										},
										{
											"begin": 950,
											"end": 952,
											"name": "DUP14",
											"source": 12
										},
										{
											"begin": 953,
											"end": 955,
											"name": "DUP14",
											"source": 12
										},
										{
											"begin": 900,
											"end": 928,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "63"
										},
										{
											"begin": 900,
											"end": 956,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 900,
											"end": 956,
											"name": "tag",
											"source": 12,
											"value": "62"
										},
										{
											"begin": 900,
											"end": 956,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 880,
											"end": 956,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 880,
											"end": 956,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 975,
											"end": 976,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 970,
											"end": 971,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 970,
											"end": 976,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 970,
											"end": 976,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 970,
											"end": 976,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 966,
											"end": 1046,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 966,
											"end": 1046,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 966,
											"end": 1046,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 999,
											"end": 1008,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 991,
											"end": 1008,
											"name": "SWAP9",
											"source": 12
										},
										{
											"begin": 991,
											"end": 1008,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1028,
											"end": 1032,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 1033,
											"end": 1034,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 1028,
											"end": 1035,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 1028,
											"end": 1035,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1028,
											"end": 1035,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 1028,
											"end": 1035,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1028,
											"end": 1035,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 1028,
											"end": 1035,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "65"
										},
										{
											"begin": 1028,
											"end": 1035,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1028,
											"end": 1035,
											"name": "INVALID",
											"source": 12
										},
										{
											"begin": 1028,
											"end": 1035,
											"name": "tag",
											"source": 12,
											"value": "65"
										},
										{
											"begin": 1028,
											"end": 1035,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1028,
											"end": 1035,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1028,
											"end": 1035,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 1028,
											"end": 1035,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1028,
											"end": 1035,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1022,
											"end": 1035,
											"name": "PUSH",
											"source": 12,
											"value": "FFFF"
										},
										{
											"begin": 1022,
											"end": 1035,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1022,
											"end": 1035,
											"name": "SWAP8",
											"source": 12
										},
										{
											"begin": 1022,
											"end": 1035,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 966,
											"end": 1046,
											"name": "tag",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 966,
											"end": 1046,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1063,
											"end": 1064,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1059,
											"end": 1060,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 1059,
											"end": 1064,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 1059,
											"end": 1064,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1059,
											"end": 1064,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 1059,
											"end": 1101,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1059,
											"end": 1101,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1059,
											"end": 1101,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "66"
										},
										{
											"begin": 1059,
											"end": 1101,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1059,
											"end": 1101,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1078,
											"end": 1079,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1069,
											"end": 1074,
											"name": "DUP10",
											"source": 12
										},
										{
											"begin": 1069,
											"end": 1079,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1069,
											"end": 1100,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1069,
											"end": 1100,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "67"
										},
										{
											"begin": 1069,
											"end": 1100,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1069,
											"end": 1100,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1095,
											"end": 1100,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 1083,
											"end": 1092,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1083,
											"end": 1100,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 1069,
											"end": 1100,
											"name": "tag",
											"source": 12,
											"value": "67"
										},
										{
											"begin": 1069,
											"end": 1100,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1059,
											"end": 1101,
											"name": "tag",
											"source": 12,
											"value": "66"
										},
										{
											"begin": 1059,
											"end": 1101,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1055,
											"end": 1176,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1055,
											"end": 1176,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "68"
										},
										{
											"begin": 1055,
											"end": 1176,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1125,
											"end": 1134,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1117,
											"end": 1134,
											"name": "SWAP9",
											"source": 12
										},
										{
											"begin": 1117,
											"end": 1134,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1154,
											"end": 1158,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 1159,
											"end": 1160,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 1154,
											"end": 1161,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 1154,
											"end": 1161,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1154,
											"end": 1161,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 1154,
											"end": 1161,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1154,
											"end": 1161,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 1154,
											"end": 1161,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "69"
										},
										{
											"begin": 1154,
											"end": 1161,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1154,
											"end": 1161,
											"name": "INVALID",
											"source": 12
										},
										{
											"begin": 1154,
											"end": 1161,
											"name": "tag",
											"source": 12,
											"value": "69"
										},
										{
											"begin": 1154,
											"end": 1161,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1154,
											"end": 1161,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1154,
											"end": 1161,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 1154,
											"end": 1161,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1154,
											"end": 1161,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1148,
											"end": 1161,
											"name": "PUSH",
											"source": 12,
											"value": "FFFF"
										},
										{
											"begin": 1148,
											"end": 1161,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1148,
											"end": 1161,
											"name": "SWAP8",
											"source": 12
										},
										{
											"begin": 1148,
											"end": 1161,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1055,
											"end": 1176,
											"name": "tag",
											"source": 12,
											"value": "68"
										},
										{
											"begin": 1055,
											"end": 1176,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 455,
											"end": 1186,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 455,
											"end": 1186,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 455,
											"end": 1186,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 455,
											"end": 1186,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 455,
											"end": 1186,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 455,
											"end": 1186,
											"name": "tag",
											"source": 12,
											"value": "35"
										},
										{
											"begin": 455,
											"end": 1186,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 473,
											"end": 476,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 473,
											"end": 476,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 473,
											"end": 476,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 473,
											"end": 476,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 473,
											"end": 476,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 473,
											"end": 476,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 473,
											"end": 476,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 455,
											"end": 1186,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 455,
											"end": 1186,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 455,
											"end": 1186,
											"name": "tag",
											"source": 12,
											"value": "34"
										},
										{
											"begin": 455,
											"end": 1186,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 455,
											"end": 1186,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1195,
											"end": 1213,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 289,
											"end": 1220,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 270,
											"end": 927,
											"name": "tag",
											"source": 11,
											"value": "61"
										},
										{
											"begin": 270,
											"end": 927,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 367,
											"end": 377,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 415,
											"end": 416,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 401,
											"end": 411,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 401,
											"end": 416,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFF"
										},
										{
											"begin": 401,
											"end": 416,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 401,
											"end": 416,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 401,
											"end": 416,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 393,
											"end": 423,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "71"
										},
										{
											"begin": 393,
											"end": 423,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 393,
											"end": 423,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 393,
											"end": 423,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 393,
											"end": 423,
											"name": "PUSH",
											"source": 11,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 393,
											"end": 423,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 393,
											"end": 423,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 393,
											"end": 423,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 393,
											"end": 423,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 393,
											"end": 423,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 393,
											"end": 423,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 393,
											"end": 423,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 393,
											"end": 423,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 393,
											"end": 423,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 393,
											"end": 423,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 393,
											"end": 423,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 393,
											"end": 423,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 393,
											"end": 423,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 393,
											"end": 423,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 393,
											"end": 423,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 393,
											"end": 423,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 393,
											"end": 423,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 393,
											"end": 423,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 393,
											"end": 423,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 393,
											"end": 423,
											"name": "PUSH",
											"source": 11,
											"value": "4250000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 393,
											"end": 423,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 393,
											"end": 423,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 393,
											"end": 423,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 393,
											"end": 423,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 393,
											"end": 423,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 393,
											"end": 423,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 393,
											"end": 423,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 393,
											"end": 423,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 393,
											"end": 423,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 393,
											"end": 423,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 393,
											"end": 423,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 393,
											"end": 423,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 393,
											"end": 423,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 393,
											"end": 423,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 393,
											"end": 423,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 393,
											"end": 423,
											"name": "tag",
											"source": 11,
											"value": "71"
										},
										{
											"begin": 393,
											"end": 423,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 434,
											"end": 461,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 477,
											"end": 478,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 464,
											"end": 479,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 464,
											"end": 479,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "72"
										},
										{
											"begin": 464,
											"end": 479,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 464,
											"end": 479,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "tag",
											"source": 11,
											"value": "72"
										},
										{
											"begin": 464,
											"end": 479,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 464,
											"end": 479,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 464,
											"end": 479,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 464,
											"end": 479,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 464,
											"end": 479,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "73"
										},
										{
											"begin": 464,
											"end": 479,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 464,
											"end": 479,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 464,
											"end": 479,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "CALLDATACOPY",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "tag",
											"source": 11,
											"value": "73"
										},
										{
											"begin": 464,
											"end": 479,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 464,
											"end": 479,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 434,
											"end": 479,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 434,
											"end": 479,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 506,
											"end": 516,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 489,
											"end": 500,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 501,
											"end": 502,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 489,
											"end": 503,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 489,
											"end": 503,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 489,
											"end": 503,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 489,
											"end": 503,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 489,
											"end": 503,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "74"
										},
										{
											"begin": 489,
											"end": 503,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 489,
											"end": 503,
											"name": "INVALID",
											"source": 11
										},
										{
											"begin": 489,
											"end": 503,
											"name": "tag",
											"source": 11,
											"value": "74"
										},
										{
											"begin": 489,
											"end": 503,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 489,
											"end": 503,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 489,
											"end": 503,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 489,
											"end": 503,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 489,
											"end": 503,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 489,
											"end": 503,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 489,
											"end": 516,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 489,
											"end": 516,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFF"
										},
										{
											"begin": 489,
											"end": 516,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 489,
											"end": 516,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 489,
											"end": 516,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 489,
											"end": 516,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFF"
										},
										{
											"begin": 489,
											"end": 516,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 489,
											"end": 516,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 489,
											"end": 516,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 489,
											"end": 516,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 489,
											"end": 516,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 543,
											"end": 544,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 526,
											"end": 537,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 538,
											"end": 539,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 526,
											"end": 540,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 526,
											"end": 540,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 526,
											"end": 540,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 526,
											"end": 540,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 526,
											"end": 540,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "75"
										},
										{
											"begin": 526,
											"end": 540,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 526,
											"end": 540,
											"name": "INVALID",
											"source": 11
										},
										{
											"begin": 526,
											"end": 540,
											"name": "tag",
											"source": 11,
											"value": "75"
										},
										{
											"begin": 526,
											"end": 540,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 526,
											"end": 540,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 526,
											"end": 540,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 526,
											"end": 540,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 526,
											"end": 540,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 526,
											"end": 540,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 526,
											"end": 544,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 526,
											"end": 544,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFF"
										},
										{
											"begin": 526,
											"end": 544,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 526,
											"end": 544,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 526,
											"end": 544,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 526,
											"end": 544,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFF"
										},
										{
											"begin": 526,
											"end": 544,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 526,
											"end": 544,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 526,
											"end": 544,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 526,
											"end": 544,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 526,
											"end": 544,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 556,
											"end": 586,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 619,
											"end": 623,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 604,
											"end": 632,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 604,
											"end": 632,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 604,
											"end": 632,
											"name": "PUSH",
											"source": 11,
											"value": "883BDBFD"
										},
										{
											"begin": 633,
											"end": 644,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFF"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "tag",
											"source": 11,
											"value": "76"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "78"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "76"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "tag",
											"source": 11,
											"value": "78"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "EXTCODESIZE",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "79"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "tag",
											"source": 11,
											"value": "79"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "GAS",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "STATICCALL",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "RETURNDATACOPY",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "tag",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "RETURNDATACOPY",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "82"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "tag",
											"source": 11,
											"value": "82"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "100000000"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "83"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "tag",
											"source": 11,
											"value": "83"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "tag",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "100000000"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "85"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "tag",
											"source": 11,
											"value": "85"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "tag",
											"source": 11,
											"value": "86"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "88"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "86"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "tag",
											"source": 11,
											"value": "88"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "100000000"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "89"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "tag",
											"source": 11,
											"value": "89"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "90"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "tag",
											"source": 11,
											"value": "90"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "100000000"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "91"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "tag",
											"source": 11,
											"value": "91"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "tag",
											"source": 11,
											"value": "92"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "94"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "92"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "tag",
											"source": 11,
											"value": "94"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 604,
											"end": 645,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 555,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 555,
											"end": 645,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 555,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 656,
											"end": 682,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 706,
											"end": 721,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 722,
											"end": 723,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 706,
											"end": 724,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 706,
											"end": 724,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 706,
											"end": 724,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 706,
											"end": 724,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 706,
											"end": 724,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "95"
										},
										{
											"begin": 706,
											"end": 724,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 706,
											"end": 724,
											"name": "INVALID",
											"source": 11
										},
										{
											"begin": 706,
											"end": 724,
											"name": "tag",
											"source": 11,
											"value": "95"
										},
										{
											"begin": 706,
											"end": 724,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 706,
											"end": 724,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 706,
											"end": 724,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 706,
											"end": 724,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 706,
											"end": 724,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 706,
											"end": 724,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 706,
											"end": 724,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 685,
											"end": 700,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 701,
											"end": 702,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 685,
											"end": 703,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 685,
											"end": 703,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 685,
											"end": 703,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 685,
											"end": 703,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 685,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "96"
										},
										{
											"begin": 685,
											"end": 703,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 685,
											"end": 703,
											"name": "INVALID",
											"source": 11
										},
										{
											"begin": 685,
											"end": 703,
											"name": "tag",
											"source": 11,
											"value": "96"
										},
										{
											"begin": 685,
											"end": 703,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 685,
											"end": 703,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 685,
											"end": 703,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 685,
											"end": 703,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 685,
											"end": 703,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 685,
											"end": 703,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 685,
											"end": 703,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 685,
											"end": 724,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 656,
											"end": 724,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 656,
											"end": 724,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 773,
											"end": 783,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 750,
											"end": 783,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFF"
										},
										{
											"begin": 750,
											"end": 783,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 750,
											"end": 770,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 750,
											"end": 783,
											"name": "PUSH",
											"source": 11,
											"value": "6"
										},
										{
											"begin": 750,
											"end": 783,
											"name": "SIGNEXTEND",
											"source": 11
										},
										{
											"begin": 750,
											"end": 783,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 750,
											"end": 783,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "97"
										},
										{
											"begin": 750,
											"end": 783,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 750,
											"end": 783,
											"name": "INVALID",
											"source": 11
										},
										{
											"begin": 750,
											"end": 783,
											"name": "tag",
											"source": 11,
											"value": "97"
										},
										{
											"begin": 750,
											"end": 783,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 750,
											"end": 783,
											"name": "SDIV",
											"source": 11
										},
										{
											"begin": 737,
											"end": 784,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 737,
											"end": 784,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 866,
											"end": 867,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 843,
											"end": 863,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 843,
											"end": 867,
											"name": "PUSH",
											"source": 11,
											"value": "6"
										},
										{
											"begin": 843,
											"end": 867,
											"name": "SIGNEXTEND",
											"source": 11
										},
										{
											"begin": 843,
											"end": 867,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 843,
											"end": 911,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 843,
											"end": 911,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 843,
											"end": 911,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "98"
										},
										{
											"begin": 843,
											"end": 911,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 843,
											"end": 911,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 909,
											"end": 910,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 895,
											"end": 905,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 872,
											"end": 905,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFF"
										},
										{
											"begin": 872,
											"end": 905,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 872,
											"end": 892,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 872,
											"end": 905,
											"name": "PUSH",
											"source": 11,
											"value": "6"
										},
										{
											"begin": 872,
											"end": 905,
											"name": "SIGNEXTEND",
											"source": 11
										},
										{
											"begin": 872,
											"end": 905,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 872,
											"end": 905,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "99"
										},
										{
											"begin": 872,
											"end": 905,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 872,
											"end": 905,
											"name": "INVALID",
											"source": 11
										},
										{
											"begin": 872,
											"end": 905,
											"name": "tag",
											"source": 11,
											"value": "99"
										},
										{
											"begin": 872,
											"end": 905,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 872,
											"end": 905,
											"name": "SMOD",
											"source": 11
										},
										{
											"begin": 872,
											"end": 910,
											"name": "PUSH",
											"source": 11,
											"value": "6"
										},
										{
											"begin": 872,
											"end": 910,
											"name": "SIGNEXTEND",
											"source": 11
										},
										{
											"begin": 872,
											"end": 910,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 872,
											"end": 910,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 843,
											"end": 911,
											"name": "tag",
											"source": 11,
											"value": "98"
										},
										{
											"begin": 843,
											"end": 911,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 839,
											"end": 919,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 839,
											"end": 919,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 839,
											"end": 919,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 913,
											"end": 919,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 913,
											"end": 919,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 913,
											"end": 919,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 913,
											"end": 919,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 913,
											"end": 919,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 913,
											"end": 919,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 913,
											"end": 919,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 913,
											"end": 919,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 839,
											"end": 919,
											"name": "tag",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 839,
											"end": 919,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 270,
											"end": 927,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 270,
											"end": 927,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 270,
											"end": 927,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 270,
											"end": 927,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 270,
											"end": 927,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 270,
											"end": 927,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 270,
											"end": 927,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 270,
											"end": 927,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 934,
											"end": 1889,
											"name": "tag",
											"source": 11,
											"value": "63"
										},
										{
											"begin": 934,
											"end": 1889,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1090,
											"end": 1109,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1121,
											"end": 1141,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1144,
											"end": 1177,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "102"
										},
										{
											"begin": 1172,
											"end": 1176,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 1144,
											"end": 1171,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "103"
										},
										{
											"begin": 1144,
											"end": 1177,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1144,
											"end": 1177,
											"name": "tag",
											"source": 11,
											"value": "102"
										},
										{
											"begin": 1144,
											"end": 1177,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1121,
											"end": 1177,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1121,
											"end": 1177,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1312,
											"end": 1329,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1296,
											"end": 1329,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1296,
											"end": 1329,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1296,
											"end": 1308,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1296,
											"end": 1329,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1296,
											"end": 1329,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1296,
											"end": 1329,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 1292,
											"end": 1883,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "104"
										},
										{
											"begin": 1292,
											"end": 1883,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1345,
											"end": 1362,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1389,
											"end": 1401,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1365,
											"end": 1401,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1365,
											"end": 1401,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1373,
											"end": 1385,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1365,
											"end": 1386,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1365,
											"end": 1386,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1365,
											"end": 1401,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1441,
											"end": 1451,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 1429,
											"end": 1451,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1429,
											"end": 1451,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1429,
											"end": 1438,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 1429,
											"end": 1451,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1429,
											"end": 1451,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1429,
											"end": 1451,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 1429,
											"end": 1585,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "105"
										},
										{
											"begin": 1429,
											"end": 1585,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1537,
											"end": 1585,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "106"
										},
										{
											"begin": 1553,
											"end": 1561,
											"name": "PUSH",
											"source": 11,
											"value": "1000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1563,
											"end": 1573,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 1537,
											"end": 1585,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1537,
											"end": 1585,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1575,
											"end": 1584,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 1537,
											"end": 1552,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "107"
										},
										{
											"begin": 1537,
											"end": 1585,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1537,
											"end": 1585,
											"name": "tag",
											"source": 11,
											"value": "106"
										},
										{
											"begin": 1537,
											"end": 1585,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1429,
											"end": 1585,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "108"
										},
										{
											"begin": 1429,
											"end": 1585,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1429,
											"end": 1585,
											"name": "tag",
											"source": 11,
											"value": "105"
										},
										{
											"begin": 1429,
											"end": 1585,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1470,
											"end": 1518,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "109"
										},
										{
											"begin": 1486,
											"end": 1495,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1497,
											"end": 1507,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 1470,
											"end": 1518,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1470,
											"end": 1518,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1509,
											"end": 1517,
											"name": "PUSH",
											"source": 11,
											"value": "1000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1470,
											"end": 1485,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "107"
										},
										{
											"begin": 1470,
											"end": 1518,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1470,
											"end": 1518,
											"name": "tag",
											"source": 11,
											"value": "109"
										},
										{
											"begin": 1470,
											"end": 1518,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1429,
											"end": 1585,
											"name": "tag",
											"source": 11,
											"value": "108"
										},
										{
											"begin": 1429,
											"end": 1585,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1415,
											"end": 1585,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1415,
											"end": 1585,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1292,
											"end": 1883,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1292,
											"end": 1883,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "110"
										},
										{
											"begin": 1292,
											"end": 1883,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1292,
											"end": 1883,
											"name": "tag",
											"source": 11,
											"value": "104"
										},
										{
											"begin": 1292,
											"end": 1883,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1616,
											"end": 1633,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1636,
											"end": 1688,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "111"
										},
										{
											"begin": 1652,
											"end": 1664,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1636,
											"end": 1688,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1636,
											"end": 1688,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1666,
											"end": 1678,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 1636,
											"end": 1688,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1636,
											"end": 1688,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1680,
											"end": 1687,
											"name": "PUSH",
											"source": 11,
											"value": "10000000000000000"
										},
										{
											"begin": 1636,
											"end": 1651,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "107"
										},
										{
											"begin": 1636,
											"end": 1688,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1636,
											"end": 1688,
											"name": "tag",
											"source": 11,
											"value": "111"
										},
										{
											"begin": 1636,
											"end": 1688,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1616,
											"end": 1688,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1616,
											"end": 1688,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1728,
											"end": 1738,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 1716,
											"end": 1738,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1716,
											"end": 1738,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1716,
											"end": 1725,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 1716,
											"end": 1738,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1716,
											"end": 1738,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1716,
											"end": 1738,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 1716,
											"end": 1872,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "112"
										},
										{
											"begin": 1716,
											"end": 1872,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1824,
											"end": 1872,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "113"
										},
										{
											"begin": 1840,
											"end": 1848,
											"name": "PUSH",
											"source": 11,
											"value": "100000000000000000000000000000000"
										},
										{
											"begin": 1850,
											"end": 1860,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 1824,
											"end": 1872,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1824,
											"end": 1872,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1862,
											"end": 1871,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 1824,
											"end": 1839,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "107"
										},
										{
											"begin": 1824,
											"end": 1872,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1824,
											"end": 1872,
											"name": "tag",
											"source": 11,
											"value": "113"
										},
										{
											"begin": 1824,
											"end": 1872,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1716,
											"end": 1872,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "114"
										},
										{
											"begin": 1716,
											"end": 1872,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1716,
											"end": 1872,
											"name": "tag",
											"source": 11,
											"value": "112"
										},
										{
											"begin": 1716,
											"end": 1872,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1757,
											"end": 1805,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "115"
										},
										{
											"begin": 1773,
											"end": 1782,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1784,
											"end": 1794,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 1757,
											"end": 1805,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1757,
											"end": 1805,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1796,
											"end": 1804,
											"name": "PUSH",
											"source": 11,
											"value": "100000000000000000000000000000000"
										},
										{
											"begin": 1757,
											"end": 1772,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "107"
										},
										{
											"begin": 1757,
											"end": 1805,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1757,
											"end": 1805,
											"name": "tag",
											"source": 11,
											"value": "115"
										},
										{
											"begin": 1757,
											"end": 1805,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1716,
											"end": 1872,
											"name": "tag",
											"source": 11,
											"value": "114"
										},
										{
											"begin": 1716,
											"end": 1872,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1702,
											"end": 1872,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1702,
											"end": 1872,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1292,
											"end": 1883,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1292,
											"end": 1883,
											"name": "tag",
											"source": 11,
											"value": "110"
										},
										{
											"begin": 1292,
											"end": 1883,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 934,
											"end": 1889,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 934,
											"end": 1889,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 934,
											"end": 1889,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 934,
											"end": 1889,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 934,
											"end": 1889,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 934,
											"end": 1889,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 934,
											"end": 1889,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 934,
											"end": 1889,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 1362,
											"end": 3942,
											"name": "tag",
											"source": 9,
											"value": "103"
										},
										{
											"begin": 1362,
											"end": 3942,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1425,
											"end": 1445,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1457,
											"end": 1472,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1482,
											"end": 1483,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1475,
											"end": 1479,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1475,
											"end": 1483,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 1475,
											"end": 1483,
											"name": "SIGNEXTEND",
											"source": 9
										},
										{
											"begin": 1475,
											"end": 1483,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 1475,
											"end": 1532,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "117"
										},
										{
											"begin": 1475,
											"end": 1532,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1526,
											"end": 1530,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1519,
											"end": 1531,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 1519,
											"end": 1531,
											"name": "SIGNEXTEND",
											"source": 9
										},
										{
											"begin": 1475,
											"end": 1532,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 1475,
											"end": 1532,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1475,
											"end": 1532,
											"name": "tag",
											"source": 9,
											"value": "117"
										},
										{
											"begin": 1475,
											"end": 1532,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1502,
											"end": 1506,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1495,
											"end": 1507,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 1495,
											"end": 1507,
											"name": "SIGNEXTEND",
											"source": 9
										},
										{
											"begin": 1494,
											"end": 1507,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1494,
											"end": 1507,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1475,
											"end": 1532,
											"name": "tag",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 1475,
											"end": 1532,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1457,
											"end": 1532,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1457,
											"end": 1532,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 484,
											"end": 491,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF27618"
										},
										{
											"begin": 644,
											"end": 653,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 644,
											"end": 653,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1561,
											"end": 1578,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 1561,
											"end": 1578,
											"name": "SIGNEXTEND",
											"source": 9
										},
										{
											"begin": 1550,
											"end": 1557,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1550,
											"end": 1578,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 1550,
											"end": 1578,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "119"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH",
											"source": 9,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH",
											"source": 9,
											"value": "5400000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "tag",
											"source": 9,
											"value": "119"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1595,
											"end": 1608,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1628,
											"end": 1629,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1621,
											"end": 1624,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 1611,
											"end": 1618,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 1624,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 1629,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 1629,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 1704,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "120"
										},
										{
											"begin": 1611,
											"end": 1704,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1669,
											"end": 1704,
											"name": "PUSH",
											"source": 9,
											"value": "100000000000000000000000000000000"
										},
										{
											"begin": 1611,
											"end": 1704,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "121"
										},
										{
											"begin": 1611,
											"end": 1704,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 1704,
											"name": "tag",
											"source": 9,
											"value": "120"
										},
										{
											"begin": 1611,
											"end": 1704,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1632,
											"end": 1666,
											"name": "PUSH",
											"source": 9,
											"value": "FFFCB933BD6FAD37AA2D162D1A594001"
										},
										{
											"begin": 1611,
											"end": 1704,
											"name": "tag",
											"source": 9,
											"value": "121"
										},
										{
											"begin": 1611,
											"end": 1704,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1595,
											"end": 1704,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1595,
											"end": 1704,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1595,
											"end": 1704,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1595,
											"end": 1704,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1735,
											"end": 1736,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1728,
											"end": 1731,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 1718,
											"end": 1725,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1718,
											"end": 1731,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1718,
											"end": 1736,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1714,
											"end": 1797,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "122"
										},
										{
											"begin": 1714,
											"end": 1797,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1794,
											"end": 1797,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 1755,
											"end": 1789,
											"name": "PUSH",
											"source": 9,
											"value": "FFF97272373D413259A46990580E213A"
										},
										{
											"begin": 1747,
											"end": 1752,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1747,
											"end": 1789,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 1746,
											"end": 1797,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1746,
											"end": 1797,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 1738,
											"end": 1797,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1738,
											"end": 1797,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1714,
											"end": 1797,
											"name": "tag",
											"source": 9,
											"value": "122"
										},
										{
											"begin": 1714,
											"end": 1797,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1828,
											"end": 1829,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1821,
											"end": 1824,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1811,
											"end": 1818,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1811,
											"end": 1824,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1811,
											"end": 1829,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1807,
											"end": 1890,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 1807,
											"end": 1890,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1887,
											"end": 1890,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 1848,
											"end": 1882,
											"name": "PUSH",
											"source": 9,
											"value": "FFF2E50F5F656932EF12357CF3C7FDCC"
										},
										{
											"begin": 1840,
											"end": 1845,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1840,
											"end": 1882,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 1839,
											"end": 1890,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1839,
											"end": 1890,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 1831,
											"end": 1890,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1831,
											"end": 1890,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1807,
											"end": 1890,
											"name": "tag",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 1807,
											"end": 1890,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1921,
											"end": 1922,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1914,
											"end": 1917,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 1904,
											"end": 1911,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1904,
											"end": 1917,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1904,
											"end": 1922,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1900,
											"end": 1983,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "124"
										},
										{
											"begin": 1900,
											"end": 1983,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1980,
											"end": 1983,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 1941,
											"end": 1975,
											"name": "PUSH",
											"source": 9,
											"value": "FFE5CACA7E10E4E61C3624EAA0941CD0"
										},
										{
											"begin": 1933,
											"end": 1938,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1933,
											"end": 1975,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 1932,
											"end": 1983,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1932,
											"end": 1983,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 1924,
											"end": 1983,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1924,
											"end": 1983,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1900,
											"end": 1983,
											"name": "tag",
											"source": 9,
											"value": "124"
										},
										{
											"begin": 1900,
											"end": 1983,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2015,
											"end": 2016,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2007,
											"end": 2011,
											"name": "PUSH",
											"source": 9,
											"value": "10"
										},
										{
											"begin": 1997,
											"end": 2004,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1997,
											"end": 2011,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1997,
											"end": 2016,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1993,
											"end": 2077,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 1993,
											"end": 2077,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2074,
											"end": 2077,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2035,
											"end": 2069,
											"name": "PUSH",
											"source": 9,
											"value": "FFCB9843D60F6159C9DB58835C926644"
										},
										{
											"begin": 2027,
											"end": 2032,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2027,
											"end": 2069,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2026,
											"end": 2077,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2026,
											"end": 2077,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2018,
											"end": 2077,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2018,
											"end": 2077,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1993,
											"end": 2077,
											"name": "tag",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 1993,
											"end": 2077,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2109,
											"end": 2110,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2101,
											"end": 2105,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2091,
											"end": 2098,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2091,
											"end": 2105,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2091,
											"end": 2110,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2087,
											"end": 2171,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "126"
										},
										{
											"begin": 2087,
											"end": 2171,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2168,
											"end": 2171,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2129,
											"end": 2163,
											"name": "PUSH",
											"source": 9,
											"value": "FF973B41FA98C081472E6896DFB254C0"
										},
										{
											"begin": 2121,
											"end": 2126,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2121,
											"end": 2163,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2120,
											"end": 2171,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2120,
											"end": 2171,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2112,
											"end": 2171,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2112,
											"end": 2171,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2087,
											"end": 2171,
											"name": "tag",
											"source": 9,
											"value": "126"
										},
										{
											"begin": 2087,
											"end": 2171,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2203,
											"end": 2204,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2195,
											"end": 2199,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2185,
											"end": 2192,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2185,
											"end": 2199,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2185,
											"end": 2204,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2181,
											"end": 2265,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "127"
										},
										{
											"begin": 2181,
											"end": 2265,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2262,
											"end": 2265,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2223,
											"end": 2257,
											"name": "PUSH",
											"source": 9,
											"value": "FF2EA16466C96A3843EC78B326B52861"
										},
										{
											"begin": 2215,
											"end": 2220,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2215,
											"end": 2257,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2214,
											"end": 2265,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2214,
											"end": 2265,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2206,
											"end": 2265,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2206,
											"end": 2265,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2181,
											"end": 2265,
											"name": "tag",
											"source": 9,
											"value": "127"
										},
										{
											"begin": 2181,
											"end": 2265,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2297,
											"end": 2298,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2289,
											"end": 2293,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2279,
											"end": 2286,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2279,
											"end": 2293,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2279,
											"end": 2298,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2275,
											"end": 2359,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "128"
										},
										{
											"begin": 2275,
											"end": 2359,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2356,
											"end": 2359,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2317,
											"end": 2351,
											"name": "PUSH",
											"source": 9,
											"value": "FE5DEE046A99A2A811C461F1969C3053"
										},
										{
											"begin": 2309,
											"end": 2314,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2309,
											"end": 2351,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2308,
											"end": 2359,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2308,
											"end": 2359,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2300,
											"end": 2359,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2300,
											"end": 2359,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2275,
											"end": 2359,
											"name": "tag",
											"source": 9,
											"value": "128"
										},
										{
											"begin": 2275,
											"end": 2359,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2392,
											"end": 2393,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2383,
											"end": 2388,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 2373,
											"end": 2380,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2373,
											"end": 2388,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2373,
											"end": 2393,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2369,
											"end": 2454,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "129"
										},
										{
											"begin": 2369,
											"end": 2454,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2451,
											"end": 2454,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2412,
											"end": 2446,
											"name": "PUSH",
											"source": 9,
											"value": "FCBE86C7900A88AEDCFFC83B479AA3A4"
										},
										{
											"begin": 2404,
											"end": 2409,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2404,
											"end": 2446,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2403,
											"end": 2454,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2403,
											"end": 2454,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2395,
											"end": 2454,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2395,
											"end": 2454,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2369,
											"end": 2454,
											"name": "tag",
											"source": 9,
											"value": "129"
										},
										{
											"begin": 2369,
											"end": 2454,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2487,
											"end": 2488,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2478,
											"end": 2483,
											"name": "PUSH",
											"source": 9,
											"value": "200"
										},
										{
											"begin": 2468,
											"end": 2475,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2468,
											"end": 2483,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2468,
											"end": 2488,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2464,
											"end": 2549,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "130"
										},
										{
											"begin": 2464,
											"end": 2549,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2546,
											"end": 2549,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2507,
											"end": 2541,
											"name": "PUSH",
											"source": 9,
											"value": "F987A7253AC413176F2B074CF7815E54"
										},
										{
											"begin": 2499,
											"end": 2504,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2499,
											"end": 2541,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2498,
											"end": 2549,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2498,
											"end": 2549,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2490,
											"end": 2549,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2490,
											"end": 2549,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2464,
											"end": 2549,
											"name": "tag",
											"source": 9,
											"value": "130"
										},
										{
											"begin": 2464,
											"end": 2549,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2582,
											"end": 2583,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2573,
											"end": 2578,
											"name": "PUSH",
											"source": 9,
											"value": "400"
										},
										{
											"begin": 2563,
											"end": 2570,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2563,
											"end": 2578,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2563,
											"end": 2583,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2559,
											"end": 2644,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "131"
										},
										{
											"begin": 2559,
											"end": 2644,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2641,
											"end": 2644,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2602,
											"end": 2636,
											"name": "PUSH",
											"source": 9,
											"value": "F3392B0822B70005940C7A398E4B70F3"
										},
										{
											"begin": 2594,
											"end": 2599,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2594,
											"end": 2636,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2593,
											"end": 2644,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2593,
											"end": 2644,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2585,
											"end": 2644,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2585,
											"end": 2644,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2559,
											"end": 2644,
											"name": "tag",
											"source": 9,
											"value": "131"
										},
										{
											"begin": 2559,
											"end": 2644,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2677,
											"end": 2678,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2668,
											"end": 2673,
											"name": "PUSH",
											"source": 9,
											"value": "800"
										},
										{
											"begin": 2658,
											"end": 2665,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2658,
											"end": 2673,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2658,
											"end": 2678,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2654,
											"end": 2739,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "132"
										},
										{
											"begin": 2654,
											"end": 2739,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2736,
											"end": 2739,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2697,
											"end": 2731,
											"name": "PUSH",
											"source": 9,
											"value": "E7159475A2C29B7443B29C7FA6E889D9"
										},
										{
											"begin": 2689,
											"end": 2694,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2689,
											"end": 2731,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2688,
											"end": 2739,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2688,
											"end": 2739,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2680,
											"end": 2739,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2680,
											"end": 2739,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2654,
											"end": 2739,
											"name": "tag",
											"source": 9,
											"value": "132"
										},
										{
											"begin": 2654,
											"end": 2739,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2773,
											"end": 2774,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2763,
											"end": 2769,
											"name": "PUSH",
											"source": 9,
											"value": "1000"
										},
										{
											"begin": 2753,
											"end": 2760,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2753,
											"end": 2769,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2753,
											"end": 2774,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2749,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "133"
										},
										{
											"begin": 2749,
											"end": 2835,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2832,
											"end": 2835,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2793,
											"end": 2827,
											"name": "PUSH",
											"source": 9,
											"value": "D097F3BDFD2022B8845AD8F792AA5825"
										},
										{
											"begin": 2785,
											"end": 2790,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2785,
											"end": 2827,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2784,
											"end": 2835,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2784,
											"end": 2835,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2776,
											"end": 2835,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2776,
											"end": 2835,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2749,
											"end": 2835,
											"name": "tag",
											"source": 9,
											"value": "133"
										},
										{
											"begin": 2749,
											"end": 2835,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2869,
											"end": 2870,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2859,
											"end": 2865,
											"name": "PUSH",
											"source": 9,
											"value": "2000"
										},
										{
											"begin": 2849,
											"end": 2856,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2849,
											"end": 2865,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2849,
											"end": 2870,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2845,
											"end": 2931,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "134"
										},
										{
											"begin": 2845,
											"end": 2931,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2928,
											"end": 2931,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2889,
											"end": 2923,
											"name": "PUSH",
											"source": 9,
											"value": "A9F746462D870FDF8A65DC1F90E061E5"
										},
										{
											"begin": 2881,
											"end": 2886,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2881,
											"end": 2923,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2880,
											"end": 2931,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2880,
											"end": 2931,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2872,
											"end": 2931,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2872,
											"end": 2931,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2845,
											"end": 2931,
											"name": "tag",
											"source": 9,
											"value": "134"
										},
										{
											"begin": 2845,
											"end": 2931,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2965,
											"end": 2966,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2955,
											"end": 2961,
											"name": "PUSH",
											"source": 9,
											"value": "4000"
										},
										{
											"begin": 2945,
											"end": 2952,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2945,
											"end": 2961,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2945,
											"end": 2966,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2941,
											"end": 3027,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "135"
										},
										{
											"begin": 2941,
											"end": 3027,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3024,
											"end": 3027,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2985,
											"end": 3019,
											"name": "PUSH",
											"source": 9,
											"value": "70D869A156D2A1B890BB3DF62BAF32F7"
										},
										{
											"begin": 2977,
											"end": 2982,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2977,
											"end": 3019,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2976,
											"end": 3027,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2976,
											"end": 3027,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2968,
											"end": 3027,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2968,
											"end": 3027,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2941,
											"end": 3027,
											"name": "tag",
											"source": 9,
											"value": "135"
										},
										{
											"begin": 2941,
											"end": 3027,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3061,
											"end": 3062,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3051,
											"end": 3057,
											"name": "PUSH",
											"source": 9,
											"value": "8000"
										},
										{
											"begin": 3041,
											"end": 3048,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3041,
											"end": 3057,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3041,
											"end": 3062,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 3037,
											"end": 3123,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "136"
										},
										{
											"begin": 3037,
											"end": 3123,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3120,
											"end": 3123,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 3081,
											"end": 3115,
											"name": "PUSH",
											"source": 9,
											"value": "31BE135F97D08FD981231505542FCFA6"
										},
										{
											"begin": 3073,
											"end": 3078,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3073,
											"end": 3115,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 3072,
											"end": 3123,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3072,
											"end": 3123,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 3064,
											"end": 3123,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3064,
											"end": 3123,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3037,
											"end": 3123,
											"name": "tag",
											"source": 9,
											"value": "136"
										},
										{
											"begin": 3037,
											"end": 3123,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3158,
											"end": 3159,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3147,
											"end": 3154,
											"name": "PUSH",
											"source": 9,
											"value": "10000"
										},
										{
											"begin": 3137,
											"end": 3144,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3137,
											"end": 3154,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3137,
											"end": 3159,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 3133,
											"end": 3219,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "137"
										},
										{
											"begin": 3133,
											"end": 3219,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3216,
											"end": 3219,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 3178,
											"end": 3211,
											"name": "PUSH",
											"source": 9,
											"value": "9AA508B5B7A84E1C677DE54F3E99BC9"
										},
										{
											"begin": 3170,
											"end": 3175,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3170,
											"end": 3211,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 3169,
											"end": 3219,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3169,
											"end": 3219,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 3161,
											"end": 3219,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3161,
											"end": 3219,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3133,
											"end": 3219,
											"name": "tag",
											"source": 9,
											"value": "137"
										},
										{
											"begin": 3133,
											"end": 3219,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3254,
											"end": 3255,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3243,
											"end": 3250,
											"name": "PUSH",
											"source": 9,
											"value": "20000"
										},
										{
											"begin": 3233,
											"end": 3240,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3233,
											"end": 3250,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3233,
											"end": 3255,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 3229,
											"end": 3314,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "138"
										},
										{
											"begin": 3229,
											"end": 3314,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3311,
											"end": 3314,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 3274,
											"end": 3306,
											"name": "PUSH",
											"source": 9,
											"value": "5D6AF8DEDB81196699C329225EE604"
										},
										{
											"begin": 3266,
											"end": 3271,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3266,
											"end": 3306,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 3265,
											"end": 3314,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3265,
											"end": 3314,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 3257,
											"end": 3314,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3257,
											"end": 3314,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3229,
											"end": 3314,
											"name": "tag",
											"source": 9,
											"value": "138"
										},
										{
											"begin": 3229,
											"end": 3314,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3349,
											"end": 3350,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3338,
											"end": 3345,
											"name": "PUSH",
											"source": 9,
											"value": "40000"
										},
										{
											"begin": 3328,
											"end": 3335,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3328,
											"end": 3345,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3328,
											"end": 3350,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 3324,
											"end": 3407,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "139"
										},
										{
											"begin": 3324,
											"end": 3407,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3404,
											"end": 3407,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 3369,
											"end": 3399,
											"name": "PUSH",
											"source": 9,
											"value": "2216E584F5FA1EA926041BEDFE98"
										},
										{
											"begin": 3361,
											"end": 3366,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3361,
											"end": 3399,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 3360,
											"end": 3407,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3360,
											"end": 3407,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 3352,
											"end": 3407,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3352,
											"end": 3407,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3324,
											"end": 3407,
											"name": "tag",
											"source": 9,
											"value": "139"
										},
										{
											"begin": 3324,
											"end": 3407,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3442,
											"end": 3443,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3431,
											"end": 3438,
											"name": "PUSH",
											"source": 9,
											"value": "80000"
										},
										{
											"begin": 3421,
											"end": 3428,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3421,
											"end": 3438,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3421,
											"end": 3443,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 3417,
											"end": 3495,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "140"
										},
										{
											"begin": 3417,
											"end": 3495,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3492,
											"end": 3495,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 3462,
											"end": 3487,
											"name": "PUSH",
											"source": 9,
											"value": "48A170391F7DC42444E8FA2"
										},
										{
											"begin": 3454,
											"end": 3459,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3454,
											"end": 3487,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 3453,
											"end": 3495,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3453,
											"end": 3495,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 3445,
											"end": 3495,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3445,
											"end": 3495,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3417,
											"end": 3495,
											"name": "tag",
											"source": 9,
											"value": "140"
										},
										{
											"begin": 3417,
											"end": 3495,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3517,
											"end": 3518,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3510,
											"end": 3514,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3510,
											"end": 3518,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 3510,
											"end": 3518,
											"name": "SIGNEXTEND",
											"source": 9
										},
										{
											"begin": 3510,
											"end": 3518,
											"name": "SGT",
											"source": 9
										},
										{
											"begin": 3506,
											"end": 3553,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3506,
											"end": 3553,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "141"
										},
										{
											"begin": 3506,
											"end": 3553,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3548,
											"end": 3553,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3528,
											"end": 3545,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3528,
											"end": 3553,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3528,
											"end": 3553,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "142"
										},
										{
											"begin": 3528,
											"end": 3553,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3528,
											"end": 3553,
											"name": "INVALID",
											"source": 9
										},
										{
											"begin": 3528,
											"end": 3553,
											"name": "tag",
											"source": 9,
											"value": "142"
										},
										{
											"begin": 3528,
											"end": 3553,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3528,
											"end": 3553,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 3520,
											"end": 3553,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3520,
											"end": 3553,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3506,
											"end": 3553,
											"name": "tag",
											"source": 9,
											"value": "141"
										},
										{
											"begin": 3506,
											"end": 3553,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3924,
											"end": 3925,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3912,
											"end": 3919,
											"name": "PUSH",
											"source": 9,
											"value": "100000000"
										},
										{
											"begin": 3903,
											"end": 3908,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3903,
											"end": 3920,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3903,
											"end": 3920,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "143"
										},
										{
											"begin": 3903,
											"end": 3920,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3903,
											"end": 3920,
											"name": "INVALID",
											"source": 9
										},
										{
											"begin": 3903,
											"end": 3920,
											"name": "tag",
											"source": 9,
											"value": "143"
										},
										{
											"begin": 3903,
											"end": 3920,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3903,
											"end": 3920,
											"name": "MOD",
											"source": 9
										},
										{
											"begin": 3903,
											"end": 3925,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 3903,
											"end": 3933,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "144"
										},
										{
											"begin": 3903,
											"end": 3933,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3932,
											"end": 3933,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 3903,
											"end": 3933,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "145"
										},
										{
											"begin": 3903,
											"end": 3933,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3903,
											"end": 3933,
											"name": "tag",
											"source": 9,
											"value": "144"
										},
										{
											"begin": 3903,
											"end": 3933,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3928,
											"end": 3929,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3903,
											"end": 3933,
											"name": "tag",
											"source": 9,
											"value": "145"
										},
										{
											"begin": 3903,
											"end": 3933,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3886,
											"end": 3934,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 3886,
											"end": 3934,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3896,
											"end": 3898,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3887,
											"end": 3892,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3887,
											"end": 3898,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3887,
											"end": 3898,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 3886,
											"end": 3934,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3863,
											"end": 3935,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3863,
											"end": 3935,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1362,
											"end": 3942,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1362,
											"end": 3942,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1362,
											"end": 3942,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1362,
											"end": 3942,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1362,
											"end": 3942,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1362,
											"end": 3942,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 749,
											"end": 4525,
											"name": "tag",
											"source": 8,
											"value": "107"
										},
										{
											"begin": 749,
											"end": 4525,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 861,
											"end": 875,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1190,
											"end": 1203,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1258,
											"end": 1271,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1375,
											"end": 1376,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1371,
											"end": 1377,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 1368,
											"end": 1369,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1365,
											"end": 1366,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 1358,
											"end": 1378,
											"name": "MULMOD",
											"source": 8
										},
										{
											"begin": 1407,
											"end": 1408,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1404,
											"end": 1405,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 1400,
											"end": 1409,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 1391,
											"end": 1409,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1391,
											"end": 1409,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1458,
											"end": 1463,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1454,
											"end": 1456,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1451,
											"end": 1464,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 1443,
											"end": 1448,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1439,
											"end": 1441,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1435,
											"end": 1449,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1431,
											"end": 1465,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1422,
											"end": 1465,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1422,
											"end": 1465,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1334,
											"end": 1475,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1556,
											"end": 1557,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1547,
											"end": 1552,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1547,
											"end": 1557,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 1543,
											"end": 1722,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1543,
											"end": 1722,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "147"
										},
										{
											"begin": 1543,
											"end": 1722,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1595,
											"end": 1596,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1581,
											"end": 1592,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 1573,
											"end": 1597,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "148"
										},
										{
											"begin": 1573,
											"end": 1597,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1573,
											"end": 1597,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1573,
											"end": 1597,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1573,
											"end": 1597,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1573,
											"end": 1597,
											"name": "tag",
											"source": 8,
											"value": "148"
										},
										{
											"begin": 1573,
											"end": 1597,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1659,
											"end": 1670,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1652,
											"end": 1657,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1648,
											"end": 1671,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 1638,
											"end": 1671,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1638,
											"end": 1671,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1698,
											"end": 1711,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1698,
											"end": 1711,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1698,
											"end": 1711,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "146"
										},
										{
											"begin": 1698,
											"end": 1711,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1543,
											"end": 1722,
											"name": "tag",
											"source": 8,
											"value": "147"
										},
										{
											"begin": 1543,
											"end": 1722,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1849,
											"end": 1854,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1835,
											"end": 1846,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1835,
											"end": 1854,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 1827,
											"end": 1855,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "149"
										},
										{
											"begin": 1827,
											"end": 1855,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1827,
											"end": 1855,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1827,
											"end": 1855,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1827,
											"end": 1855,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1827,
											"end": 1855,
											"name": "tag",
											"source": 8,
											"value": "149"
										},
										{
											"begin": 1827,
											"end": 1855,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2132,
											"end": 2149,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2208,
											"end": 2219,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2205,
											"end": 2206,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 2202,
											"end": 2203,
											"name": "DUP9",
											"source": 8
										},
										{
											"begin": 2195,
											"end": 2220,
											"name": "MULMOD",
											"source": 8
										},
										{
											"begin": 2182,
											"end": 2220,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2182,
											"end": 2220,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2351,
											"end": 2356,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2340,
											"end": 2349,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2337,
											"end": 2357,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 2330,
											"end": 2335,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2326,
											"end": 2358,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2317,
											"end": 2358,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2317,
											"end": 2358,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2391,
											"end": 2400,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2384,
											"end": 2389,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2380,
											"end": 2401,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2371,
											"end": 2401,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2371,
											"end": 2401,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2560,
											"end": 2572,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2590,
											"end": 2601,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 2576,
											"end": 2587,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 2575,
											"end": 2587,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2575,
											"end": 2587,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2575,
											"end": 2601,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2560,
											"end": 2601,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2560,
											"end": 2601,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2712,
											"end": 2716,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2699,
											"end": 2710,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 2695,
											"end": 2717,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 2680,
											"end": 2717,
											"name": "SWAP6",
											"source": 8
										},
										{
											"begin": 2680,
											"end": 2717,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2834,
											"end": 2838,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2827,
											"end": 2832,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2823,
											"end": 2839,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 2814,
											"end": 2839,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 2814,
											"end": 2839,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3088,
											"end": 3089,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 3081,
											"end": 3085,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3074,
											"end": 3078,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3071,
											"end": 3072,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3067,
											"end": 3079,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3063,
											"end": 3086,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 3059,
											"end": 3090,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3051,
											"end": 3090,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3051,
											"end": 3090,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3126,
											"end": 3130,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3118,
											"end": 3123,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3118,
											"end": 3130,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3109,
											"end": 3130,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3109,
											"end": 3130,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 3109,
											"end": 3130,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 3109,
											"end": 3130,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3464,
											"end": 3475,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3498,
											"end": 3499,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 3483,
											"end": 3494,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 3479,
											"end": 3480,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 3479,
											"end": 3494,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3478,
											"end": 3499,
											"name": "XOR",
											"source": 8
										},
										{
											"begin": 3464,
											"end": 3499,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3464,
											"end": 3499,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3739,
											"end": 3742,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3725,
											"end": 3736,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 3725,
											"end": 3742,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3721,
											"end": 3722,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 3721,
											"end": 3742,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3714,
											"end": 3742,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3714,
											"end": 3742,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3714,
											"end": 3742,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3714,
											"end": 3742,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3797,
											"end": 3800,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3783,
											"end": 3794,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 3783,
											"end": 3800,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3779,
											"end": 3780,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 3779,
											"end": 3800,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3772,
											"end": 3800,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3772,
											"end": 3800,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3772,
											"end": 3800,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3772,
											"end": 3800,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3856,
											"end": 3859,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3842,
											"end": 3853,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 3842,
											"end": 3859,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3838,
											"end": 3839,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 3838,
											"end": 3859,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3831,
											"end": 3859,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3831,
											"end": 3859,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3831,
											"end": 3859,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3831,
											"end": 3859,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3915,
											"end": 3918,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3901,
											"end": 3912,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 3901,
											"end": 3918,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3897,
											"end": 3898,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 3897,
											"end": 3918,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3890,
											"end": 3918,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3890,
											"end": 3918,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3890,
											"end": 3918,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3890,
											"end": 3918,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3974,
											"end": 3977,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3960,
											"end": 3971,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 3960,
											"end": 3977,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3956,
											"end": 3957,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 3956,
											"end": 3977,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3949,
											"end": 3977,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3949,
											"end": 3977,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3949,
											"end": 3977,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3949,
											"end": 3977,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4034,
											"end": 4037,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4020,
											"end": 4031,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 4020,
											"end": 4037,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 4016,
											"end": 4017,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 4016,
											"end": 4037,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 4009,
											"end": 4037,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4009,
											"end": 4037,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 4009,
											"end": 4037,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4009,
											"end": 4037,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4492,
											"end": 4495,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4484,
											"end": 4489,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 4484,
											"end": 4495,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 4475,
											"end": 4495,
											"name": "SWAP6",
											"source": 8
										},
										{
											"begin": 4475,
											"end": 4495,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4505,
											"end": 4518,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4505,
											"end": 4518,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4505,
											"end": 4518,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4505,
											"end": 4518,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4505,
											"end": 4518,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 749,
											"end": 4525,
											"name": "tag",
											"source": 8,
											"value": "146"
										},
										{
											"begin": 749,
											"end": 4525,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 749,
											"end": 4525,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 749,
											"end": 4525,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 749,
											"end": 4525,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 749,
											"end": 4525,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 749,
											"end": 4525,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 749,
											"end": 4525,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "12"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CALLDATASIZE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CALLDATACOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"PoolExists(address,address,address,uint256,uint256)": "bcbcaa29",
							"Price(address,address,address)": "c361e0b1"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"min0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min1\",\"type\":\"uint256\"}],\"name\":\"PoolExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t1\",\"type\":\"address\"}],\"name\":\"Price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/UniswapV3.sol\":\"UniswapV3\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b9379ad954680c44a0bc523b314ae4c4da735f9fe1d02aa56ea5bdba6f1136f2\",\"dweb:/ipfs/QmZXdgQNXKAckrXWz9R3mc47F1fvDvr28a2ewJrwNAw71B\"]},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1c42b9e6f5902ac38dd43e25750939baa7e0c1425dc75afd717c4412731065d5\",\"dweb:/ipfs/QmWaoacnzsucTvBME2o7YgZBZMhaHv7fkj83htHMVWJKWh\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"keccak256\":\"0x50e87f7a3197525d1c6f7e04290060e848677c8a4e86c554bc6ace4a4d0d476d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3874093a6b37d8e68f9475a91f8eb0a1c808cb6153c84cfe6c37909505a4d24e\",\"dweb:/ipfs/QmUqGpQqvSHX4SwUvcBCs9g4ZhR9JPhgD3615oUigAhtjj\"]},\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":{\"keccak256\":\"0xda8c2c0b12d2976acfd364453ba5f5bf0117ba3c91175ee9e1067d3fb26944d9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://3f3d2d7c2723c91830c74d96292f28fc1cfe28d388cdb9c1a5ebadb4c2b96f81\",\"dweb:/ipfs/QmYU4wk8MEm33wVWR38LoncvR7b8PP1mLuGBKX3dUpYJVE\"]},\"contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0x7df9d93243a890a6dc175905d65495ae5726330faa50409ab8460c4c00c672e1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3ff91fe9d915b97343e152f1a15a46e5ff9477e90e90a4431dca38f79eb2cdba\",\"dweb:/ipfs/QmcHUAJs2MfcdbAFTzdQE1eGevxCGHNDXECiuGLDaUs34S\"]},\"contracts/libraries/OracleLibrary.sol\":{\"keccak256\":\"0xfe374d779a9fdb16c102035c181002ffd393138a38acc916e9f4e98139f5b399\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://497ed18360c8fef9ca485f60669fa56247b2a46a464483b2d93fe24792d68d1f\",\"dweb:/ipfs/QmY6gSGfuAi5BQnJxhQKLHwqmo7ZG3WVqXqAmPRZRyapGv\"]},\"contracts/libraries/UniswapV3.sol\":{\"keccak256\":\"0x20647d241de17dbd7614eb15b6ce247b027eafe11839b867bd67a503f2bcecc1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://06863dc107313811647ce668ac7a0f97b8542fbfe38a7ba12fa3660dd4aabd59\",\"dweb:/ipfs/QmenUBRAWHJWEix7DE1y2aoUGR4eBySCiawnpFC99iTLFG\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "2072",
				"formattedMessage": "contracts/libraries/UniswapV3.sol:41:9: Warning: Unused local variable.\n        uint16[4] memory fs;\n        ^-----------------^\n",
				"message": "Unused local variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 1417,
					"file": "contracts/libraries/UniswapV3.sol",
					"start": 1398
				},
				"type": "Warning"
			}
		],
		"sources": {
			"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol",
					"exportedSymbols": {
						"IUniswapV3Factory": [
							82
						]
					},
					"id": 83,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "71:163:0",
								"text": "@title The interface for the Uniswap V3 Factory\n @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees"
							},
							"fullyImplemented": false,
							"id": 82,
							"linearizedBaseContracts": [
								82
							],
							"name": "IUniswapV3Factory",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "268:185:0",
										"text": "@notice Emitted when the owner of the factory is changed\n @param oldOwner The owner before the owner was changed\n @param newOwner The owner after the owner was changed"
									},
									"id": 9,
									"name": "OwnerChanged",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 8,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"indexed": true,
												"mutability": "mutable",
												"name": "oldOwner",
												"nodeType": "VariableDeclaration",
												"scope": 9,
												"src": "477:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "477:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 9,
												"src": "503:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 6,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "503:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "476:52:0"
									},
									"src": "458:71:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 10,
										"nodeType": "StructuredDocumentation",
										"src": "535:421:0",
										"text": "@notice Emitted when a pool is created\n @param token0 The first token of the pool by address sort order\n @param token1 The second token of the pool by address sort order\n @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n @param tickSpacing The minimum number of ticks between initialized ticks\n @param pool The address of the created pool"
									},
									"id": 22,
									"name": "PoolCreated",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 21,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 12,
												"indexed": true,
												"mutability": "mutable",
												"name": "token0",
												"nodeType": "VariableDeclaration",
												"scope": 22,
												"src": "988:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 11,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "988:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "token1",
												"nodeType": "VariableDeclaration",
												"scope": 22,
												"src": "1020:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1020:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 16,
												"indexed": true,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 22,
												"src": "1052:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 15,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1052:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 18,
												"indexed": false,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nodeType": "VariableDeclaration",
												"scope": 22,
												"src": "1080:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 17,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1080:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 20,
												"indexed": false,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 22,
												"src": "1107:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 19,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1107:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "978:147:0"
									},
									"src": "961:165:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 23,
										"nodeType": "StructuredDocumentation",
										"src": "1132:275:0",
										"text": "@notice Emitted when a new fee amount is enabled for pool creation via the factory\n @param fee The enabled fee, denominated in hundredths of a bip\n @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee"
									},
									"id": 29,
									"name": "FeeAmountEnabled",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 25,
												"indexed": true,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 29,
												"src": "1435:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 24,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1435:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 27,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nodeType": "VariableDeclaration",
												"scope": 29,
												"src": "1455:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 26,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1455:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1434:47:0"
									},
									"src": "1412:70:0"
								},
								{
									"documentation": {
										"id": 30,
										"nodeType": "StructuredDocumentation",
										"src": "1488:163:0",
										"text": "@notice Returns the current owner of the factory\n @dev Can be changed by the current owner via setOwner\n @return The address of the factory owner"
									},
									"functionSelector": "8da5cb5b",
									"id": 35,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1670:2:0"
									},
									"returnParameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 33,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 35,
												"src": "1696:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 32,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1696:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1695:9:0"
									},
									"scope": 82,
									"src": "1656:49:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 36,
										"nodeType": "StructuredDocumentation",
										"src": "1711:348:0",
										"text": "@notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n @return The tick spacing"
									},
									"functionSelector": "22afcccb",
									"id": 43,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "feeAmountTickSpacing",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 39,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 38,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 43,
												"src": "2094:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 37,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "2094:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2093:12:0"
									},
									"returnParameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 41,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 43,
												"src": "2129:5:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 40,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2129:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2128:7:0"
									},
									"scope": 82,
									"src": "2064:72:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 44,
										"nodeType": "StructuredDocumentation",
										"src": "2142:471:0",
										"text": "@notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n @param tokenA The contract address of either token0 or token1\n @param tokenB The contract address of the other token\n @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n @return pool The pool address"
									},
									"functionSelector": "1698ee82",
									"id": 55,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPool",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 46,
												"mutability": "mutable",
												"name": "tokenA",
												"nodeType": "VariableDeclaration",
												"scope": 55,
												"src": "2644:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 45,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2644:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 48,
												"mutability": "mutable",
												"name": "tokenB",
												"nodeType": "VariableDeclaration",
												"scope": 55,
												"src": "2668:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 47,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2668:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 50,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 55,
												"src": "2692:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 49,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "2692:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2634:74:0"
									},
									"returnParameters": {
										"id": 54,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 53,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 55,
												"src": "2732:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 52,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2732:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2731:14:0"
									},
									"scope": 82,
									"src": "2618:128:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 56,
										"nodeType": "StructuredDocumentation",
										"src": "2752:554:0",
										"text": "@notice Creates a pool for the given two tokens and fee\n @param tokenA One of the two tokens in the desired pool\n @param tokenB The other of the two tokens in the desired pool\n @param fee The desired fee for the pool\n @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n are invalid.\n @return pool The address of the newly created pool"
									},
									"functionSelector": "a1671295",
									"id": 67,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createPool",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 58,
												"mutability": "mutable",
												"name": "tokenA",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "3340:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 57,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3340:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 60,
												"mutability": "mutable",
												"name": "tokenB",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "3364:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 59,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3364:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "3388:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 61,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "3388:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3330:74:0"
									},
									"returnParameters": {
										"id": 66,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 65,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "3423:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 64,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3423:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3422:14:0"
									},
									"scope": 82,
									"src": "3311:126:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 68,
										"nodeType": "StructuredDocumentation",
										"src": "3443:144:0",
										"text": "@notice Updates the owner of the factory\n @dev Must be called by the current owner\n @param _owner The new owner of the factory"
									},
									"functionSelector": "13af4035",
									"id": 73,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setOwner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 71,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 70,
												"mutability": "mutable",
												"name": "_owner",
												"nodeType": "VariableDeclaration",
												"scope": 73,
												"src": "3610:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 69,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3610:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3609:16:0"
									},
									"returnParameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3634:0:0"
									},
									"scope": 82,
									"src": "3592:43:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 74,
										"nodeType": "StructuredDocumentation",
										"src": "3641:326:0",
										"text": "@notice Enables a fee amount with the given tickSpacing\n @dev Fee amounts may never be removed once enabled\n @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount"
									},
									"functionSelector": "8a7c195f",
									"id": 81,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "enableFeeAmount",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 79,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 76,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 81,
												"src": "3997:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 75,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "3997:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 78,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nodeType": "VariableDeclaration",
												"scope": 81,
												"src": "4009:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 77,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "4009:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3996:31:0"
									},
									"returnParameters": {
										"id": 80,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4036:0:0"
									},
									"scope": 82,
									"src": "3972:65:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 83,
							"src": "234:3805:0"
						}
					],
					"src": "45:3995:0"
				},
				"id": 0
			},
			"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol",
					"exportedSymbols": {
						"IUniswapV3Pool": [
							104
						],
						"IUniswapV3PoolActions": [
							200
						],
						"IUniswapV3PoolDerivedState": [
							231
						],
						"IUniswapV3PoolEvents": [
							350
						],
						"IUniswapV3PoolImmutables": [
							390
						],
						"IUniswapV3PoolOwnerActions": [
							416
						],
						"IUniswapV3PoolState": [
							524
						]
					},
					"id": 105,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 84,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:1"
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol",
							"file": "./pool/IUniswapV3PoolImmutables.sol",
							"id": 85,
							"nodeType": "ImportDirective",
							"scope": 105,
							"sourceUnit": 391,
							"src": "71:45:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol",
							"file": "./pool/IUniswapV3PoolState.sol",
							"id": 86,
							"nodeType": "ImportDirective",
							"scope": 105,
							"sourceUnit": 525,
							"src": "117:40:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol",
							"file": "./pool/IUniswapV3PoolDerivedState.sol",
							"id": 87,
							"nodeType": "ImportDirective",
							"scope": 105,
							"sourceUnit": 232,
							"src": "158:47:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol",
							"file": "./pool/IUniswapV3PoolActions.sol",
							"id": 88,
							"nodeType": "ImportDirective",
							"scope": 105,
							"sourceUnit": 201,
							"src": "206:42:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol",
							"file": "./pool/IUniswapV3PoolOwnerActions.sol",
							"id": 89,
							"nodeType": "ImportDirective",
							"scope": 105,
							"sourceUnit": 417,
							"src": "249:47:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol",
							"file": "./pool/IUniswapV3PoolEvents.sol",
							"id": 90,
							"nodeType": "ImportDirective",
							"scope": 105,
							"sourceUnit": 351,
							"src": "297:41:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 92,
										"name": "IUniswapV3PoolImmutables",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 390,
										"src": "637:24:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolImmutables_$390",
											"typeString": "contract IUniswapV3PoolImmutables"
										}
									},
									"id": 93,
									"nodeType": "InheritanceSpecifier",
									"src": "637:24:1"
								},
								{
									"baseName": {
										"id": 94,
										"name": "IUniswapV3PoolState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 524,
										"src": "667:19:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolState_$524",
											"typeString": "contract IUniswapV3PoolState"
										}
									},
									"id": 95,
									"nodeType": "InheritanceSpecifier",
									"src": "667:19:1"
								},
								{
									"baseName": {
										"id": 96,
										"name": "IUniswapV3PoolDerivedState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 231,
										"src": "692:26:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolDerivedState_$231",
											"typeString": "contract IUniswapV3PoolDerivedState"
										}
									},
									"id": 97,
									"nodeType": "InheritanceSpecifier",
									"src": "692:26:1"
								},
								{
									"baseName": {
										"id": 98,
										"name": "IUniswapV3PoolActions",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 200,
										"src": "724:21:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolActions_$200",
											"typeString": "contract IUniswapV3PoolActions"
										}
									},
									"id": 99,
									"nodeType": "InheritanceSpecifier",
									"src": "724:21:1"
								},
								{
									"baseName": {
										"id": 100,
										"name": "IUniswapV3PoolOwnerActions",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 416,
										"src": "751:26:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolOwnerActions_$416",
											"typeString": "contract IUniswapV3PoolOwnerActions"
										}
									},
									"id": 101,
									"nodeType": "InheritanceSpecifier",
									"src": "751:26:1"
								},
								{
									"baseName": {
										"id": 102,
										"name": "IUniswapV3PoolEvents",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 350,
										"src": "783:20:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolEvents_$350",
											"typeString": "contract IUniswapV3PoolEvents"
										}
									},
									"id": 103,
									"nodeType": "InheritanceSpecifier",
									"src": "783:20:1"
								}
							],
							"contractDependencies": [
								200,
								231,
								350,
								390,
								416,
								524
							],
							"contractKind": "interface",
							"documentation": {
								"id": 91,
								"nodeType": "StructuredDocumentation",
								"src": "340:265:1",
								"text": "@title The interface for a Uniswap V3 Pool\n @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n to the ERC20 specification\n @dev The pool interface is broken up into many smaller pieces"
							},
							"fullyImplemented": false,
							"id": 104,
							"linearizedBaseContracts": [
								104,
								350,
								416,
								200,
								231,
								524,
								390
							],
							"name": "IUniswapV3Pool",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 105,
							"src": "605:203:1"
						}
					],
					"src": "45:764:1"
				},
				"id": 1
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol",
					"exportedSymbols": {
						"IUniswapV3PoolActions": [
							200
						]
					},
					"id": 201,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 106,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 107,
								"nodeType": "StructuredDocumentation",
								"src": "71:102:2",
								"text": "@title Permissionless pool actions\n @notice Contains pool methods that can be called by anyone"
							},
							"fullyImplemented": false,
							"id": 200,
							"linearizedBaseContracts": [
								200
							],
							"name": "IUniswapV3PoolActions",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 108,
										"nodeType": "StructuredDocumentation",
										"src": "211:206:2",
										"text": "@notice Sets the initial price for the pool\n @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96"
									},
									"functionSelector": "f637731d",
									"id": 113,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 110,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 113,
												"src": "442:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 109,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "442:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "441:22:2"
									},
									"returnParameters": {
										"id": 112,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "472:0:2"
									},
									"scope": 200,
									"src": "422:51:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 114,
										"nodeType": "StructuredDocumentation",
										"src": "479:1029:2",
										"text": "@notice Adds liquidity for the given recipient/tickLower/tickUpper position\n @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n on tickLower, tickUpper, the amount of liquidity, and the current price.\n @param recipient The address for which the liquidity will be created\n @param tickLower The lower tick of the position in which to add liquidity\n @param tickUpper The upper tick of the position in which to add liquidity\n @param amount The amount of liquidity to mint\n @param data Any data that should be passed through to the callback\n @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
									},
									"functionSelector": "3c8a7d8d",
									"id": 131,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 116,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 131,
												"src": "1536:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 115,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1536:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 118,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 131,
												"src": "1563:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 117,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1563:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 120,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 131,
												"src": "1588:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 119,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1588:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 122,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 131,
												"src": "1613:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 121,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1613:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 124,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 131,
												"src": "1637:19:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 123,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1637:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1526:136:2"
									},
									"returnParameters": {
										"id": 130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 127,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 131,
												"src": "1681:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 126,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1681:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 131,
												"src": "1698:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 128,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1698:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1680:34:2"
									},
									"scope": 200,
									"src": "1513:202:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 132,
										"nodeType": "StructuredDocumentation",
										"src": "1721:1053:2",
										"text": "@notice Collects tokens owed to a position\n @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n @param recipient The address which should receive the fees collected\n @param tickLower The lower tick of the position for which to collect fees\n @param tickUpper The upper tick of the position for which to collect fees\n @param amount0Requested How much token0 should be withdrawn from the fees owed\n @param amount1Requested How much token1 should be withdrawn from the fees owed\n @return amount0 The amount of fees collected in token0\n @return amount1 The amount of fees collected in token1"
									},
									"functionSelector": "4f1eb3d8",
									"id": 149,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collect",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 134,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "2805:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 133,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2805:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 136,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "2832:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 135,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2832:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 138,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "2857:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 137,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2857:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 140,
												"mutability": "mutable",
												"name": "amount0Requested",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "2882:24:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 139,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2882:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "amount1Requested",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "2916:24:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 141,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2916:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2795:151:2"
									},
									"returnParameters": {
										"id": 148,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 145,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "2965:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 144,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2965:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 147,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "2982:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 146,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2982:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2964:34:2"
									},
									"scope": 200,
									"src": "2779:220:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 150,
										"nodeType": "StructuredDocumentation",
										"src": "3005:631:2",
										"text": "@notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n @dev Fees must be collected separately via a call to #collect\n @param tickLower The lower tick of the position for which to burn liquidity\n @param tickUpper The upper tick of the position for which to burn liquidity\n @param amount How much liquidity to burn\n @return amount0 The amount of token0 sent to the recipient\n @return amount1 The amount of token1 sent to the recipient"
									},
									"functionSelector": "a34123a7",
									"id": 163,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 152,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 163,
												"src": "3664:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 151,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3664:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 154,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 163,
												"src": "3689:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 153,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3689:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 163,
												"src": "3714:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 155,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3714:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3654:80:2"
									},
									"returnParameters": {
										"id": 162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 159,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 163,
												"src": "3753:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 158,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3753:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 161,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 163,
												"src": "3770:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 160,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3770:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3752:34:2"
									},
									"scope": 200,
									"src": "3641:146:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 164,
										"nodeType": "StructuredDocumentation",
										"src": "3793:1015:2",
										"text": "@notice Swap token0 for token1, or token1 for token0\n @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n @param recipient The address to receive the output of the swap\n @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n value after the swap. If one for zero, the price cannot be greater than this value after the swap\n @param data Any data to be passed through to the callback\n @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
									},
									"functionSelector": "128acb08",
									"id": 181,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "swap",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 175,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "4836:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 165,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4836:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 168,
												"mutability": "mutable",
												"name": "zeroForOne",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "4863:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 167,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4863:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 170,
												"mutability": "mutable",
												"name": "amountSpecified",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "4888:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 169,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "4888:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 172,
												"mutability": "mutable",
												"name": "sqrtPriceLimitX96",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "4920:25:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 171,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4920:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 174,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "4955:19:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 173,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4955:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4826:154:2"
									},
									"returnParameters": {
										"id": 180,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 177,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "4999:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 176,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "4999:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 179,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "5015:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 178,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "5015:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4998:32:2"
									},
									"scope": 200,
									"src": "4813:218:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 182,
										"nodeType": "StructuredDocumentation",
										"src": "5037:657:2",
										"text": "@notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n with 0 amount{0,1} and sending the donation amount(s) from the callback\n @param recipient The address which will receive the token0 and token1 amounts\n @param amount0 The amount of token0 to send\n @param amount1 The amount of token1 to send\n @param data Any data to be passed through to the callback"
									},
									"functionSelector": "490e6cbc",
									"id": 193,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "flash",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 191,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 193,
												"src": "5723:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 183,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5723:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 186,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 193,
												"src": "5750:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 185,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5750:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 188,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 193,
												"src": "5775:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 187,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5775:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 190,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 193,
												"src": "5800:19:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 189,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5800:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5713:112:2"
									},
									"returnParameters": {
										"id": 192,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5834:0:2"
									},
									"scope": 200,
									"src": "5699:136:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 194,
										"nodeType": "StructuredDocumentation",
										"src": "5841:367:2",
										"text": "@notice Increase the maximum number of price and liquidity observations that this pool will store\n @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n the input observationCardinalityNext.\n @param observationCardinalityNext The desired minimum number of observations for the pool to store"
									},
									"functionSelector": "32148f67",
									"id": 199,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increaseObservationCardinalityNext",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 197,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "observationCardinalityNext",
												"nodeType": "VariableDeclaration",
												"scope": 199,
												"src": "6257:33:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 195,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "6257:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6256:35:2"
									},
									"returnParameters": {
										"id": 198,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6300:0:2"
									},
									"scope": 200,
									"src": "6213:88:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 201,
							"src": "173:6130:2"
						}
					],
					"src": "45:6259:2"
				},
				"id": 2
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol",
					"exportedSymbols": {
						"IUniswapV3PoolDerivedState": [
							231
						]
					},
					"id": 232,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 202,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 203,
								"nodeType": "StructuredDocumentation",
								"src": "71:222:3",
								"text": "@title Pool state that is not stored\n @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n blockchain. The functions here may have variable gas costs."
							},
							"fullyImplemented": false,
							"id": 231,
							"linearizedBaseContracts": [
								231
							],
							"name": "IUniswapV3PoolDerivedState",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 204,
										"nodeType": "StructuredDocumentation",
										"src": "336:1045:3",
										"text": "@notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n you must call it with secondsAgos = [3600, 0].\n @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n timestamp"
									},
									"functionSelector": "883bdbfd",
									"id": 216,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "observe",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 208,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 207,
												"mutability": "mutable",
												"name": "secondsAgos",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "1403:29:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint32_$dyn_calldata_ptr",
													"typeString": "uint32[]"
												},
												"typeName": {
													"baseType": {
														"id": 205,
														"name": "uint32",
														"nodeType": "ElementaryTypeName",
														"src": "1403:6:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"id": 206,
													"nodeType": "ArrayTypeName",
													"src": "1403:8:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint32_$dyn_storage_ptr",
														"typeString": "uint32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1402:31:3"
									},
									"returnParameters": {
										"id": 215,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 211,
												"mutability": "mutable",
												"name": "tickCumulatives",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "1481:30:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_int56_$dyn_memory_ptr",
													"typeString": "int56[]"
												},
												"typeName": {
													"baseType": {
														"id": 209,
														"name": "int56",
														"nodeType": "ElementaryTypeName",
														"src": "1481:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_int56",
															"typeString": "int56"
														}
													},
													"id": 210,
													"nodeType": "ArrayTypeName",
													"src": "1481:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_int56_$dyn_storage_ptr",
														"typeString": "int56[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 214,
												"mutability": "mutable",
												"name": "secondsPerLiquidityCumulativeX128s",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "1513:51:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint160_$dyn_memory_ptr",
													"typeString": "uint160[]"
												},
												"typeName": {
													"baseType": {
														"id": 212,
														"name": "uint160",
														"nodeType": "ElementaryTypeName",
														"src": "1513:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"id": 213,
													"nodeType": "ArrayTypeName",
													"src": "1513:9:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint160_$dyn_storage_ptr",
														"typeString": "uint160[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1480:85:3"
									},
									"scope": 231,
									"src": "1386:180:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 217,
										"nodeType": "StructuredDocumentation",
										"src": "1572:771:3",
										"text": "@notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n snapshot is taken and the second snapshot is taken.\n @param tickLower The lower tick of the range\n @param tickUpper The upper tick of the range\n @return tickCumulativeInside The snapshot of the tick accumulator for the range\n @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n @return secondsInside The snapshot of seconds per liquidity for the range"
									},
									"functionSelector": "a38807f2",
									"id": 230,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "snapshotCumulativesInside",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 222,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 219,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "2383:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 218,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2383:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 221,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "2400:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 220,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2400:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2382:34:3"
									},
									"returnParameters": {
										"id": 229,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 224,
												"mutability": "mutable",
												"name": "tickCumulativeInside",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "2477:26:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 223,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "2477:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 226,
												"mutability": "mutable",
												"name": "secondsPerLiquidityInsideX128",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "2517:37:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 225,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "2517:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 228,
												"mutability": "mutable",
												"name": "secondsInside",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "2568:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 227,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "2568:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2463:135:3"
									},
									"scope": 231,
									"src": "2348:251:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 232,
							"src": "293:2308:3"
						}
					],
					"src": "45:2557:3"
				},
				"id": 3
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol",
					"exportedSymbols": {
						"IUniswapV3PoolEvents": [
							350
						]
					},
					"id": 351,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 233,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 234,
								"nodeType": "StructuredDocumentation",
								"src": "71:88:4",
								"text": "@title Events emitted by a pool\n @notice Contains all events emitted by the pool"
							},
							"fullyImplemented": true,
							"id": 350,
							"linearizedBaseContracts": [
								350
							],
							"name": "IUniswapV3PoolEvents",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 235,
										"nodeType": "StructuredDocumentation",
										"src": "196:344:4",
										"text": "@notice Emitted exactly once by a pool when #initialize is first called on the pool\n @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"
									},
									"id": 241,
									"name": "Initialize",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 240,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 237,
												"indexed": false,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 241,
												"src": "562:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 236,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "562:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 239,
												"indexed": false,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 241,
												"src": "584:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 238,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "584:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "561:34:4"
									},
									"src": "545:51:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 242,
										"nodeType": "StructuredDocumentation",
										"src": "602:551:4",
										"text": "@notice Emitted when liquidity is minted for a given position\n @param sender The address that minted the liquidity\n @param owner The owner of the position and recipient of any minted liquidity\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount The amount of liquidity minted to the position range\n @param amount0 How much token0 was required for the minted liquidity\n @param amount1 How much token1 was required for the minted liquidity"
									},
									"id": 258,
									"name": "Mint",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 257,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 244,
												"indexed": false,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "1178:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 243,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1178:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 246,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "1202:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 245,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1202:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 248,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "1233:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 247,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1233:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 250,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "1266:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 249,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1266:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 252,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "1299:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 251,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1299:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 254,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "1323:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 253,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1323:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 256,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "1348:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 255,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1348:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1168:201:4"
									},
									"src": "1158:212:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 259,
										"nodeType": "StructuredDocumentation",
										"src": "1376:493:4",
										"text": "@notice Emitted when fees are collected by the owner of a position\n @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n @param owner The owner of the position for which fees are collected\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount0 The amount of token0 fees collected\n @param amount1 The amount of token1 fees collected"
									},
									"id": 273,
									"name": "Collect",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 272,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 261,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "1897:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 260,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1897:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 263,
												"indexed": false,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "1928:17:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 262,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1928:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 265,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "1955:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 264,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1955:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 267,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "1988:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 266,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1988:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 269,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "2021:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 268,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2021:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 271,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "2046:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 270,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2046:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1887:180:4"
									},
									"src": "1874:194:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 274,
										"nodeType": "StructuredDocumentation",
										"src": "2074:523:4",
										"text": "@notice Emitted when a position's liquidity is removed\n @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n @param owner The owner of the position for which liquidity is removed\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount The amount of liquidity to remove\n @param amount0 The amount of token0 withdrawn\n @param amount1 The amount of token1 withdrawn"
									},
									"id": 288,
									"name": "Burn",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 287,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 276,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 288,
												"src": "2622:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 275,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2622:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 278,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 288,
												"src": "2653:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 277,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2653:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 280,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 288,
												"src": "2686:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 279,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2686:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 282,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 288,
												"src": "2719:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 281,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2719:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 284,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 288,
												"src": "2743:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 283,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2743:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 286,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 288,
												"src": "2768:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 285,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2768:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2612:177:4"
									},
									"src": "2602:188:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 289,
										"nodeType": "StructuredDocumentation",
										"src": "2796:600:4",
										"text": "@notice Emitted by the pool for any swaps between token0 and token1\n @param sender The address that initiated the swap call, and that received the callback\n @param recipient The address that received the output of the swap\n @param amount0 The delta of the token0 balance of the pool\n @param amount1 The delta of the token1 balance of the pool\n @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n @param liquidity The liquidity of the pool after the swap\n @param tick The log base 1.0001 of price of the pool after the swap"
									},
									"id": 305,
									"name": "Swap",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 304,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 291,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "3421:22:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 290,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3421:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 293,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "3453:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 292,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3453:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 295,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "3488:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 294,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "3488:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 297,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "3512:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 296,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "3512:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 299,
												"indexed": false,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "3536:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 298,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "3536:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 301,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "3566:17:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 300,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3566:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 303,
												"indexed": false,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "3593:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 302,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3593:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3411:198:4"
									},
									"src": "3401:209:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 306,
										"nodeType": "StructuredDocumentation",
										"src": "3616:562:4",
										"text": "@notice Emitted by the pool for any flashes of token0/token1\n @param sender The address that initiated the swap call, and that received the callback\n @param recipient The address that received the tokens from flash\n @param amount0 The amount of token0 that was flashed\n @param amount1 The amount of token1 that was flashed\n @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee"
									},
									"id": 320,
									"name": "Flash",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 319,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 308,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 320,
												"src": "4204:22:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 307,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4204:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 310,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 320,
												"src": "4236:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 309,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4236:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 312,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 320,
												"src": "4271:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 311,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4271:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 314,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 320,
												"src": "4296:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 313,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4296:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 316,
												"indexed": false,
												"mutability": "mutable",
												"name": "paid0",
												"nodeType": "VariableDeclaration",
												"scope": 320,
												"src": "4321:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 315,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4321:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 318,
												"indexed": false,
												"mutability": "mutable",
												"name": "paid1",
												"nodeType": "VariableDeclaration",
												"scope": 320,
												"src": "4344:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 317,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4344:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4194:169:4"
									},
									"src": "4183:181:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 321,
										"nodeType": "StructuredDocumentation",
										"src": "4370:451:4",
										"text": "@notice Emitted by the pool for increases to the number of observations that can be stored\n @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n just before a mint/swap/burn.\n @param observationCardinalityNextOld The previous value of the next observation cardinality\n @param observationCardinalityNextNew The updated value of the next observation cardinality"
									},
									"id": 327,
									"name": "IncreaseObservationCardinalityNext",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 326,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 323,
												"indexed": false,
												"mutability": "mutable",
												"name": "observationCardinalityNextOld",
												"nodeType": "VariableDeclaration",
												"scope": 327,
												"src": "4876:36:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 322,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "4876:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 325,
												"indexed": false,
												"mutability": "mutable",
												"name": "observationCardinalityNextNew",
												"nodeType": "VariableDeclaration",
												"scope": 327,
												"src": "4922:36:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 324,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "4922:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4866:98:4"
									},
									"src": "4826:139:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 328,
										"nodeType": "StructuredDocumentation",
										"src": "4971:370:4",
										"text": "@notice Emitted when the protocol fee is changed by the pool\n @param feeProtocol0Old The previous value of the token0 protocol fee\n @param feeProtocol1Old The previous value of the token1 protocol fee\n @param feeProtocol0New The updated value of the token0 protocol fee\n @param feeProtocol1New The updated value of the token1 protocol fee"
									},
									"id": 338,
									"name": "SetFeeProtocol",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 337,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 330,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol0Old",
												"nodeType": "VariableDeclaration",
												"scope": 338,
												"src": "5367:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 329,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5367:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 332,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol1Old",
												"nodeType": "VariableDeclaration",
												"scope": 338,
												"src": "5390:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 331,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5390:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 334,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol0New",
												"nodeType": "VariableDeclaration",
												"scope": 338,
												"src": "5413:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 333,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5413:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 336,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol1New",
												"nodeType": "VariableDeclaration",
												"scope": 338,
												"src": "5436:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 335,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5436:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5366:92:4"
									},
									"src": "5346:113:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 339,
										"nodeType": "StructuredDocumentation",
										"src": "5465:384:4",
										"text": "@notice Emitted when the collected protocol fees are withdrawn by the factory owner\n @param sender The address that collects the protocol fees\n @param recipient The address that receives the collected protocol fees\n @param amount0 The amount of token0 protocol fees that is withdrawn\n @param amount0 The amount of token1 protocol fees that is withdrawn"
									},
									"id": 349,
									"name": "CollectProtocol",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 348,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 341,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "5876:22:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 340,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5876:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 343,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "5900:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 342,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5900:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 345,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "5927:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 344,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5927:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 347,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "5944:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 346,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5944:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5875:85:4"
									},
									"src": "5854:107:4"
								}
							],
							"scope": 351,
							"src": "159:5804:4"
						}
					],
					"src": "45:5919:4"
				},
				"id": 4
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol",
					"exportedSymbols": {
						"IUniswapV3PoolImmutables": [
							390
						]
					},
					"id": 391,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 352,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 353,
								"nodeType": "StructuredDocumentation",
								"src": "71:153:5",
								"text": "@title Pool state that never changes\n @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values"
							},
							"fullyImplemented": false,
							"id": 390,
							"linearizedBaseContracts": [
								390
							],
							"name": "IUniswapV3PoolImmutables",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 354,
										"nodeType": "StructuredDocumentation",
										"src": "265:138:5",
										"text": "@notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n @return The contract address"
									},
									"functionSelector": "c45a0155",
									"id": 359,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "factory",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 355,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "424:2:5"
									},
									"returnParameters": {
										"id": 358,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 357,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "450:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 356,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "450:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "449:9:5"
									},
									"scope": 390,
									"src": "408:51:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 360,
										"nodeType": "StructuredDocumentation",
										"src": "465:113:5",
										"text": "@notice The first of the two tokens of the pool, sorted by address\n @return The token contract address"
									},
									"functionSelector": "0dfe1681",
									"id": 365,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "token0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 361,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "598:2:5"
									},
									"returnParameters": {
										"id": 364,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 363,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "624:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 362,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "624:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "623:9:5"
									},
									"scope": 390,
									"src": "583:50:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 366,
										"nodeType": "StructuredDocumentation",
										"src": "639:114:5",
										"text": "@notice The second of the two tokens of the pool, sorted by address\n @return The token contract address"
									},
									"functionSelector": "d21220a7",
									"id": 371,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "token1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 367,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "773:2:5"
									},
									"returnParameters": {
										"id": 370,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 369,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 371,
												"src": "799:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 368,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "799:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "798:9:5"
									},
									"scope": 390,
									"src": "758:50:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 372,
										"nodeType": "StructuredDocumentation",
										"src": "814:84:5",
										"text": "@notice The pool's fee in hundredths of a bip, i.e. 1e-6\n @return The fee"
									},
									"functionSelector": "ddca3f43",
									"id": 377,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "fee",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 373,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "915:2:5"
									},
									"returnParameters": {
										"id": 376,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 375,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 377,
												"src": "941:6:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 374,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "941:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "940:8:5"
									},
									"scope": 390,
									"src": "903:46:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 378,
										"nodeType": "StructuredDocumentation",
										"src": "955:358:5",
										"text": "@notice The pool tick spacing\n @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n This value is an int24 to avoid casting even though it is always positive.\n @return The tick spacing"
									},
									"functionSelector": "d0c93a7c",
									"id": 383,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tickSpacing",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 379,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1338:2:5"
									},
									"returnParameters": {
										"id": 382,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 381,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 383,
												"src": "1364:5:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 380,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1364:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1363:7:5"
									},
									"scope": 390,
									"src": "1318:53:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 384,
										"nodeType": "StructuredDocumentation",
										"src": "1377:363:5",
										"text": "@notice The maximum amount of position liquidity that can use any tick in the range\n @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n @return The max amount of liquidity per tick"
									},
									"functionSelector": "70cf754a",
									"id": 389,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxLiquidityPerTick",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 385,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1773:2:5"
									},
									"returnParameters": {
										"id": 388,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 387,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 389,
												"src": "1799:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 386,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1799:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1798:9:5"
									},
									"scope": 390,
									"src": "1745:63:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 391,
							"src": "224:1586:5"
						}
					],
					"src": "45:1766:5"
				},
				"id": 5
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol",
					"exportedSymbols": {
						"IUniswapV3PoolOwnerActions": [
							416
						]
					},
					"id": 417,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 392,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 393,
								"nodeType": "StructuredDocumentation",
								"src": "71:116:6",
								"text": "@title Permissioned pool actions\n @notice Contains pool methods that may only be called by the factory owner"
							},
							"fullyImplemented": false,
							"id": 416,
							"linearizedBaseContracts": [
								416
							],
							"name": "IUniswapV3PoolOwnerActions",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 394,
										"nodeType": "StructuredDocumentation",
										"src": "230:205:6",
										"text": "@notice Set the denominator of the protocol's % share of the fees\n @param feeProtocol0 new protocol fee for token0 of the pool\n @param feeProtocol1 new protocol fee for token1 of the pool"
									},
									"functionSelector": "8206a4d1",
									"id": 401,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setFeeProtocol",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 399,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 396,
												"mutability": "mutable",
												"name": "feeProtocol0",
												"nodeType": "VariableDeclaration",
												"scope": 401,
												"src": "464:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 395,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "464:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 398,
												"mutability": "mutable",
												"name": "feeProtocol1",
												"nodeType": "VariableDeclaration",
												"scope": 401,
												"src": "484:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 397,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "484:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "463:40:6"
									},
									"returnParameters": {
										"id": 400,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "512:0:6"
									},
									"scope": 416,
									"src": "440:73:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 402,
										"nodeType": "StructuredDocumentation",
										"src": "519:483:6",
										"text": "@notice Collect the protocol fee accrued to the pool\n @param recipient The address to which collected protocol fees should be sent\n @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n @return amount0 The protocol fee collected in token0\n @return amount1 The protocol fee collected in token1"
									},
									"functionSelector": "85b66729",
									"id": 415,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collectProtocol",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 409,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 404,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 415,
												"src": "1041:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 403,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1041:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 406,
												"mutability": "mutable",
												"name": "amount0Requested",
												"nodeType": "VariableDeclaration",
												"scope": 415,
												"src": "1068:24:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 405,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1068:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 408,
												"mutability": "mutable",
												"name": "amount1Requested",
												"nodeType": "VariableDeclaration",
												"scope": 415,
												"src": "1102:24:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 407,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1102:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1031:101:6"
									},
									"returnParameters": {
										"id": 414,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 411,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 415,
												"src": "1151:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 410,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1151:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 413,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 415,
												"src": "1168:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 412,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1168:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1150:34:6"
									},
									"scope": 416,
									"src": "1007:178:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 417,
							"src": "187:1000:6"
						}
					],
					"src": "45:1143:6"
				},
				"id": 6
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol",
					"exportedSymbols": {
						"IUniswapV3PoolState": [
							524
						]
					},
					"id": 525,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 418,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 419,
								"nodeType": "StructuredDocumentation",
								"src": "71:169:7",
								"text": "@title Pool state that can change\n @notice These methods compose the pool's state, and can change with any frequency including multiple times\n per transaction"
							},
							"fullyImplemented": false,
							"id": 524,
							"linearizedBaseContracts": [
								524
							],
							"name": "IUniswapV3PoolState",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 420,
										"nodeType": "StructuredDocumentation",
										"src": "276:1140:7",
										"text": "@notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n when accessed externally.\n @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n tick The current tick of the pool, i.e. according to the last tick transition that was run.\n This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n boundary.\n observationIndex The index of the last oracle observation that was written,\n observationCardinality The current maximum number of observations stored in the pool,\n observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n feeProtocol The protocol fee for both tokens of the pool.\n Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n unlocked Whether the pool is currently locked to reentrancy"
									},
									"functionSelector": "3850c7bd",
									"id": 437,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "slot0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 421,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1435:2:7"
									},
									"returnParameters": {
										"id": 436,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 423,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 437,
												"src": "1498:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 422,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1498:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 425,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 437,
												"src": "1532:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 424,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1532:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 427,
												"mutability": "mutable",
												"name": "observationIndex",
												"nodeType": "VariableDeclaration",
												"scope": 437,
												"src": "1556:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 426,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1556:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 429,
												"mutability": "mutable",
												"name": "observationCardinality",
												"nodeType": "VariableDeclaration",
												"scope": 437,
												"src": "1593:29:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 428,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1593:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 431,
												"mutability": "mutable",
												"name": "observationCardinalityNext",
												"nodeType": "VariableDeclaration",
												"scope": 437,
												"src": "1636:33:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 430,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1636:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 433,
												"mutability": "mutable",
												"name": "feeProtocol",
												"nodeType": "VariableDeclaration",
												"scope": 437,
												"src": "1683:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 432,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1683:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 435,
												"mutability": "mutable",
												"name": "unlocked",
												"nodeType": "VariableDeclaration",
												"scope": 437,
												"src": "1714:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 434,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1714:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1484:253:7"
									},
									"scope": 524,
									"src": "1421:317:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 438,
										"nodeType": "StructuredDocumentation",
										"src": "1744:168:7",
										"text": "@notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"
									},
									"functionSelector": "f3058399",
									"id": 443,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "feeGrowthGlobal0X128",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 439,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1946:2:7"
									},
									"returnParameters": {
										"id": 442,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 441,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 443,
												"src": "1972:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 440,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1972:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1971:9:7"
									},
									"scope": 524,
									"src": "1917:64:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 444,
										"nodeType": "StructuredDocumentation",
										"src": "1987:168:7",
										"text": "@notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"
									},
									"functionSelector": "46141319",
									"id": 449,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "feeGrowthGlobal1X128",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 445,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2189:2:7"
									},
									"returnParameters": {
										"id": 448,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 447,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 449,
												"src": "2215:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 446,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2215:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2214:9:7"
									},
									"scope": 524,
									"src": "2160:64:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 450,
										"nodeType": "StructuredDocumentation",
										"src": "2230:147:7",
										"text": "@notice The amounts of token0 and token1 that are owed to the protocol\n @dev Protocol fees will never exceed uint128 max in either token"
									},
									"functionSelector": "1ad8b03b",
									"id": 457,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "protocolFees",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 451,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2403:2:7"
									},
									"returnParameters": {
										"id": 456,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 453,
												"mutability": "mutable",
												"name": "token0",
												"nodeType": "VariableDeclaration",
												"scope": 457,
												"src": "2429:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 452,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2429:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 455,
												"mutability": "mutable",
												"name": "token1",
												"nodeType": "VariableDeclaration",
												"scope": 457,
												"src": "2445:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 454,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2445:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2428:32:7"
									},
									"scope": 524,
									"src": "2382:79:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 458,
										"nodeType": "StructuredDocumentation",
										"src": "2467:150:7",
										"text": "@notice The currently in range liquidity available to the pool\n @dev This value has no relationship to the total liquidity across all ticks"
									},
									"functionSelector": "1a686502",
									"id": 463,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "liquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 459,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2640:2:7"
									},
									"returnParameters": {
										"id": 462,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 461,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 463,
												"src": "2666:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 460,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2666:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2665:9:7"
									},
									"scope": 524,
									"src": "2622:53:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 464,
										"nodeType": "StructuredDocumentation",
										"src": "2681:1244:7",
										"text": "@notice Look up information about a specific tick in the pool\n @param tick The tick to look up\n @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n tick upper,\n liquidityNet how much liquidity changes when the pool price crosses the tick,\n feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n secondsOutside the seconds spent on the other side of the tick from the current tick,\n initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n In addition, these values are only relative and must be used only in comparison to previous snapshots for\n a specific position."
									},
									"functionSelector": "f30dba93",
									"id": 485,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ticks",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 467,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 466,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 485,
												"src": "3945:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 465,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3945:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3944:12:7"
									},
									"returnParameters": {
										"id": 484,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 469,
												"mutability": "mutable",
												"name": "liquidityGross",
												"nodeType": "VariableDeclaration",
												"scope": 485,
												"src": "4017:22:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 468,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4017:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 471,
												"mutability": "mutable",
												"name": "liquidityNet",
												"nodeType": "VariableDeclaration",
												"scope": 485,
												"src": "4053:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 470,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "4053:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 473,
												"mutability": "mutable",
												"name": "feeGrowthOutside0X128",
												"nodeType": "VariableDeclaration",
												"scope": 485,
												"src": "4086:29:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 472,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4086:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 475,
												"mutability": "mutable",
												"name": "feeGrowthOutside1X128",
												"nodeType": "VariableDeclaration",
												"scope": 485,
												"src": "4129:29:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 474,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4129:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 477,
												"mutability": "mutable",
												"name": "tickCumulativeOutside",
												"nodeType": "VariableDeclaration",
												"scope": 485,
												"src": "4172:27:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 476,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "4172:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 479,
												"mutability": "mutable",
												"name": "secondsPerLiquidityOutsideX128",
												"nodeType": "VariableDeclaration",
												"scope": 485,
												"src": "4213:38:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 478,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4213:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 481,
												"mutability": "mutable",
												"name": "secondsOutside",
												"nodeType": "VariableDeclaration",
												"scope": 485,
												"src": "4265:21:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 480,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "4265:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 483,
												"mutability": "mutable",
												"name": "initialized",
												"nodeType": "VariableDeclaration",
												"scope": 485,
												"src": "4300:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 482,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4300:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4003:323:7"
									},
									"scope": 524,
									"src": "3930:397:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 486,
										"nodeType": "StructuredDocumentation",
										"src": "4333:99:7",
										"text": "@notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
									},
									"functionSelector": "5339c296",
									"id": 493,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tickBitmap",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 489,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 488,
												"mutability": "mutable",
												"name": "wordPosition",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "4457:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int16",
													"typeString": "int16"
												},
												"typeName": {
													"id": 487,
													"name": "int16",
													"nodeType": "ElementaryTypeName",
													"src": "4457:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int16",
														"typeString": "int16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4456:20:7"
									},
									"returnParameters": {
										"id": 492,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 491,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "4500:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 490,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4500:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4499:9:7"
									},
									"scope": 524,
									"src": "4437:72:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 494,
										"nodeType": "StructuredDocumentation",
										"src": "4515:700:7",
										"text": "@notice Returns the information about a position by the position's key\n @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n @return _liquidity The amount of liquidity in the position,\n Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
									},
									"functionSelector": "514ea4bf",
									"id": 509,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "positions",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 497,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 496,
												"mutability": "mutable",
												"name": "key",
												"nodeType": "VariableDeclaration",
												"scope": 509,
												"src": "5239:11:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 495,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5239:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5238:13:7"
									},
									"returnParameters": {
										"id": 508,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 499,
												"mutability": "mutable",
												"name": "_liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 509,
												"src": "5312:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 498,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5312:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 501,
												"mutability": "mutable",
												"name": "feeGrowthInside0LastX128",
												"nodeType": "VariableDeclaration",
												"scope": 509,
												"src": "5344:32:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 500,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5344:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 503,
												"mutability": "mutable",
												"name": "feeGrowthInside1LastX128",
												"nodeType": "VariableDeclaration",
												"scope": 509,
												"src": "5390:32:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 502,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5390:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 505,
												"mutability": "mutable",
												"name": "tokensOwed0",
												"nodeType": "VariableDeclaration",
												"scope": 509,
												"src": "5436:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 504,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5436:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 507,
												"mutability": "mutable",
												"name": "tokensOwed1",
												"nodeType": "VariableDeclaration",
												"scope": 509,
												"src": "5469:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 506,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5469:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5298:200:7"
									},
									"scope": 524,
									"src": "5220:279:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 510,
										"nodeType": "StructuredDocumentation",
										"src": "5505:749:7",
										"text": "@notice Returns data about a specific observation index\n @param index The element of the observations array to fetch\n @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n ago, rather than at a specific index in the array.\n @return blockTimestamp The timestamp of the observation,\n Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n Returns initialized whether the observation has been initialized and the values are safe to use"
									},
									"functionSelector": "252c09d7",
									"id": 523,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "observations",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 513,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 512,
												"mutability": "mutable",
												"name": "index",
												"nodeType": "VariableDeclaration",
												"scope": 523,
												"src": "6281:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 511,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6281:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6280:15:7"
									},
									"returnParameters": {
										"id": 522,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 515,
												"mutability": "mutable",
												"name": "blockTimestamp",
												"nodeType": "VariableDeclaration",
												"scope": 523,
												"src": "6356:21:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 514,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "6356:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 517,
												"mutability": "mutable",
												"name": "tickCumulative",
												"nodeType": "VariableDeclaration",
												"scope": 523,
												"src": "6391:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 516,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "6391:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 519,
												"mutability": "mutable",
												"name": "secondsPerLiquidityCumulativeX128",
												"nodeType": "VariableDeclaration",
												"scope": 523,
												"src": "6425:41:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 518,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "6425:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 521,
												"mutability": "mutable",
												"name": "initialized",
												"nodeType": "VariableDeclaration",
												"scope": 523,
												"src": "6480:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 520,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6480:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6342:164:7"
									},
									"scope": 524,
									"src": "6259:248:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 525,
							"src": "240:6269:7"
						}
					],
					"src": "45:6465:7"
				},
				"id": 7
			},
			"@uniswap/v3-core/contracts/libraries/FullMath.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/libraries/FullMath.sol",
					"exportedSymbols": {
						"FullMath": [
							697
						]
					},
					"id": 698,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 526,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:31:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 527,
								"nodeType": "StructuredDocumentation",
								"src": "65:297:8",
								"text": "@title Contains 512-bit math functions\n @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits"
							},
							"fullyImplemented": true,
							"id": 697,
							"linearizedBaseContracts": [
								697
							],
							"name": "FullMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 652,
										"nodeType": "Block",
										"src": "877:3648:8",
										"statements": [
											{
												"assignments": [
													540
												],
												"declarations": [
													{
														"constant": false,
														"id": 540,
														"mutability": "mutable",
														"name": "prod0",
														"nodeType": "VariableDeclaration",
														"scope": 652,
														"src": "1190:13:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 539,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1190:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 541,
												"nodeType": "VariableDeclarationStatement",
												"src": "1190:13:8"
											},
											{
												"assignments": [
													543
												],
												"declarations": [
													{
														"constant": false,
														"id": 543,
														"mutability": "mutable",
														"name": "prod1",
														"nodeType": "VariableDeclaration",
														"scope": 652,
														"src": "1258:13:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 542,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1258:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 544,
												"nodeType": "VariableDeclarationStatement",
												"src": "1258:13:8"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "1334:141:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1348:30:8",
															"value": {
																"arguments": [
																	{
																		"name": "a",
																		"nodeType": "YulIdentifier",
																		"src": "1365:1:8"
																	},
																	{
																		"name": "b",
																		"nodeType": "YulIdentifier",
																		"src": "1368:1:8"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1375:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "1371:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1371:6:8"
																	}
																],
																"functionName": {
																	"name": "mulmod",
																	"nodeType": "YulIdentifier",
																	"src": "1358:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1358:20:8"
															},
															"variables": [
																{
																	"name": "mm",
																	"nodeType": "YulTypedName",
																	"src": "1352:2:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1391:18:8",
															"value": {
																"arguments": [
																	{
																		"name": "a",
																		"nodeType": "YulIdentifier",
																		"src": "1404:1:8"
																	},
																	{
																		"name": "b",
																		"nodeType": "YulIdentifier",
																		"src": "1407:1:8"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "1400:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1400:9:8"
															},
															"variableNames": [
																{
																	"name": "prod0",
																	"nodeType": "YulIdentifier",
																	"src": "1391:5:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1422:43:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "mm",
																				"nodeType": "YulIdentifier",
																				"src": "1439:2:8"
																			},
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "1443:5:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1435:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1435:14:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "mm",
																				"nodeType": "YulIdentifier",
																				"src": "1454:2:8"
																			},
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "1458:5:8"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "1451:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1451:13:8"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "1431:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1431:34:8"
															},
															"variableNames": [
																{
																	"name": "prod1",
																	"nodeType": "YulIdentifier",
																	"src": "1422:5:8"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 530,
														"isOffset": false,
														"isSlot": false,
														"src": "1365:1:8",
														"valueSize": 1
													},
													{
														"declaration": 530,
														"isOffset": false,
														"isSlot": false,
														"src": "1404:1:8",
														"valueSize": 1
													},
													{
														"declaration": 532,
														"isOffset": false,
														"isSlot": false,
														"src": "1368:1:8",
														"valueSize": 1
													},
													{
														"declaration": 532,
														"isOffset": false,
														"isSlot": false,
														"src": "1407:1:8",
														"valueSize": 1
													},
													{
														"declaration": 540,
														"isOffset": false,
														"isSlot": false,
														"src": "1391:5:8",
														"valueSize": 1
													},
													{
														"declaration": 540,
														"isOffset": false,
														"isSlot": false,
														"src": "1443:5:8",
														"valueSize": 1
													},
													{
														"declaration": 540,
														"isOffset": false,
														"isSlot": false,
														"src": "1458:5:8",
														"valueSize": 1
													},
													{
														"declaration": 543,
														"isOffset": false,
														"isSlot": false,
														"src": "1422:5:8",
														"valueSize": 1
													}
												],
												"id": 545,
												"nodeType": "InlineAssembly",
												"src": "1325:150:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 548,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 546,
														"name": "prod1",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 543,
														"src": "1547:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 547,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1556:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1547:10:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 559,
												"nodeType": "IfStatement",
												"src": "1543:179:8",
												"trueBody": {
													"id": 558,
													"nodeType": "Block",
													"src": "1559:163:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 552,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 550,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 534,
																			"src": "1581:11:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 551,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1595:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1581:15:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 549,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "1573:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
																		"typeString": "function (bool) pure"
																	}
																},
																"id": 553,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1573:24:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 554,
															"nodeType": "ExpressionStatement",
															"src": "1573:24:8"
														},
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "1620:65:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1638:33:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "prod0",
																					"nodeType": "YulIdentifier",
																					"src": "1652:5:8"
																				},
																				{
																					"name": "denominator",
																					"nodeType": "YulIdentifier",
																					"src": "1659:11:8"
																				}
																			],
																			"functionName": {
																				"name": "div",
																				"nodeType": "YulIdentifier",
																				"src": "1648:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1648:23:8"
																		},
																		"variableNames": [
																			{
																				"name": "result",
																				"nodeType": "YulIdentifier",
																				"src": "1638:6:8"
																			}
																		]
																	}
																]
															},
															"evmVersion": "istanbul",
															"externalReferences": [
																{
																	"declaration": 534,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "1659:11:8",
																	"valueSize": 1
																},
																{
																	"declaration": 540,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "1652:5:8",
																	"valueSize": 1
																},
																{
																	"declaration": 537,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "1638:6:8",
																	"valueSize": 1
																}
															],
															"id": 555,
															"nodeType": "InlineAssembly",
															"src": "1611:74:8"
														},
														{
															"expression": {
																"id": 556,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 537,
																"src": "1705:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 538,
															"id": 557,
															"nodeType": "Return",
															"src": "1698:13:8"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 563,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 561,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 534,
																"src": "1835:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 562,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 543,
																"src": "1849:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1835:19:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 560,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1827:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 564,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1827:28:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 565,
												"nodeType": "ExpressionStatement",
												"src": "1827:28:8"
											},
											{
												"assignments": [
													567
												],
												"declarations": [
													{
														"constant": false,
														"id": 567,
														"mutability": "mutable",
														"name": "remainder",
														"nodeType": "VariableDeclaration",
														"scope": 652,
														"src": "2132:17:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 566,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2132:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 568,
												"nodeType": "VariableDeclarationStatement",
												"src": "2132:17:8"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2168:62:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2182:38:8",
															"value": {
																"arguments": [
																	{
																		"name": "a",
																		"nodeType": "YulIdentifier",
																		"src": "2202:1:8"
																	},
																	{
																		"name": "b",
																		"nodeType": "YulIdentifier",
																		"src": "2205:1:8"
																	},
																	{
																		"name": "denominator",
																		"nodeType": "YulIdentifier",
																		"src": "2208:11:8"
																	}
																],
																"functionName": {
																	"name": "mulmod",
																	"nodeType": "YulIdentifier",
																	"src": "2195:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2195:25:8"
															},
															"variableNames": [
																{
																	"name": "remainder",
																	"nodeType": "YulIdentifier",
																	"src": "2182:9:8"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 530,
														"isOffset": false,
														"isSlot": false,
														"src": "2202:1:8",
														"valueSize": 1
													},
													{
														"declaration": 532,
														"isOffset": false,
														"isSlot": false,
														"src": "2205:1:8",
														"valueSize": 1
													},
													{
														"declaration": 534,
														"isOffset": false,
														"isSlot": false,
														"src": "2208:11:8",
														"valueSize": 1
													},
													{
														"declaration": 567,
														"isOffset": false,
														"isSlot": false,
														"src": "2182:9:8",
														"valueSize": 1
													}
												],
												"id": 569,
												"nodeType": "InlineAssembly",
												"src": "2159:71:8"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2303:108:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2317:41:8",
															"value": {
																"arguments": [
																	{
																		"name": "prod1",
																		"nodeType": "YulIdentifier",
																		"src": "2330:5:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "remainder",
																				"nodeType": "YulIdentifier",
																				"src": "2340:9:8"
																			},
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "2351:5:8"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "2337:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2337:20:8"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "2326:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2326:32:8"
															},
															"variableNames": [
																{
																	"name": "prod1",
																	"nodeType": "YulIdentifier",
																	"src": "2317:5:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2371:30:8",
															"value": {
																"arguments": [
																	{
																		"name": "prod0",
																		"nodeType": "YulIdentifier",
																		"src": "2384:5:8"
																	},
																	{
																		"name": "remainder",
																		"nodeType": "YulIdentifier",
																		"src": "2391:9:8"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "2380:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2380:21:8"
															},
															"variableNames": [
																{
																	"name": "prod0",
																	"nodeType": "YulIdentifier",
																	"src": "2371:5:8"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 540,
														"isOffset": false,
														"isSlot": false,
														"src": "2351:5:8",
														"valueSize": 1
													},
													{
														"declaration": 540,
														"isOffset": false,
														"isSlot": false,
														"src": "2371:5:8",
														"valueSize": 1
													},
													{
														"declaration": 540,
														"isOffset": false,
														"isSlot": false,
														"src": "2384:5:8",
														"valueSize": 1
													},
													{
														"declaration": 543,
														"isOffset": false,
														"isSlot": false,
														"src": "2317:5:8",
														"valueSize": 1
													},
													{
														"declaration": 543,
														"isOffset": false,
														"isSlot": false,
														"src": "2330:5:8",
														"valueSize": 1
													},
													{
														"declaration": 567,
														"isOffset": false,
														"isSlot": false,
														"src": "2340:9:8",
														"valueSize": 1
													},
													{
														"declaration": 567,
														"isOffset": false,
														"isSlot": false,
														"src": "2391:9:8",
														"valueSize": 1
													}
												],
												"id": 570,
												"nodeType": "InlineAssembly",
												"src": "2294:117:8"
											},
											{
												"assignments": [
													572
												],
												"declarations": [
													{
														"constant": false,
														"id": 572,
														"mutability": "mutable",
														"name": "twos",
														"nodeType": "VariableDeclaration",
														"scope": 652,
														"src": "2560:12:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 571,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2560:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 577,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 576,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 574,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "-",
														"prefix": true,
														"src": "2575:12:8",
														"subExpression": {
															"id": 573,
															"name": "denominator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 534,
															"src": "2576:11:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&",
													"rightExpression": {
														"id": 575,
														"name": "denominator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 534,
														"src": "2590:11:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2575:26:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2560:41:8"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2666:61:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2680:37:8",
															"value": {
																"arguments": [
																	{
																		"name": "denominator",
																		"nodeType": "YulIdentifier",
																		"src": "2699:11:8"
																	},
																	{
																		"name": "twos",
																		"nodeType": "YulIdentifier",
																		"src": "2712:4:8"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "2695:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2695:22:8"
															},
															"variableNames": [
																{
																	"name": "denominator",
																	"nodeType": "YulIdentifier",
																	"src": "2680:11:8"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 534,
														"isOffset": false,
														"isSlot": false,
														"src": "2680:11:8",
														"valueSize": 1
													},
													{
														"declaration": 534,
														"isOffset": false,
														"isSlot": false,
														"src": "2699:11:8",
														"valueSize": 1
													},
													{
														"declaration": 572,
														"isOffset": false,
														"isSlot": false,
														"src": "2712:4:8",
														"valueSize": 1
													}
												],
												"id": 578,
												"nodeType": "InlineAssembly",
												"src": "2657:70:8"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2800:49:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2814:25:8",
															"value": {
																"arguments": [
																	{
																		"name": "prod0",
																		"nodeType": "YulIdentifier",
																		"src": "2827:5:8"
																	},
																	{
																		"name": "twos",
																		"nodeType": "YulIdentifier",
																		"src": "2834:4:8"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "2823:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2823:16:8"
															},
															"variableNames": [
																{
																	"name": "prod0",
																	"nodeType": "YulIdentifier",
																	"src": "2814:5:8"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 540,
														"isOffset": false,
														"isSlot": false,
														"src": "2814:5:8",
														"valueSize": 1
													},
													{
														"declaration": 540,
														"isOffset": false,
														"isSlot": false,
														"src": "2827:5:8",
														"valueSize": 1
													},
													{
														"declaration": 572,
														"isOffset": false,
														"isSlot": false,
														"src": "2834:4:8",
														"valueSize": 1
													}
												],
												"id": 579,
												"nodeType": "InlineAssembly",
												"src": "2791:58:8"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "3037:63:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3051:39:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3071:1:8",
																						"type": "",
																						"value": "0"
																					},
																					{
																						"name": "twos",
																						"nodeType": "YulIdentifier",
																						"src": "3074:4:8"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "3067:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3067:12:8"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "3081:4:8"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "3063:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3063:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3088:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3059:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3059:31:8"
															},
															"variableNames": [
																{
																	"name": "twos",
																	"nodeType": "YulIdentifier",
																	"src": "3051:4:8"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 572,
														"isOffset": false,
														"isSlot": false,
														"src": "3051:4:8",
														"valueSize": 1
													},
													{
														"declaration": 572,
														"isOffset": false,
														"isSlot": false,
														"src": "3074:4:8",
														"valueSize": 1
													},
													{
														"declaration": 572,
														"isOffset": false,
														"isSlot": false,
														"src": "3081:4:8",
														"valueSize": 1
													}
												],
												"id": 580,
												"nodeType": "InlineAssembly",
												"src": "3028:72:8"
											},
											{
												"expression": {
													"id": 585,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 581,
														"name": "prod0",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 540,
														"src": "3109:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "|=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 584,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 582,
															"name": "prod1",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 543,
															"src": "3118:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"id": 583,
															"name": "twos",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 572,
															"src": "3126:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3118:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3109:21:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 586,
												"nodeType": "ExpressionStatement",
												"src": "3109:21:8"
											},
											{
												"assignments": [
													588
												],
												"declarations": [
													{
														"constant": false,
														"id": 588,
														"mutability": "mutable",
														"name": "inv",
														"nodeType": "VariableDeclaration",
														"scope": 652,
														"src": "3464:11:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 587,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3464:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 595,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 594,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 591,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "33",
																	"id": 589,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3479:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_3_by_1",
																		"typeString": "int_const 3"
																	},
																	"value": "3"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 590,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 534,
																	"src": "3483:11:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3479:15:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 592,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "3478:17:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "^",
													"rightExpression": {
														"hexValue": "32",
														"id": 593,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3498:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_2_by_1",
															"typeString": "int_const 2"
														},
														"value": "2"
													},
													"src": "3478:21:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3464:35:8"
											},
											{
												"expression": {
													"id": 602,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 596,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 588,
														"src": "3714:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 601,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 597,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3721:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 600,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 598,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 534,
																"src": "3725:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 599,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 588,
																"src": "3739:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3725:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3721:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3714:28:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 603,
												"nodeType": "ExpressionStatement",
												"src": "3714:28:8"
											},
											{
												"expression": {
													"id": 610,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 604,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 588,
														"src": "3772:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 609,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 605,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3779:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 608,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 606,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 534,
																"src": "3783:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 607,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 588,
																"src": "3797:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3783:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3779:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3772:28:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 611,
												"nodeType": "ExpressionStatement",
												"src": "3772:28:8"
											},
											{
												"expression": {
													"id": 618,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 612,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 588,
														"src": "3831:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 617,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 613,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3838:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 616,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 614,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 534,
																"src": "3842:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 615,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 588,
																"src": "3856:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3842:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3838:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3831:28:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 619,
												"nodeType": "ExpressionStatement",
												"src": "3831:28:8"
											},
											{
												"expression": {
													"id": 626,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 620,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 588,
														"src": "3890:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 625,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 621,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3897:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 624,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 622,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 534,
																"src": "3901:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 623,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 588,
																"src": "3915:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3901:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3897:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3890:28:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 627,
												"nodeType": "ExpressionStatement",
												"src": "3890:28:8"
											},
											{
												"expression": {
													"id": 634,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 628,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 588,
														"src": "3949:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 633,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 629,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3956:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 632,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 630,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 534,
																"src": "3960:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 631,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 588,
																"src": "3974:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3960:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3956:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3949:28:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 635,
												"nodeType": "ExpressionStatement",
												"src": "3949:28:8"
											},
											{
												"expression": {
													"id": 642,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 636,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 588,
														"src": "4009:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 641,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 637,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4016:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 640,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 638,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 534,
																"src": "4020:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 639,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 588,
																"src": "4034:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4020:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "4016:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4009:28:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 643,
												"nodeType": "ExpressionStatement",
												"src": "4009:28:8"
											},
											{
												"expression": {
													"id": 648,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 644,
														"name": "result",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 537,
														"src": "4475:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 647,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 645,
															"name": "prod0",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 540,
															"src": "4484:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"id": 646,
															"name": "inv",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 588,
															"src": "4492:3:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "4484:11:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4475:20:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 649,
												"nodeType": "ExpressionStatement",
												"src": "4475:20:8"
											},
											{
												"expression": {
													"id": 650,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 537,
													"src": "4512:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 538,
												"id": 651,
												"nodeType": "Return",
												"src": "4505:13:8"
											}
										]
									},
									"documentation": {
										"id": 528,
										"nodeType": "StructuredDocumentation",
										"src": "385:359:8",
										"text": "@notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @param a The multiplicand\n @param b The multiplier\n @param denominator The divisor\n @return result The 256-bit result\n @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv"
									},
									"id": 653,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 535,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 530,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "774:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 529,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "774:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 532,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "793:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 531,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "793:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 534,
												"mutability": "mutable",
												"name": "denominator",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "812:19:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 533,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "812:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "764:73:8"
									},
									"returnParameters": {
										"id": 538,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 537,
												"mutability": "mutable",
												"name": "result",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "861:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 536,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "861:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "860:16:8"
									},
									"scope": 697,
									"src": "749:3776:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 695,
										"nodeType": "Block",
										"src": "4945:177:8",
										"statements": [
											{
												"expression": {
													"id": 671,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 665,
														"name": "result",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 663,
														"src": "4955:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 667,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 656,
																"src": "4971:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 668,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 658,
																"src": "4974:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 669,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 660,
																"src": "4977:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 666,
															"name": "mulDiv",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 653,
															"src": "4964:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 670,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4964:25:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4955:34:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 672,
												"nodeType": "ExpressionStatement",
												"src": "4955:34:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 679,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 674,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 656,
																"src": "5010:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 675,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 658,
																"src": "5013:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 676,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 660,
																"src": "5016:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 673,
															"name": "mulmod",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967280,
															"src": "5003:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 677,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5003:25:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 678,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5031:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5003:29:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 694,
												"nodeType": "IfStatement",
												"src": "4999:117:8",
												"trueBody": {
													"id": 693,
													"nodeType": "Block",
													"src": "5034:82:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 687,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 681,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 663,
																			"src": "5056:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"expression": {
																				"arguments": [
																					{
																						"id": 684,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "5070:7:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_uint256_$",
																							"typeString": "type(uint256)"
																						},
																						"typeName": {
																							"id": 683,
																							"name": "uint256",
																							"nodeType": "ElementaryTypeName",
																							"src": "5070:7:8",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_type$_t_uint256_$",
																							"typeString": "type(uint256)"
																						}
																					],
																					"id": 682,
																					"name": "type",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967269,
																					"src": "5065:4:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																						"typeString": "function () pure"
																					}
																				},
																				"id": 685,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "5065:13:8",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_meta_type_t_uint256",
																					"typeString": "type(uint256)"
																				}
																			},
																			"id": 686,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "max",
																			"nodeType": "MemberAccess",
																			"src": "5065:17:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5056:26:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 680,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "5048:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
																		"typeString": "function (bool) pure"
																	}
																},
																"id": 688,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5048:35:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 689,
															"nodeType": "ExpressionStatement",
															"src": "5048:35:8"
														},
														{
															"expression": {
																"id": 691,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "5097:8:8",
																"subExpression": {
																	"id": 690,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 663,
																	"src": "5097:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 692,
															"nodeType": "ExpressionStatement",
															"src": "5097:8:8"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 654,
										"nodeType": "StructuredDocumentation",
										"src": "4531:271:8",
										"text": "@notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @param a The multiplicand\n @param b The multiplier\n @param denominator The divisor\n @return result The 256-bit result"
									},
									"id": 696,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDivRoundingUp",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 661,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 656,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "4842:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 655,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4842:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 658,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "4861:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 657,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4861:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 660,
												"mutability": "mutable",
												"name": "denominator",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "4880:19:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 659,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4880:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4832:73:8"
									},
									"returnParameters": {
										"id": 664,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 663,
												"mutability": "mutable",
												"name": "result",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "4929:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 662,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4929:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4928:16:8"
									},
									"scope": 697,
									"src": "4807:315:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 698,
							"src": "362:4762:8"
						}
					],
					"src": "32:5093:8"
				},
				"id": 8
			},
			"@uniswap/v3-core/contracts/libraries/TickMath.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/libraries/TickMath.sol",
					"exportedSymbols": {
						"TickMath": [
							1232
						]
					},
					"id": 1233,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 699,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:31:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 700,
								"nodeType": "StructuredDocumentation",
								"src": "78:235:9",
								"text": "@title Math library for computing sqrt prices from ticks and vice versa\n @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n prices between 2**-128 and 2**128"
							},
							"fullyImplemented": true,
							"id": 1232,
							"linearizedBaseContracts": [
								1232
							],
							"name": "TickMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"documentation": {
										"id": 701,
										"nodeType": "StructuredDocumentation",
										"src": "336:108:9",
										"text": "@dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128"
									},
									"id": 705,
									"mutability": "constant",
									"name": "MIN_TICK",
									"nodeType": "VariableDeclaration",
									"scope": 1232,
									"src": "449:42:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_int24",
										"typeString": "int24"
									},
									"typeName": {
										"id": 702,
										"name": "int24",
										"nodeType": "ElementaryTypeName",
										"src": "449:5:9",
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"value": {
										"id": 704,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"nodeType": "UnaryOperation",
										"operator": "-",
										"prefix": true,
										"src": "484:7:9",
										"subExpression": {
											"hexValue": "383837323732",
											"id": 703,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "485:6:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_887272_by_1",
												"typeString": "int_const 887272"
											},
											"value": "887272"
										},
										"typeDescriptions": {
											"typeIdentifier": "t_rational_minus_887272_by_1",
											"typeString": "int_const -887272"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 706,
										"nodeType": "StructuredDocumentation",
										"src": "497:107:9",
										"text": "@dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128"
									},
									"id": 710,
									"mutability": "constant",
									"name": "MAX_TICK",
									"nodeType": "VariableDeclaration",
									"scope": 1232,
									"src": "609:44:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_int24",
										"typeString": "int24"
									},
									"typeName": {
										"id": 707,
										"name": "int24",
										"nodeType": "ElementaryTypeName",
										"src": "609:5:9",
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"value": {
										"id": 709,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"nodeType": "UnaryOperation",
										"operator": "-",
										"prefix": true,
										"src": "644:9:9",
										"subExpression": {
											"id": 708,
											"name": "MIN_TICK",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 705,
											"src": "645:8:9",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											}
										},
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 711,
										"nodeType": "StructuredDocumentation",
										"src": "660:116:9",
										"text": "@dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)"
									},
									"id": 714,
									"mutability": "constant",
									"name": "MIN_SQRT_RATIO",
									"nodeType": "VariableDeclaration",
									"scope": 1232,
									"src": "781:53:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint160",
										"typeString": "uint160"
									},
									"typeName": {
										"id": 712,
										"name": "uint160",
										"nodeType": "ElementaryTypeName",
										"src": "781:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint160",
											"typeString": "uint160"
										}
									},
									"value": {
										"hexValue": "34323935313238373339",
										"id": 713,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "824:10:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_4295128739_by_1",
											"typeString": "int_const 4295128739"
										},
										"value": "4295128739"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 715,
										"nodeType": "StructuredDocumentation",
										"src": "840:116:9",
										"text": "@dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)"
									},
									"id": 718,
									"mutability": "constant",
									"name": "MAX_SQRT_RATIO",
									"nodeType": "VariableDeclaration",
									"scope": 1232,
									"src": "961:92:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint160",
										"typeString": "uint160"
									},
									"typeName": {
										"id": 716,
										"name": "uint160",
										"nodeType": "ElementaryTypeName",
										"src": "961:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint160",
											"typeString": "uint160"
										}
									},
									"value": {
										"hexValue": "31343631343436373033343835323130313033323837323733303532323033393838383232333738373233393730333432",
										"id": 717,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1004:49:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1461446703485210103287273052203988822378723970342_by_1",
											"typeString": "int_const 1461...(41 digits omitted)...0342"
										},
										"value": "1461446703485210103287273052203988822378723970342"
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1091,
										"nodeType": "Block",
										"src": "1447:2495:9",
										"statements": [
											{
												"assignments": [
													727
												],
												"declarations": [
													{
														"constant": false,
														"id": 727,
														"mutability": "mutable",
														"name": "absTick",
														"nodeType": "VariableDeclaration",
														"scope": 1091,
														"src": "1457:15:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 726,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1457:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 747,
												"initialValue": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"id": 730,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 728,
															"name": "tick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 721,
															"src": "1475:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"hexValue": "30",
															"id": 729,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1482:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1475:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 743,
																		"name": "tick",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 721,
																		"src": "1526:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	],
																	"id": 742,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1519:6:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_int256_$",
																		"typeString": "type(int256)"
																	},
																	"typeName": {
																		"id": 741,
																		"name": "int256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1519:6:9",
																		"typeDescriptions": {}
																	}
																},
																"id": 744,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1519:12:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															],
															"id": 740,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1511:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 739,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1511:7:9",
																"typeDescriptions": {}
															}
														},
														"id": 745,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1511:21:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 746,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1475:57:9",
													"trueExpression": {
														"arguments": [
															{
																"id": 737,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "-",
																"prefix": true,
																"src": "1494:13:9",
																"subExpression": {
																	"arguments": [
																		{
																			"id": 735,
																			"name": "tick",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 721,
																			"src": "1502:4:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		],
																		"id": 734,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "1495:6:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 733,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "1495:6:9",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 736,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1495:12:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															],
															"id": 732,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1486:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 731,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1486:7:9",
																"typeDescriptions": {}
															}
														},
														"id": 738,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1486:22:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1457:75:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 754,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 749,
																"name": "absTick",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 727,
																"src": "1550:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 752,
																		"name": "MAX_TICK",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 710,
																		"src": "1569:8:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	],
																	"id": 751,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1561:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 750,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1561:7:9",
																		"typeDescriptions": {}
																	}
																},
																"id": 753,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1561:17:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1550:28:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54",
															"id": 755,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1580:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_846b7b6deb1cfa110d0ea7ec6162a7123b761785528db70cceed5143183b11fc",
																"typeString": "literal_string \"T\""
															},
															"value": "T"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_846b7b6deb1cfa110d0ea7ec6162a7123b761785528db70cceed5143183b11fc",
																"typeString": "literal_string \"T\""
															}
														],
														"id": 748,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1542:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 756,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1542:42:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 757,
												"nodeType": "ExpressionStatement",
												"src": "1542:42:9"
											},
											{
												"assignments": [
													759
												],
												"declarations": [
													{
														"constant": false,
														"id": 759,
														"mutability": "mutable",
														"name": "ratio",
														"nodeType": "VariableDeclaration",
														"scope": 1091,
														"src": "1595:13:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 758,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1595:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 768,
												"initialValue": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 764,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 762,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 760,
																"name": "absTick",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 727,
																"src": "1611:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"hexValue": "307831",
																"id": 761,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1621:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "0x1"
															},
															"src": "1611:13:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "30",
															"id": 763,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1628:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1611:18:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"hexValue": "3078313030303030303030303030303030303030303030303030303030303030303030",
														"id": 766,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1669:35:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_340282366920938463463374607431768211456_by_1",
															"typeString": "int_const 3402...(31 digits omitted)...1456"
														},
														"value": "0x100000000000000000000000000000000"
													},
													"id": 767,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1611:93:9",
													"trueExpression": {
														"hexValue": "30786666666362393333626436666164333761613264313632643161353934303031",
														"id": 765,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1632:34:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_340265354078544963557816517032075149313_by_1",
															"typeString": "int_const 3402...(31 digits omitted)...9313"
														},
														"value": "0xfffcb933bd6fad37aa2d162d1a594001"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint136",
														"typeString": "uint136"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1595:109:9"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 773,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 771,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 769,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "1718:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307832",
															"id": 770,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1728:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "0x2"
														},
														"src": "1718:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 772,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1735:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1718:18:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 783,
												"nodeType": "IfStatement",
												"src": "1714:83:9",
												"trueBody": {
													"expression": {
														"id": 781,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 774,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "1738:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 780,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 777,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 775,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "1747:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666663937323732333733643431333235396134363939303538306532313361",
																			"id": 776,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1755:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340248342086729790484326174814286782778_by_1",
																				"typeString": "int_const 3402...(31 digits omitted)...2778"
																			},
																			"value": "0xfff97272373d413259a46990580e213a"
																		},
																		"src": "1747:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 778,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1746:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 779,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1794:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "1746:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1738:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 782,
													"nodeType": "ExpressionStatement",
													"src": "1738:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 788,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 786,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 784,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "1811:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307834",
															"id": 785,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1821:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_4_by_1",
																"typeString": "int_const 4"
															},
															"value": "0x4"
														},
														"src": "1811:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 787,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1828:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1811:18:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 798,
												"nodeType": "IfStatement",
												"src": "1807:83:9",
												"trueBody": {
													"expression": {
														"id": 796,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 789,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "1831:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 795,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 792,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 790,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "1840:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666663265353066356636353639333265663132333537636633633766646363",
																			"id": 791,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1848:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340214320654664324051920982716015181260_by_1",
																				"typeString": "int_const 3402...(31 digits omitted)...1260"
																			},
																			"value": "0xfff2e50f5f656932ef12357cf3c7fdcc"
																		},
																		"src": "1840:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 793,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1839:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 794,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1887:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "1839:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1831:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 797,
													"nodeType": "ExpressionStatement",
													"src": "1831:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 803,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 801,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 799,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "1904:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307838",
															"id": 800,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1914:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_8_by_1",
																"typeString": "int_const 8"
															},
															"value": "0x8"
														},
														"src": "1904:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 802,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1921:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1904:18:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 813,
												"nodeType": "IfStatement",
												"src": "1900:83:9",
												"trueBody": {
													"expression": {
														"id": 811,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 804,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "1924:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 810,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 807,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 805,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "1933:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666653563616361376531306534653631633336323465616130393431636430",
																			"id": 806,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1941:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340146287995602323631171512101879684304_by_1",
																				"typeString": "int_const 3401...(31 digits omitted)...4304"
																			},
																			"value": "0xffe5caca7e10e4e61c3624eaa0941cd0"
																		},
																		"src": "1933:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 808,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1932:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 809,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1980:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "1932:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1924:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 812,
													"nodeType": "ExpressionStatement",
													"src": "1924:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 818,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 816,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 814,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "1997:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783130",
															"id": 815,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2007:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_16_by_1",
																"typeString": "int_const 16"
															},
															"value": "0x10"
														},
														"src": "1997:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 817,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2015:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1997:19:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 828,
												"nodeType": "IfStatement",
												"src": "1993:84:9",
												"trueBody": {
													"expression": {
														"id": 826,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 819,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "2018:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 825,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 822,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 820,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "2027:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666636239383433643630663631353963396462353838333563393236363434",
																			"id": 821,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2035:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340010263488231146823593991679159461444_by_1",
																				"typeString": "int_const 3400...(31 digits omitted)...1444"
																			},
																			"value": "0xffcb9843d60f6159c9db58835c926644"
																		},
																		"src": "2027:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 823,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2026:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 824,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2074:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2026:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2018:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 827,
													"nodeType": "ExpressionStatement",
													"src": "2018:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 833,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 831,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 829,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "2091:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783230",
															"id": 830,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2101:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															},
															"value": "0x20"
														},
														"src": "2091:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 832,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2109:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2091:19:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 843,
												"nodeType": "IfStatement",
												"src": "2087:84:9",
												"trueBody": {
													"expression": {
														"id": 841,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 834,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "2112:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 840,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 837,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 835,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "2121:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666393733623431666139386330383134373265363839366466623235346330",
																			"id": 836,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2129:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_339738377640345403697157401104375502016_by_1",
																				"typeString": "int_const 3397...(31 digits omitted)...2016"
																			},
																			"value": "0xff973b41fa98c081472e6896dfb254c0"
																		},
																		"src": "2121:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 838,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2120:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 839,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2168:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2120:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2112:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 842,
													"nodeType": "ExpressionStatement",
													"src": "2112:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 848,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 846,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 844,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "2185:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783430",
															"id": 845,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2195:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_64_by_1",
																"typeString": "int_const 64"
															},
															"value": "0x40"
														},
														"src": "2185:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 847,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2203:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2185:19:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 858,
												"nodeType": "IfStatement",
												"src": "2181:84:9",
												"trueBody": {
													"expression": {
														"id": 856,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 849,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "2206:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 855,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 852,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 850,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "2215:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666326561313634363663393661333834336563373862333236623532383631",
																			"id": 851,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2223:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_339195258003219555707034227454543997025_by_1",
																				"typeString": "int_const 3391...(31 digits omitted)...7025"
																			},
																			"value": "0xff2ea16466c96a3843ec78b326b52861"
																		},
																		"src": "2215:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 853,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2214:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 854,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2262:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2214:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2206:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 857,
													"nodeType": "ExpressionStatement",
													"src": "2206:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 863,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 861,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 859,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "2279:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783830",
															"id": 860,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2289:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_128_by_1",
																"typeString": "int_const 128"
															},
															"value": "0x80"
														},
														"src": "2279:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 862,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2297:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2279:19:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 873,
												"nodeType": "IfStatement",
												"src": "2275:84:9",
												"trueBody": {
													"expression": {
														"id": 871,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 864,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "2300:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 870,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 867,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 865,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "2309:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786665356465653034366139396132613831316334363166313936396333303533",
																			"id": 866,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2317:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_338111622100601834656805679988414885971_by_1",
																				"typeString": "int_const 3381...(31 digits omitted)...5971"
																			},
																			"value": "0xfe5dee046a99a2a811c461f1969c3053"
																		},
																		"src": "2309:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 868,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2308:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 869,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2356:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2308:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2300:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 872,
													"nodeType": "ExpressionStatement",
													"src": "2300:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 878,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 876,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 874,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "2373:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078313030",
															"id": 875,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2383:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_256_by_1",
																"typeString": "int_const 256"
															},
															"value": "0x100"
														},
														"src": "2373:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 877,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2392:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2373:20:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 888,
												"nodeType": "IfStatement",
												"src": "2369:85:9",
												"trueBody": {
													"expression": {
														"id": 886,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 879,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "2395:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 885,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 882,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 880,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "2404:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786663626538366337393030613838616564636666633833623437396161336134",
																			"id": 881,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2412:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_335954724994790223023589805789778977700_by_1",
																				"typeString": "int_const 3359...(31 digits omitted)...7700"
																			},
																			"value": "0xfcbe86c7900a88aedcffc83b479aa3a4"
																		},
																		"src": "2404:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 883,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2403:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 884,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2451:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2403:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2395:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 887,
													"nodeType": "ExpressionStatement",
													"src": "2395:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 893,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 891,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 889,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "2468:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078323030",
															"id": 890,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2478:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_512_by_1",
																"typeString": "int_const 512"
															},
															"value": "0x200"
														},
														"src": "2468:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 892,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2487:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2468:20:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 903,
												"nodeType": "IfStatement",
												"src": "2464:85:9",
												"trueBody": {
													"expression": {
														"id": 901,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 894,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "2490:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 900,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 897,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 895,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "2499:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786639383761373235336163343133313736663262303734636637383135653534",
																			"id": 896,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2507:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_331682121138379247127172139078559817300_by_1",
																				"typeString": "int_const 3316...(31 digits omitted)...7300"
																			},
																			"value": "0xf987a7253ac413176f2b074cf7815e54"
																		},
																		"src": "2499:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 898,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2498:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 899,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2546:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2498:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2490:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 902,
													"nodeType": "ExpressionStatement",
													"src": "2490:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 908,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 906,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 904,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "2563:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078343030",
															"id": 905,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2573:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1024_by_1",
																"typeString": "int_const 1024"
															},
															"value": "0x400"
														},
														"src": "2563:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 907,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2582:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2563:20:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 918,
												"nodeType": "IfStatement",
												"src": "2559:85:9",
												"trueBody": {
													"expression": {
														"id": 916,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 909,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "2585:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 915,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 912,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 910,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "2594:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786633333932623038323262373030303539343063376133393865346237306633",
																			"id": 911,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2602:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_323299236684853023288211250268160618739_by_1",
																				"typeString": "int_const 3232...(31 digits omitted)...8739"
																			},
																			"value": "0xf3392b0822b70005940c7a398e4b70f3"
																		},
																		"src": "2594:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 913,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2593:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 914,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2641:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2593:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2585:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 917,
													"nodeType": "ExpressionStatement",
													"src": "2585:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 923,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 921,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 919,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "2658:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078383030",
															"id": 920,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2668:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2048_by_1",
																"typeString": "int_const 2048"
															},
															"value": "0x800"
														},
														"src": "2658:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 922,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2677:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2658:20:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 933,
												"nodeType": "IfStatement",
												"src": "2654:85:9",
												"trueBody": {
													"expression": {
														"id": 931,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 924,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "2680:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 930,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 927,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 925,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "2689:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786537313539343735613263323962373434336232396337666136653838396439",
																			"id": 926,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2697:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_307163716377032989948697243942600083929_by_1",
																				"typeString": "int_const 3071...(31 digits omitted)...3929"
																			},
																			"value": "0xe7159475a2c29b7443b29c7fa6e889d9"
																		},
																		"src": "2689:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 928,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2688:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 929,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2736:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2688:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2680:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 932,
													"nodeType": "ExpressionStatement",
													"src": "2680:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 938,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 936,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 934,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "2753:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307831303030",
															"id": 935,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2763:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_4096_by_1",
																"typeString": "int_const 4096"
															},
															"value": "0x1000"
														},
														"src": "2753:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 937,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2773:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2753:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 948,
												"nodeType": "IfStatement",
												"src": "2749:86:9",
												"trueBody": {
													"expression": {
														"id": 946,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 939,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "2776:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 945,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 942,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 940,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "2785:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786430393766336264666432303232623838343561643866373932616135383235",
																			"id": 941,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2793:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_277268403626896220162999269216087595045_by_1",
																				"typeString": "int_const 2772...(31 digits omitted)...5045"
																			},
																			"value": "0xd097f3bdfd2022b8845ad8f792aa5825"
																		},
																		"src": "2785:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 943,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2784:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 944,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2832:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2784:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2776:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 947,
													"nodeType": "ExpressionStatement",
													"src": "2776:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 953,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 951,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 949,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "2849:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307832303030",
															"id": 950,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2859:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_8192_by_1",
																"typeString": "int_const 8192"
															},
															"value": "0x2000"
														},
														"src": "2849:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 952,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2869:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2849:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 963,
												"nodeType": "IfStatement",
												"src": "2845:86:9",
												"trueBody": {
													"expression": {
														"id": 961,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 954,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "2872:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 960,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 957,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 955,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "2881:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786139663734363436326438373066646638613635646331663930653036316535",
																			"id": 956,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2889:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_225923453940442621947126027127485391333_by_1",
																				"typeString": "int_const 2259...(31 digits omitted)...1333"
																			},
																			"value": "0xa9f746462d870fdf8a65dc1f90e061e5"
																		},
																		"src": "2881:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 958,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2880:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 959,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2928:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2880:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2872:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 962,
													"nodeType": "ExpressionStatement",
													"src": "2872:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 968,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 966,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 964,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "2945:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307834303030",
															"id": 965,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2955:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_16384_by_1",
																"typeString": "int_const 16384"
															},
															"value": "0x4000"
														},
														"src": "2945:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 967,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2965:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2945:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 978,
												"nodeType": "IfStatement",
												"src": "2941:86:9",
												"trueBody": {
													"expression": {
														"id": 976,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 969,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "2968:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 975,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 972,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 970,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "2977:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783730643836396131353664326131623839306262336466363262616633326637",
																			"id": 971,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2985:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_149997214084966997727330242082538205943_by_1",
																				"typeString": "int_const 1499...(31 digits omitted)...5943"
																			},
																			"value": "0x70d869a156d2a1b890bb3df62baf32f7"
																		},
																		"src": "2977:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 973,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2976:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 974,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3024:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2976:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2968:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 977,
													"nodeType": "ExpressionStatement",
													"src": "2968:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 983,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 981,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 979,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "3041:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307838303030",
															"id": 980,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3051:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32768_by_1",
																"typeString": "int_const 32768"
															},
															"value": "0x8000"
														},
														"src": "3041:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 982,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3061:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3041:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 993,
												"nodeType": "IfStatement",
												"src": "3037:86:9",
												"trueBody": {
													"expression": {
														"id": 991,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 984,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "3064:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 990,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 987,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 985,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "3073:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783331626531333566393764303866643938313233313530353534326663666136",
																			"id": 986,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3081:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_66119101136024775622716233608466517926_by_1",
																				"typeString": "int_const 6611...(30 digits omitted)...7926"
																			},
																			"value": "0x31be135f97d08fd981231505542fcfa6"
																		},
																		"src": "3073:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 988,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3072:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 989,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3120:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3072:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3064:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 992,
													"nodeType": "ExpressionStatement",
													"src": "3064:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 998,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 996,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 994,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "3137:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783130303030",
															"id": 995,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3147:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_65536_by_1",
																"typeString": "int_const 65536"
															},
															"value": "0x10000"
														},
														"src": "3137:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 997,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3158:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3137:22:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1008,
												"nodeType": "IfStatement",
												"src": "3133:86:9",
												"trueBody": {
													"expression": {
														"id": 1006,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 999,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "3161:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1005,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1002,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1000,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "3170:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "307839616135303862356237613834653163363737646535346633653939626339",
																			"id": 1001,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3178:33:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_12847376061809297530290974190478138313_by_1",
																				"typeString": "int_const 1284...(30 digits omitted)...8313"
																			},
																			"value": "0x9aa508b5b7a84e1c677de54f3e99bc9"
																		},
																		"src": "3170:41:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1003,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3169:43:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1004,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3216:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3169:50:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3161:58:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1007,
													"nodeType": "ExpressionStatement",
													"src": "3161:58:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1013,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1011,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1009,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "3233:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783230303030",
															"id": 1010,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3243:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_131072_by_1",
																"typeString": "int_const 131072"
															},
															"value": "0x20000"
														},
														"src": "3233:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1012,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3254:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3233:22:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1023,
												"nodeType": "IfStatement",
												"src": "3229:85:9",
												"trueBody": {
													"expression": {
														"id": 1021,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1014,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "3257:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1020,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1017,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1015,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "3266:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "3078356436616638646564623831313936363939633332393232356565363034",
																			"id": 1016,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3274:32:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_485053260817066172746253684029974020_by_1",
																				"typeString": "int_const 4850...(28 digits omitted)...4020"
																			},
																			"value": "0x5d6af8dedb81196699c329225ee604"
																		},
																		"src": "3266:40:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1018,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3265:42:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1019,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3311:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3265:49:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3257:57:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1022,
													"nodeType": "ExpressionStatement",
													"src": "3257:57:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1028,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1026,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1024,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "3328:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783430303030",
															"id": 1025,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3338:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_262144_by_1",
																"typeString": "int_const 262144"
															},
															"value": "0x40000"
														},
														"src": "3328:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1027,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3349:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3328:22:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1038,
												"nodeType": "IfStatement",
												"src": "3324:83:9",
												"trueBody": {
													"expression": {
														"id": 1036,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1029,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "3352:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1035,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1032,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1030,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "3361:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "307832323136653538346635666131656139323630343162656466653938",
																			"id": 1031,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3369:30:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_691415978906521570653435304214168_by_1",
																				"typeString": "int_const 6914...(25 digits omitted)...4168"
																			},
																			"value": "0x2216e584f5fa1ea926041bedfe98"
																		},
																		"src": "3361:38:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1033,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3360:40:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1034,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3404:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3360:47:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3352:55:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1037,
													"nodeType": "ExpressionStatement",
													"src": "3352:55:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1043,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1041,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1039,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "3421:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783830303030",
															"id": 1040,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3431:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_524288_by_1",
																"typeString": "int_const 524288"
															},
															"value": "0x80000"
														},
														"src": "3421:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1042,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3442:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3421:22:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1053,
												"nodeType": "IfStatement",
												"src": "3417:78:9",
												"trueBody": {
													"expression": {
														"id": 1051,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1044,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "3445:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1050,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1047,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1045,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "3454:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783438613137303339316637646334323434346538666132",
																			"id": 1046,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3462:25:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1404880482679654955896180642_by_1",
																				"typeString": "int_const 1404880482679654955896180642"
																			},
																			"value": "0x48a170391f7dc42444e8fa2"
																		},
																		"src": "3454:33:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1048,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3453:35:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1049,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3492:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3453:42:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3445:50:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1052,
													"nodeType": "ExpressionStatement",
													"src": "3445:50:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													},
													"id": 1056,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1054,
														"name": "tick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 721,
														"src": "3510:4:9",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1055,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3517:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3510:8:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1067,
												"nodeType": "IfStatement",
												"src": "3506:47:9",
												"trueBody": {
													"expression": {
														"id": 1065,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1057,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "3520:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1064,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1060,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3533:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 1059,
																				"name": "uint256",
																				"nodeType": "ElementaryTypeName",
																				"src": "3533:7:9",
																				"typeDescriptions": {}
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			}
																		],
																		"id": 1058,
																		"name": "type",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967269,
																		"src": "3528:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 1061,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3528:13:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_meta_type_t_uint256",
																		"typeString": "type(uint256)"
																	}
																},
																"id": 1062,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "max",
																"nodeType": "MemberAccess",
																"src": "3528:17:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 1063,
																"name": "ratio",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 759,
																"src": "3548:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3528:25:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3520:33:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1066,
													"nodeType": "ExpressionStatement",
													"src": "3520:33:9"
												}
											},
											{
												"expression": {
													"id": 1089,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1068,
														"name": "sqrtPriceX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 724,
														"src": "3863:12:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1087,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1073,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1071,
																				"name": "ratio",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 759,
																				"src": "3887:5:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">>",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 1072,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3896:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "3887:11:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1074,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "3886:13:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"components": [
																		{
																			"condition": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1082,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1080,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1075,
																						"name": "ratio",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 759,
																						"src": "3903:5:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "%",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_rational_4294967296_by_1",
																									"typeString": "int_const 4294967296"
																								},
																								"id": 1078,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"leftExpression": {
																									"hexValue": "31",
																									"id": 1076,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "3912:1:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_1_by_1",
																										"typeString": "int_const 1"
																									},
																									"value": "1"
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "<<",
																								"rightExpression": {
																									"hexValue": "3332",
																									"id": 1077,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "3917:2:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_32_by_1",
																										"typeString": "int_const 32"
																									},
																									"value": "32"
																								},
																								"src": "3912:7:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_4294967296_by_1",
																									"typeString": "int_const 4294967296"
																								}
																							}
																						],
																						"id": 1079,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "3911:9:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_4294967296_by_1",
																							"typeString": "int_const 4294967296"
																						}
																					},
																					"src": "3903:17:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"hexValue": "30",
																					"id": 1081,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3924:1:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					},
																					"value": "0"
																				},
																				"src": "3903:22:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"falseExpression": {
																				"hexValue": "31",
																				"id": 1084,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3932:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"id": 1085,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "Conditional",
																			"src": "3903:30:9",
																			"trueExpression": {
																				"hexValue": "30",
																				"id": 1083,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3928:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		}
																	],
																	"id": 1086,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "3902:32:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "3886:48:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1070,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3878:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint160_$",
																"typeString": "type(uint160)"
															},
															"typeName": {
																"id": 1069,
																"name": "uint160",
																"nodeType": "ElementaryTypeName",
																"src": "3878:7:9",
																"typeDescriptions": {}
															}
														},
														"id": 1088,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3878:57:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "3863:72:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"id": 1090,
												"nodeType": "ExpressionStatement",
												"src": "3863:72:9"
											}
										]
									},
									"documentation": {
										"id": 719,
										"nodeType": "StructuredDocumentation",
										"src": "1060:297:9",
										"text": "@notice Calculates sqrt(1.0001^tick) * 2^96\n @dev Throws if |tick| > max tick\n @param tick The input tick for the above formula\n @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n at the given tick"
									},
									"id": 1092,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getSqrtRatioAtTick",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 722,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 721,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 1092,
												"src": "1390:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 720,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1390:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1389:12:9"
									},
									"returnParameters": {
										"id": 725,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 724,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 1092,
												"src": "1425:20:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 723,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1425:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1424:22:9"
									},
									"scope": 1232,
									"src": "1362:2580:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1230,
										"nodeType": "Block",
										"src": "4446:4196:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1107,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 1103,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1101,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1095,
																	"src": "4563:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">=",
																"rightExpression": {
																	"id": 1102,
																	"name": "MIN_SQRT_RATIO",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 714,
																	"src": "4579:14:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "4563:30:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 1106,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1104,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1095,
																	"src": "4597:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 1105,
																	"name": "MAX_SQRT_RATIO",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 718,
																	"src": "4612:14:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "4597:29:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "4563:63:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "52",
															"id": 1108,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4628:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef22bddd350b943170a67d35191c27e310709a28c38b5762a152ff640108f5b2",
																"typeString": "literal_string \"R\""
															},
															"value": "R"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef22bddd350b943170a67d35191c27e310709a28c38b5762a152ff640108f5b2",
																"typeString": "literal_string \"R\""
															}
														],
														"id": 1100,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4555:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1109,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4555:77:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1110,
												"nodeType": "ExpressionStatement",
												"src": "4555:77:9"
											},
											{
												"assignments": [
													1112
												],
												"declarations": [
													{
														"constant": false,
														"id": 1112,
														"mutability": "mutable",
														"name": "ratio",
														"nodeType": "VariableDeclaration",
														"scope": 1230,
														"src": "4642:13:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1111,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4642:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1119,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1118,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1115,
																"name": "sqrtPriceX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1095,
																"src": "4666:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															],
															"id": 1114,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "4658:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 1113,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "4658:7:9",
																"typeDescriptions": {}
															}
														},
														"id": 1116,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4658:21:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"hexValue": "3332",
														"id": 1117,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4683:2:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"src": "4658:27:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4642:43:9"
											},
											{
												"assignments": [
													1121
												],
												"declarations": [
													{
														"constant": false,
														"id": 1121,
														"mutability": "mutable",
														"name": "r",
														"nodeType": "VariableDeclaration",
														"scope": 1230,
														"src": "4696:9:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1120,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4696:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1123,
												"initialValue": {
													"id": 1122,
													"name": "ratio",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1112,
													"src": "4708:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4696:17:9"
											},
											{
												"assignments": [
													1125
												],
												"declarations": [
													{
														"constant": false,
														"id": 1125,
														"mutability": "mutable",
														"name": "msb",
														"nodeType": "VariableDeclaration",
														"scope": 1230,
														"src": "4723:11:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1124,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4723:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1127,
												"initialValue": {
													"hexValue": "30",
													"id": 1126,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4737:1:9",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4723:15:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "4758:139:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4772:58:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4785:1:9",
																		"type": "",
																		"value": "7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "4791:1:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4794:34:9",
																				"type": "",
																				"value": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4788:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4788:41:9"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "4781:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4781:49:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "4776:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4843:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "4853:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "4858:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "4850:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4850:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "4843:3:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4873:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "4882:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "4885:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "4878:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4878:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "4873:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1125,
														"isOffset": false,
														"isSlot": false,
														"src": "4843:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1125,
														"isOffset": false,
														"isSlot": false,
														"src": "4853:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "4791:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "4873:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "4885:1:9",
														"valueSize": 1
													}
												],
												"id": 1128,
												"nodeType": "InlineAssembly",
												"src": "4749:148:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "4915:123:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4929:42:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4942:1:9",
																		"type": "",
																		"value": "6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "4948:1:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4951:18:9",
																				"type": "",
																				"value": "0xFFFFFFFFFFFFFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4945:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4945:25:9"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "4938:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4938:33:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "4933:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4984:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "4994:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "4999:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "4991:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4991:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "4984:3:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5014:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5023:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5026:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5019:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5019:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5014:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1125,
														"isOffset": false,
														"isSlot": false,
														"src": "4984:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1125,
														"isOffset": false,
														"isSlot": false,
														"src": "4994:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "4948:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5014:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5026:1:9",
														"valueSize": 1
													}
												],
												"id": 1129,
												"nodeType": "InlineAssembly",
												"src": "4906:132:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5056:115:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5070:34:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5083:1:9",
																		"type": "",
																		"value": "5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5089:1:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5092:10:9",
																				"type": "",
																				"value": "0xFFFFFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5086:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5086:17:9"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5079:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5079:25:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5074:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5117:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5127:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5132:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5124:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5124:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5117:3:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5147:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5156:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5159:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5152:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5152:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5147:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1125,
														"isOffset": false,
														"isSlot": false,
														"src": "5117:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1125,
														"isOffset": false,
														"isSlot": false,
														"src": "5127:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5089:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5147:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5159:1:9",
														"valueSize": 1
													}
												],
												"id": 1130,
												"nodeType": "InlineAssembly",
												"src": "5047:124:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5189:111:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5203:30:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5216:1:9",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5222:1:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5225:6:9",
																				"type": "",
																				"value": "0xFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5219:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5219:13:9"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5212:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5212:21:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5207:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5246:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5256:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5261:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5253:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5253:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5246:3:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5276:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5285:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5288:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5281:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5281:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5276:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1125,
														"isOffset": false,
														"isSlot": false,
														"src": "5246:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1125,
														"isOffset": false,
														"isSlot": false,
														"src": "5256:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5222:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5276:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5288:1:9",
														"valueSize": 1
													}
												],
												"id": 1131,
												"nodeType": "InlineAssembly",
												"src": "5180:120:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5318:109:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5332:28:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5345:1:9",
																		"type": "",
																		"value": "3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5351:1:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5354:4:9",
																				"type": "",
																				"value": "0xFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5348:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5348:11:9"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5341:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5341:19:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5336:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5373:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5383:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5388:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5380:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5380:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5373:3:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5403:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5412:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5415:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5408:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5408:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5403:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1125,
														"isOffset": false,
														"isSlot": false,
														"src": "5373:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1125,
														"isOffset": false,
														"isSlot": false,
														"src": "5383:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5351:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5403:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5415:1:9",
														"valueSize": 1
													}
												],
												"id": 1132,
												"nodeType": "InlineAssembly",
												"src": "5309:118:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5445:108:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5459:27:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5472:1:9",
																		"type": "",
																		"value": "2"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5478:1:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5481:3:9",
																				"type": "",
																				"value": "0xF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5475:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5475:10:9"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5468:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5468:18:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5463:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5499:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5509:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5514:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5506:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5506:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5499:3:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5529:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5538:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5541:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5534:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5534:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5529:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1125,
														"isOffset": false,
														"isSlot": false,
														"src": "5499:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1125,
														"isOffset": false,
														"isSlot": false,
														"src": "5509:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5478:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5529:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5541:1:9",
														"valueSize": 1
													}
												],
												"id": 1133,
												"nodeType": "InlineAssembly",
												"src": "5436:117:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5571:108:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5585:27:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5598:1:9",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5604:1:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5607:3:9",
																				"type": "",
																				"value": "0x3"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5601:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5601:10:9"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5594:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5594:18:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5589:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5625:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5635:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5640:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5632:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5632:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5625:3:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5655:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5664:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5667:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5660:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5660:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5655:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1125,
														"isOffset": false,
														"isSlot": false,
														"src": "5625:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1125,
														"isOffset": false,
														"isSlot": false,
														"src": "5635:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5604:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5655:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5667:1:9",
														"valueSize": 1
													}
												],
												"id": 1134,
												"nodeType": "InlineAssembly",
												"src": "5562:117:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5697:73:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5711:19:9",
															"value": {
																"arguments": [
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5723:1:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5726:3:9",
																		"type": "",
																		"value": "0x1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5720:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5720:10:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5715:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5743:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5753:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5758:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5750:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5750:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5743:3:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1125,
														"isOffset": false,
														"isSlot": false,
														"src": "5743:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1125,
														"isOffset": false,
														"isSlot": false,
														"src": "5753:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5723:1:9",
														"valueSize": 1
													}
												],
												"id": 1135,
												"nodeType": "InlineAssembly",
												"src": "5688:82:9"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1138,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1136,
														"name": "msb",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1125,
														"src": "5784:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"hexValue": "313238",
														"id": 1137,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5791:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_128_by_1",
															"typeString": "int_const 128"
														},
														"value": "128"
													},
													"src": "5784:10:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"expression": {
														"id": 1155,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1148,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1121,
															"src": "5835:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1154,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1149,
																"name": "ratio",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1112,
																"src": "5839:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<<",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1152,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "313237",
																			"id": 1150,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5849:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_127_by_1",
																				"typeString": "int_const 127"
																			},
																			"value": "127"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 1151,
																			"name": "msb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1125,
																			"src": "5855:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5849:9:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1153,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5848:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5839:20:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "5835:24:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1156,
													"nodeType": "ExpressionStatement",
													"src": "5835:24:9"
												},
												"id": 1157,
												"nodeType": "IfStatement",
												"src": "5780:79:9",
												"trueBody": {
													"expression": {
														"id": 1146,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1139,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1121,
															"src": "5796:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1145,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1140,
																"name": "ratio",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1112,
																"src": "5800:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1143,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1141,
																			"name": "msb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1125,
																			"src": "5810:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "313237",
																			"id": 1142,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5816:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_127_by_1",
																				"typeString": "int_const 127"
																			},
																			"value": "127"
																		},
																		"src": "5810:9:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1144,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5809:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5800:20:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "5796:24:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1147,
													"nodeType": "ExpressionStatement",
													"src": "5796:24:9"
												}
											},
											{
												"assignments": [
													1159
												],
												"declarations": [
													{
														"constant": false,
														"id": 1159,
														"mutability": "mutable",
														"name": "log_2",
														"nodeType": "VariableDeclaration",
														"scope": 1230,
														"src": "5870:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 1158,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "5870:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1169,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 1168,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 1165,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 1162,
																			"name": "msb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1125,
																			"src": "5893:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1161,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5886:6:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 1160,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "5886:6:9",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1163,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5886:11:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 1164,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5900:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "5886:17:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 1166,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "5885:19:9",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"hexValue": "3634",
														"id": 1167,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5908:2:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_64_by_1",
															"typeString": "int_const 64"
														},
														"value": "64"
													},
													"src": "5885:25:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5870:40:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5930:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5944:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5953:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5962:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5965:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "5958:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5958:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5949:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5949:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5944:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5981:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5994:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5999:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5990:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5990:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5985:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6014:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6026:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6037:2:9",
																				"type": "",
																				"value": "63"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6041:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6033:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6033:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6023:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6023:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6014:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6057:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6066:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6069:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6062:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6062:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6057:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "6014:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "6026:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5944:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5962:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5965:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5999:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6057:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6069:1:9",
														"valueSize": 1
													}
												],
												"id": 1170,
												"nodeType": "InlineAssembly",
												"src": "5921:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6099:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6113:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6122:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6131:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6134:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6127:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6127:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6118:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6118:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6113:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6150:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6163:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6168:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6159:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6159:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6154:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6183:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6195:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6206:2:9",
																				"type": "",
																				"value": "62"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6210:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6202:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6202:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6192:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6192:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6183:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6226:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6235:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6238:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6231:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6231:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6226:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "6183:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "6195:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6113:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6131:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6134:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6168:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6226:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6238:1:9",
														"valueSize": 1
													}
												],
												"id": 1171,
												"nodeType": "InlineAssembly",
												"src": "6090:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6268:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6282:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6291:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6300:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6303:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6296:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6296:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6287:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6287:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6282:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6319:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6332:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6337:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6328:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6328:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6323:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6352:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6364:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6375:2:9",
																				"type": "",
																				"value": "61"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6379:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6371:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6371:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6361:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6361:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6352:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6395:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6404:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6407:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6400:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6400:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6395:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "6352:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "6364:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6282:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6300:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6303:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6337:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6395:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6407:1:9",
														"valueSize": 1
													}
												],
												"id": 1172,
												"nodeType": "InlineAssembly",
												"src": "6259:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6437:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6451:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6460:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6469:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6472:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6465:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6465:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6456:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6456:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6451:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6488:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6501:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6506:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6497:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6497:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6492:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6521:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6533:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6544:2:9",
																				"type": "",
																				"value": "60"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6548:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6540:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6540:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6530:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6530:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6521:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6564:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6573:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6576:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6569:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6569:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6564:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "6521:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "6533:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6451:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6469:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6472:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6506:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6564:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6576:1:9",
														"valueSize": 1
													}
												],
												"id": 1173,
												"nodeType": "InlineAssembly",
												"src": "6428:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6606:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6620:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6629:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6638:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6641:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6634:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6634:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6625:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6625:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6620:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6657:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6670:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6675:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6666:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6666:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6661:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6690:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6702:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6713:2:9",
																				"type": "",
																				"value": "59"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6717:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6709:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6709:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6699:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6699:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6690:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6733:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6742:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6745:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6738:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6738:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6733:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "6690:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "6702:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6620:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6638:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6641:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6675:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6733:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6745:1:9",
														"valueSize": 1
													}
												],
												"id": 1174,
												"nodeType": "InlineAssembly",
												"src": "6597:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6775:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6789:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6798:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6807:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6810:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6803:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6803:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6794:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6794:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6789:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6826:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6839:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6844:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6835:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6835:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6830:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6859:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6871:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6882:2:9",
																				"type": "",
																				"value": "58"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6886:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6878:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6878:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6868:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6868:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6859:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6902:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6911:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6914:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6907:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6907:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6902:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "6859:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "6871:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6789:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6807:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6810:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6844:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6902:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6914:1:9",
														"valueSize": 1
													}
												],
												"id": 1175,
												"nodeType": "InlineAssembly",
												"src": "6766:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6944:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6958:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6967:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6976:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6979:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6972:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6972:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6963:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6963:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6958:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6995:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7008:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7013:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7004:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7004:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6999:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7028:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7040:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7051:2:9",
																				"type": "",
																				"value": "57"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7055:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7047:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7047:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7037:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7037:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7028:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7071:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7080:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7083:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7076:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7076:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7071:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "7028:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "7040:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6958:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6976:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6979:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7013:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7071:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7083:1:9",
														"valueSize": 1
													}
												],
												"id": 1176,
												"nodeType": "InlineAssembly",
												"src": "6935:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7113:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7127:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7136:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7145:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7148:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7141:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7141:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7132:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7132:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7127:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7164:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7177:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7182:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7173:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7173:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7168:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7197:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7209:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7220:2:9",
																				"type": "",
																				"value": "56"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7224:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7216:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7216:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7206:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7206:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7197:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7240:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7249:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7252:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7245:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7245:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7240:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "7197:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "7209:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7127:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7145:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7148:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7182:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7240:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7252:1:9",
														"valueSize": 1
													}
												],
												"id": 1177,
												"nodeType": "InlineAssembly",
												"src": "7104:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7282:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7296:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7305:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7314:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7317:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7310:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7310:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7301:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7301:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7296:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7333:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7346:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7351:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7342:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7342:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7337:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7366:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7378:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7389:2:9",
																				"type": "",
																				"value": "55"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7393:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7385:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7385:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7375:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7375:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7366:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7409:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7418:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7421:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7414:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7414:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7409:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "7366:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "7378:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7296:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7314:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7317:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7351:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7409:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7421:1:9",
														"valueSize": 1
													}
												],
												"id": 1178,
												"nodeType": "InlineAssembly",
												"src": "7273:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7451:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7465:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7474:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7483:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7486:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7479:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7479:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7470:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7470:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7465:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7502:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7515:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7520:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7511:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7511:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7506:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7535:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7547:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7558:2:9",
																				"type": "",
																				"value": "54"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7562:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7554:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7554:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7544:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7544:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7535:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7578:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7587:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7590:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7583:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7583:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7578:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "7535:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "7547:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7465:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7483:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7486:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7520:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7578:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7590:1:9",
														"valueSize": 1
													}
												],
												"id": 1179,
												"nodeType": "InlineAssembly",
												"src": "7442:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7620:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7634:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7643:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7652:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7655:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7648:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7648:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7639:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7639:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7634:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7671:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7684:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7689:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7680:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7680:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7675:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7704:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7716:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7727:2:9",
																				"type": "",
																				"value": "53"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7731:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7723:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7723:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7713:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7713:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7704:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7747:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7756:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7759:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7752:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7752:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7747:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "7704:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "7716:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7634:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7652:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7655:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7689:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7747:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7759:1:9",
														"valueSize": 1
													}
												],
												"id": 1180,
												"nodeType": "InlineAssembly",
												"src": "7611:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7789:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7803:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7812:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7821:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7824:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7817:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7817:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7808:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7808:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7803:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7840:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7853:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7858:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7849:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7849:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7844:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7873:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7885:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7896:2:9",
																				"type": "",
																				"value": "52"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7900:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7892:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7892:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7882:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7882:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7873:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7916:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7925:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7928:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7921:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7921:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7916:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "7873:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "7885:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7803:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7821:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7824:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7858:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7916:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7928:1:9",
														"valueSize": 1
													}
												],
												"id": 1181,
												"nodeType": "InlineAssembly",
												"src": "7780:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7958:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7972:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7981:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7990:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7993:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7986:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7986:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7977:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7977:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7972:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8009:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8022:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "8027:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8018:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8018:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "8013:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8042:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "8054:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8065:2:9",
																				"type": "",
																				"value": "51"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "8069:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "8061:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8061:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "8051:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8051:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "8042:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8085:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "8094:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "8097:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8090:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8090:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "8085:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "8042:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "8054:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7972:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7990:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7993:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "8027:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "8085:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "8097:1:9",
														"valueSize": 1
													}
												],
												"id": 1182,
												"nodeType": "InlineAssembly",
												"src": "7949:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "8127:124:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8141:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8150:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "8159:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "8162:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "8155:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8155:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8146:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8146:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "8141:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8178:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8191:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "8196:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8187:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8187:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "8182:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8211:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "8223:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8234:2:9",
																				"type": "",
																				"value": "50"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "8238:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "8230:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8230:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "8220:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8220:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "8211:5:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "8211:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "8223:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "8141:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "8159:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "8162:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "8196:1:9",
														"valueSize": 1
													}
												],
												"id": 1183,
												"nodeType": "InlineAssembly",
												"src": "8118:133:9"
											},
											{
												"assignments": [
													1185
												],
												"declarations": [
													{
														"constant": false,
														"id": 1185,
														"mutability": "mutable",
														"name": "log_sqrt10001",
														"nodeType": "VariableDeclaration",
														"scope": 1230,
														"src": "8261:20:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 1184,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "8261:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1189,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 1188,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1186,
														"name": "log_2",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1159,
														"src": "8284:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"hexValue": "323535373338393538393939363033383236333437313431",
														"id": 1187,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8292:24:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_255738958999603826347141_by_1",
															"typeString": "int_const 255738958999603826347141"
														},
														"value": "255738958999603826347141"
													},
													"src": "8284:32:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8261:55:9"
											},
											{
												"assignments": [
													1191
												],
												"declarations": [
													{
														"constant": false,
														"id": 1191,
														"mutability": "mutable",
														"name": "tickLow",
														"nodeType": "VariableDeclaration",
														"scope": 1230,
														"src": "8345:13:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 1190,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8345:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1201,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															"id": 1199,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 1196,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1194,
																			"name": "log_sqrt10001",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1185,
																			"src": "8368:13:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "33343032393932393536383039313332343138353936313430313030363630323437323130",
																			"id": 1195,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8384:37:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3402992956809132418596140100660247210_by_1",
																				"typeString": "int_const 3402...(29 digits omitted)...7210"
																			},
																			"value": "3402992956809132418596140100660247210"
																		},
																		"src": "8368:53:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"id": 1197,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8367:55:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1198,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8426:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "8367:62:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														],
														"id": 1193,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "8361:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_int24_$",
															"typeString": "type(int24)"
														},
														"typeName": {
															"id": 1192,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8361:5:9",
															"typeDescriptions": {}
														}
													},
													"id": 1200,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8361:69:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8345:85:9"
											},
											{
												"assignments": [
													1203
												],
												"declarations": [
													{
														"constant": false,
														"id": 1203,
														"mutability": "mutable",
														"name": "tickHi",
														"nodeType": "VariableDeclaration",
														"scope": 1230,
														"src": "8440:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 1202,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8440:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1213,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															"id": 1211,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 1208,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1206,
																			"name": "log_sqrt10001",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1185,
																			"src": "8462:13:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"hexValue": "323931333339343634373731393839363232393037303237363231313533333938303838343935",
																			"id": 1207,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8478:39:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_291339464771989622907027621153398088495_by_1",
																				"typeString": "int_const 2913...(31 digits omitted)...8495"
																			},
																			"value": "291339464771989622907027621153398088495"
																		},
																		"src": "8462:55:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"id": 1209,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8461:57:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1210,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8522:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "8461:64:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														],
														"id": 1205,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "8455:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_int24_$",
															"typeString": "type(int24)"
														},
														"typeName": {
															"id": 1204,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8455:5:9",
															"typeDescriptions": {}
														}
													},
													"id": 1212,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8455:71:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8440:86:9"
											},
											{
												"expression": {
													"id": 1228,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1214,
														"name": "tick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1098,
														"src": "8537:4:9",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															},
															"id": 1217,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1215,
																"name": "tickLow",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1191,
																"src": "8544:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 1216,
																"name": "tickHi",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1203,
																"src": "8555:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"src": "8544:17:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseExpression": {
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 1223,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 1220,
																			"name": "tickHi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1203,
																			"src": "8593:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		],
																		"id": 1219,
																		"name": "getSqrtRatioAtTick",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1092,
																		"src": "8574:18:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_int24_$returns$_t_uint160_$",
																			"typeString": "function (int24) pure returns (uint160)"
																		}
																	},
																	"id": 1221,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8574:26:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"id": 1222,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1095,
																	"src": "8604:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "8574:42:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseExpression": {
																"id": 1225,
																"name": "tickLow",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1191,
																"src": "8628:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"id": 1226,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "Conditional",
															"src": "8574:61:9",
															"trueExpression": {
																"id": 1224,
																"name": "tickHi",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1203,
																"src": "8619:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"id": 1227,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "Conditional",
														"src": "8544:91:9",
														"trueExpression": {
															"id": 1218,
															"name": "tickLow",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1191,
															"src": "8564:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"src": "8537:98:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"id": 1229,
												"nodeType": "ExpressionStatement",
												"src": "8537:98:9"
											}
										]
									},
									"documentation": {
										"id": 1093,
										"nodeType": "StructuredDocumentation",
										"src": "3948:408:9",
										"text": "@notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n ever return.\n @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n @return tick The greatest tick for which the ratio is less than or equal to the input ratio"
									},
									"id": 1231,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getTickAtSqrtRatio",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1096,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1095,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 1231,
												"src": "4389:20:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1094,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4389:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4388:22:9"
									},
									"returnParameters": {
										"id": 1099,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1098,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 1231,
												"src": "4434:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1097,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "4434:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4433:12:9"
									},
									"scope": 1232,
									"src": "4361:4281:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1233,
							"src": "313:8331:9"
						}
					],
					"src": "45:8600:9"
				},
				"id": 9
			},
			"contracts/interfaces/IERC20.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							1324
						]
					},
					"id": 1325,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1234,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:10"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 1324,
							"linearizedBaseContracts": [
								1324
							],
							"name": "IERC20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"id": 1242,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1241,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1236,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 1242,
												"src": "96:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1235,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "96:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1238,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 1242,
												"src": "119:23:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1237,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "119:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1240,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 1242,
												"src": "144:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1239,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "144:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "95:60:10"
									},
									"src": "81:75:10"
								},
								{
									"anonymous": false,
									"id": 1250,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1249,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1244,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 1250,
												"src": "176:20:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1243,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "176:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1246,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 1250,
												"src": "198:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1245,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "198:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1248,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 1250,
												"src": "218:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1247,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "218:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "175:54:10"
									},
									"src": "161:69:10"
								},
								{
									"functionSelector": "06fdde03",
									"id": 1255,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1251,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "249:2:10"
									},
									"returnParameters": {
										"id": 1254,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1253,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1255,
												"src": "275:13:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1252,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "275:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "274:15:10"
									},
									"scope": 1324,
									"src": "236:54:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "95d89b41",
									"id": 1260,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1256,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "310:2:10"
									},
									"returnParameters": {
										"id": 1259,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1258,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1260,
												"src": "336:13:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1257,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "336:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "335:15:10"
									},
									"scope": 1324,
									"src": "295:56:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "313ce567",
									"id": 1265,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1261,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "373:2:10"
									},
									"returnParameters": {
										"id": 1264,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1263,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1265,
												"src": "399:5:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1262,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "399:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "398:7:10"
									},
									"scope": 1324,
									"src": "356:50:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "18160ddd",
									"id": 1270,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1266,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "431:2:10"
									},
									"returnParameters": {
										"id": 1269,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1268,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1270,
												"src": "457:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1267,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "457:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "456:6:10"
									},
									"scope": 1324,
									"src": "411:52:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "70a08231",
									"id": 1277,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1273,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1272,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 1277,
												"src": "487:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1271,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "487:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "486:15:10"
									},
									"returnParameters": {
										"id": 1276,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1275,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1277,
												"src": "525:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1274,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "525:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "524:6:10"
									},
									"scope": 1324,
									"src": "468:63:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "dd62ed3e",
									"id": 1286,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1282,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1279,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 1286,
												"src": "555:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1278,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "555:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1281,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 1286,
												"src": "570:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1280,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "570:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "554:32:10"
									},
									"returnParameters": {
										"id": 1285,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1284,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1286,
												"src": "610:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1283,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "610:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "609:6:10"
									},
									"scope": 1324,
									"src": "536:80:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "095ea7b3",
									"id": 1295,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1291,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1288,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 1295,
												"src": "639:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1287,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "639:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1290,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 1295,
												"src": "656:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1289,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "656:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "638:29:10"
									},
									"returnParameters": {
										"id": 1294,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1293,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1295,
												"src": "686:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1292,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "686:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "685:6:10"
									},
									"scope": 1324,
									"src": "622:70:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "a9059cbb",
									"id": 1304,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1300,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1297,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 1304,
												"src": "715:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1296,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "715:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1299,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 1304,
												"src": "727:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1298,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "727:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "714:24:10"
									},
									"returnParameters": {
										"id": 1303,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1302,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1304,
												"src": "757:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1301,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "757:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "756:6:10"
									},
									"scope": 1324,
									"src": "697:66:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "23b872dd",
									"id": 1315,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1311,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1306,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 1315,
												"src": "790:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1305,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "790:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1308,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 1315,
												"src": "804:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1307,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "804:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1310,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 1315,
												"src": "816:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1309,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "816:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "789:38:10"
									},
									"returnParameters": {
										"id": 1314,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1313,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1315,
												"src": "846:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1312,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "846:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "845:6:10"
									},
									"scope": 1324,
									"src": "768:84:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "d0e30db0",
									"id": 1318,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deposit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1316,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "873:2:10"
									},
									"returnParameters": {
										"id": 1317,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "892:0:10"
									},
									"scope": 1324,
									"src": "857:36:10",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "2e1a7d4d",
									"id": 1323,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "withdraw",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1321,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1320,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1323,
												"src": "916:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1319,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "916:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "915:6:10"
									},
									"returnParameters": {
										"id": 1322,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "930:0:10"
									},
									"scope": 1324,
									"src": "898:33:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1325,
							"src": "58:875:10"
						}
					],
					"src": "32:901:10"
				},
				"id": 10
			},
			"contracts/libraries/OracleLibrary.sol": {
				"ast": {
					"absolutePath": "contracts/libraries/OracleLibrary.sol",
					"exportedSymbols": {
						"FullMath": [
							697
						],
						"IUniswapV3Pool": [
							104
						],
						"IUniswapV3PoolActions": [
							200
						],
						"IUniswapV3PoolDerivedState": [
							231
						],
						"IUniswapV3PoolEvents": [
							350
						],
						"IUniswapV3PoolImmutables": [
							390
						],
						"IUniswapV3PoolOwnerActions": [
							416
						],
						"IUniswapV3PoolState": [
							524
						],
						"OracleLibrary": [
							1512
						],
						"TickMath": [
							1232
						]
					},
					"id": 1513,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1326,
							"literals": [
								"solidity",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "32:22:11"
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/libraries/FullMath.sol",
							"file": "@uniswap/v3-core/contracts/libraries/FullMath.sol",
							"id": 1327,
							"nodeType": "ImportDirective",
							"scope": 1513,
							"sourceUnit": 698,
							"src": "56:59:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/libraries/TickMath.sol",
							"file": "@uniswap/v3-core/contracts/libraries/TickMath.sol",
							"id": 1328,
							"nodeType": "ImportDirective",
							"scope": 1513,
							"sourceUnit": 1233,
							"src": "116:59:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol",
							"file": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol",
							"id": 1329,
							"nodeType": "ImportDirective",
							"scope": 1513,
							"sourceUnit": 105,
							"src": "176:66:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"fullyImplemented": true,
							"id": 1512,
							"linearizedBaseContracts": [
								1512
							],
							"name": "OracleLibrary",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1413,
										"nodeType": "Block",
										"src": "383:544:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															},
															"id": 1341,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1339,
																"name": "secondsAgo",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1333,
																"src": "401:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"hexValue": "30",
																"id": 1340,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "415:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "401:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4250",
															"id": 1342,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "418:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6f8c752f16a50d13ae873620fdefd90c2c58e0d13a068366e5a1b685076b71bb",
																"typeString": "literal_string \"BP\""
															},
															"value": "BP"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6f8c752f16a50d13ae873620fdefd90c2c58e0d13a068366e5a1b685076b71bb",
																"typeString": "literal_string \"BP\""
															}
														],
														"id": 1338,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "393:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1343,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "393:30:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1344,
												"nodeType": "ExpressionStatement",
												"src": "393:30:11"
											},
											{
												"assignments": [
													1349
												],
												"declarations": [
													{
														"constant": false,
														"id": 1349,
														"mutability": "mutable",
														"name": "secondsAgos",
														"nodeType": "VariableDeclaration",
														"scope": 1413,
														"src": "434:27:11",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint32_$dyn_memory_ptr",
															"typeString": "uint32[]"
														},
														"typeName": {
															"baseType": {
																"id": 1347,
																"name": "uint32",
																"nodeType": "ElementaryTypeName",
																"src": "434:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															},
															"id": 1348,
															"nodeType": "ArrayTypeName",
															"src": "434:8:11",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint32_$dyn_storage_ptr",
																"typeString": "uint32[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1355,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "32",
															"id": 1353,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "477:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															}
														],
														"id": 1352,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "464:12:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint32_$dyn_memory_ptr_$",
															"typeString": "function (uint256) pure returns (uint32[] memory)"
														},
														"typeName": {
															"baseType": {
																"id": 1350,
																"name": "uint32",
																"nodeType": "ElementaryTypeName",
																"src": "468:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															},
															"id": 1351,
															"nodeType": "ArrayTypeName",
															"src": "468:8:11",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint32_$dyn_storage_ptr",
																"typeString": "uint32[]"
															}
														}
													},
													"id": 1354,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "464:15:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint32_$dyn_memory_ptr",
														"typeString": "uint32[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "434:45:11"
											},
											{
												"expression": {
													"id": 1360,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1356,
															"name": "secondsAgos",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1349,
															"src": "489:11:11",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint32_$dyn_memory_ptr",
																"typeString": "uint32[] memory"
															}
														},
														"id": 1358,
														"indexExpression": {
															"hexValue": "30",
															"id": 1357,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "501:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "489:14:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1359,
														"name": "secondsAgo",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1333,
														"src": "506:10:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"src": "489:27:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"id": 1361,
												"nodeType": "ExpressionStatement",
												"src": "489:27:11"
											},
											{
												"expression": {
													"id": 1366,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1362,
															"name": "secondsAgos",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1349,
															"src": "526:11:11",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint32_$dyn_memory_ptr",
																"typeString": "uint32[] memory"
															}
														},
														"id": 1364,
														"indexExpression": {
															"hexValue": "31",
															"id": 1363,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "538:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "526:14:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 1365,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "543:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "526:18:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"id": 1367,
												"nodeType": "ExpressionStatement",
												"src": "526:18:11"
											},
											{
												"assignments": [
													1372,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 1372,
														"mutability": "mutable",
														"name": "tickCumulatives",
														"nodeType": "VariableDeclaration",
														"scope": 1413,
														"src": "556:30:11",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_int56_$dyn_memory_ptr",
															"typeString": "int56[]"
														},
														"typeName": {
															"baseType": {
																"id": 1370,
																"name": "int56",
																"nodeType": "ElementaryTypeName",
																"src": "556:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_int56",
																	"typeString": "int56"
																}
															},
															"id": 1371,
															"nodeType": "ArrayTypeName",
															"src": "556:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_int56_$dyn_storage_ptr",
																"typeString": "int56[]"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 1379,
												"initialValue": {
													"arguments": [
														{
															"id": 1377,
															"name": "secondsAgos",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1349,
															"src": "633:11:11",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint32_$dyn_memory_ptr",
																"typeString": "uint32[] memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_array$_t_uint32_$dyn_memory_ptr",
																"typeString": "uint32[] memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1374,
																	"name": "pool",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1331,
																	"src": "619:4:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1373,
																"name": "IUniswapV3Pool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 104,
																"src": "604:14:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IUniswapV3Pool_$104_$",
																	"typeString": "type(contract IUniswapV3Pool)"
																}
															},
															"id": 1375,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "604:20:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IUniswapV3Pool_$104",
																"typeString": "contract IUniswapV3Pool"
															}
														},
														"id": 1376,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "observe",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 216,
														"src": "604:28:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_array$_t_uint32_$dyn_memory_ptr_$returns$_t_array$_t_int56_$dyn_memory_ptr_$_t_array$_t_uint160_$dyn_memory_ptr_$",
															"typeString": "function (uint32[] memory) view external returns (int56[] memory,uint160[] memory)"
														}
													},
													"id": 1378,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "604:41:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_array$_t_int56_$dyn_memory_ptr_$_t_array$_t_uint160_$dyn_memory_ptr_$",
														"typeString": "tuple(int56[] memory,uint160[] memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "555:90:11"
											},
											{
												"assignments": [
													1381
												],
												"declarations": [
													{
														"constant": false,
														"id": 1381,
														"mutability": "mutable",
														"name": "tickCumulativesDelta",
														"nodeType": "VariableDeclaration",
														"scope": 1413,
														"src": "656:26:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int56",
															"typeString": "int56"
														},
														"typeName": {
															"id": 1380,
															"name": "int56",
															"nodeType": "ElementaryTypeName",
															"src": "656:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_int56",
																"typeString": "int56"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1389,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													},
													"id": 1388,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"id": 1382,
															"name": "tickCumulatives",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1372,
															"src": "685:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_int56_$dyn_memory_ptr",
																"typeString": "int56[] memory"
															}
														},
														"id": 1384,
														"indexExpression": {
															"hexValue": "31",
															"id": 1383,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "701:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "685:18:11",
														"typeDescriptions": {
															"typeIdentifier": "t_int56",
															"typeString": "int56"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"baseExpression": {
															"id": 1385,
															"name": "tickCumulatives",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1372,
															"src": "706:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_int56_$dyn_memory_ptr",
																"typeString": "int56[] memory"
															}
														},
														"id": 1387,
														"indexExpression": {
															"hexValue": "30",
															"id": 1386,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "722:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "706:18:11",
														"typeDescriptions": {
															"typeIdentifier": "t_int56",
															"typeString": "int56"
														}
													},
													"src": "685:39:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "656:68:11"
											},
											{
												"expression": {
													"id": 1397,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1390,
														"name": "tick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1336,
														"src": "737:4:11",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_int56",
																	"typeString": "int56"
																},
																"id": 1395,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1393,
																	"name": "tickCumulativesDelta",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1381,
																	"src": "750:20:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int56",
																		"typeString": "int56"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 1394,
																	"name": "secondsAgo",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1333,
																	"src": "773:10:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	}
																},
																"src": "750:33:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_int56",
																	"typeString": "int56"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int56",
																	"typeString": "int56"
																}
															],
															"id": 1392,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "744:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_int24_$",
																"typeString": "type(int24)"
															},
															"typeName": {
																"id": 1391,
																"name": "int24",
																"nodeType": "ElementaryTypeName",
																"src": "744:5:11",
																"typeDescriptions": {}
															}
														},
														"id": 1396,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "744:40:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"src": "737:47:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"id": 1398,
												"nodeType": "ExpressionStatement",
												"src": "737:47:11"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1408,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_int56",
															"typeString": "int56"
														},
														"id": 1401,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1399,
															"name": "tickCumulativesDelta",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1381,
															"src": "843:20:11",
															"typeDescriptions": {
																"typeIdentifier": "t_int56",
																"typeString": "int56"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"hexValue": "30",
															"id": 1400,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "866:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "843:24:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int56",
																	"typeString": "int56"
																},
																"id": 1406,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_int56",
																		"typeString": "int56"
																	},
																	"id": 1404,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1402,
																		"name": "tickCumulativesDelta",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1381,
																		"src": "872:20:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int56",
																			"typeString": "int56"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 1403,
																		"name": "secondsAgo",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1333,
																		"src": "895:10:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint32",
																			"typeString": "uint32"
																		}
																	},
																	"src": "872:33:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int56",
																		"typeString": "int56"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1405,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "909:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "872:38:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															}
														],
														"id": 1407,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "871:40:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "843:68:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1412,
												"nodeType": "IfStatement",
												"src": "839:80:11",
												"trueBody": {
													"expression": {
														"id": 1410,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": false,
														"src": "913:6:11",
														"subExpression": {
															"id": 1409,
															"name": "tick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1336,
															"src": "913:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"id": 1411,
													"nodeType": "ExpressionStatement",
													"src": "913:6:11"
												}
											}
										]
									},
									"id": 1414,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "consult",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1334,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1331,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 1414,
												"src": "287:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1330,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "287:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1333,
												"mutability": "mutable",
												"name": "secondsAgo",
												"nodeType": "VariableDeclaration",
												"scope": 1414,
												"src": "301:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 1332,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "301:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "286:33:11"
									},
									"returnParameters": {
										"id": 1337,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1336,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 1414,
												"src": "367:10:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1335,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "367:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "366:12:11"
									},
									"scope": 1512,
									"src": "270:657:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1510,
										"nodeType": "Block",
										"src": "1111:778:11",
										"statements": [
											{
												"assignments": [
													1428
												],
												"declarations": [
													{
														"constant": false,
														"id": 1428,
														"mutability": "mutable",
														"name": "sqrtRatioX96",
														"nodeType": "VariableDeclaration",
														"scope": 1510,
														"src": "1121:20:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														},
														"typeName": {
															"id": 1427,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "1121:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1433,
												"initialValue": {
													"arguments": [
														{
															"id": 1431,
															"name": "tick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1416,
															"src": "1172:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														],
														"expression": {
															"id": 1429,
															"name": "TickMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1232,
															"src": "1144:8:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_TickMath_$1232_$",
																"typeString": "type(library TickMath)"
															}
														},
														"id": 1430,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "getSqrtRatioAtTick",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1092,
														"src": "1144:27:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_int24_$returns$_t_uint160_$",
															"typeString": "function (int24) pure returns (uint160)"
														}
													},
													"id": 1432,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1144:33:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1121:56:11"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 1440,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1434,
														"name": "sqrtRatioX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1428,
														"src": "1296:12:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1437,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1317:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint128_$",
																		"typeString": "type(uint128)"
																	},
																	"typeName": {
																		"id": 1436,
																		"name": "uint128",
																		"nodeType": "ElementaryTypeName",
																		"src": "1317:7:11",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint128_$",
																		"typeString": "type(uint128)"
																	}
																],
																"id": 1435,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "1312:4:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 1438,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1312:13:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint128",
																"typeString": "type(uint128)"
															}
														},
														"id": 1439,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "1312:17:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														}
													},
													"src": "1296:33:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1508,
													"nodeType": "Block",
													"src": "1602:281:11",
													"statements": [
														{
															"assignments": [
																1475
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1475,
																	"mutability": "mutable",
																	"name": "ratioX128",
																	"nodeType": "VariableDeclaration",
																	"scope": 1508,
																	"src": "1616:17:11",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1474,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1616:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1484,
															"initialValue": {
																"arguments": [
																	{
																		"id": 1478,
																		"name": "sqrtRatioX96",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1428,
																		"src": "1652:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	},
																	{
																		"id": 1479,
																		"name": "sqrtRatioX96",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1428,
																		"src": "1666:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	},
																	{
																		"commonType": {
																			"typeIdentifier": "t_rational_18446744073709551616_by_1",
																			"typeString": "int_const 18446744073709551616"
																		},
																		"id": 1482,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "31",
																			"id": 1480,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1680:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<<",
																		"rightExpression": {
																			"hexValue": "3634",
																			"id": 1481,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1685:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "1680:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_18446744073709551616_by_1",
																			"typeString": "int_const 18446744073709551616"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		},
																		{
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		},
																		{
																			"typeIdentifier": "t_rational_18446744073709551616_by_1",
																			"typeString": "int_const 18446744073709551616"
																		}
																	],
																	"expression": {
																		"id": 1476,
																		"name": "FullMath",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 697,
																		"src": "1636:8:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_FullMath_$697_$",
																			"typeString": "type(library FullMath)"
																		}
																	},
																	"id": 1477,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "mulDiv",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 653,
																	"src": "1636:15:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																	}
																},
																"id": 1483,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1636:52:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "1616:72:11"
														},
														{
															"expression": {
																"id": 1506,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1485,
																	"name": "quoteAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1425,
																	"src": "1702:11:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		"id": 1488,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1486,
																			"name": "baseToken",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1420,
																			"src": "1716:9:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"id": 1487,
																			"name": "quoteToken",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1422,
																			"src": "1728:10:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"src": "1716:22:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseExpression": {
																		"arguments": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_rational_340282366920938463463374607431768211456_by_1",
																					"typeString": "int_const 3402...(31 digits omitted)...1456"
																				},
																				"id": 1501,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"leftExpression": {
																					"hexValue": "31",
																					"id": 1499,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "1840:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1_by_1",
																						"typeString": "int_const 1"
																					},
																					"value": "1"
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<<",
																				"rightExpression": {
																					"hexValue": "313238",
																					"id": 1500,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "1845:3:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_128_by_1",
																						"typeString": "int_const 128"
																					},
																					"value": "128"
																				},
																				"src": "1840:8:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_340282366920938463463374607431768211456_by_1",
																					"typeString": "int_const 3402...(31 digits omitted)...1456"
																				}
																			},
																			{
																				"id": 1502,
																				"name": "baseAmount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1418,
																				"src": "1850:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				}
																			},
																			{
																				"id": 1503,
																				"name": "ratioX128",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1475,
																				"src": "1862:9:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_340282366920938463463374607431768211456_by_1",
																					"typeString": "int_const 3402...(31 digits omitted)...1456"
																				},
																				{
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 1497,
																				"name": "FullMath",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 697,
																				"src": "1824:8:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_FullMath_$697_$",
																					"typeString": "type(library FullMath)"
																				}
																			},
																			"id": 1498,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "mulDiv",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 653,
																			"src": "1824:15:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																			}
																		},
																		"id": 1504,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1824:48:11",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1505,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "Conditional",
																	"src": "1716:156:11",
																	"trueExpression": {
																		"arguments": [
																			{
																				"id": 1491,
																				"name": "ratioX128",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1475,
																				"src": "1773:9:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"id": 1492,
																				"name": "baseAmount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1418,
																				"src": "1784:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_rational_340282366920938463463374607431768211456_by_1",
																					"typeString": "int_const 3402...(31 digits omitted)...1456"
																				},
																				"id": 1495,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"leftExpression": {
																					"hexValue": "31",
																					"id": 1493,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "1796:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1_by_1",
																						"typeString": "int_const 1"
																					},
																					"value": "1"
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<<",
																				"rightExpression": {
																					"hexValue": "313238",
																					"id": 1494,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "1801:3:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_128_by_1",
																						"typeString": "int_const 128"
																					},
																					"value": "128"
																				},
																				"src": "1796:8:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_340282366920938463463374607431768211456_by_1",
																					"typeString": "int_const 3402...(31 digits omitted)...1456"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				},
																				{
																					"typeIdentifier": "t_rational_340282366920938463463374607431768211456_by_1",
																					"typeString": "int_const 3402...(31 digits omitted)...1456"
																				}
																			],
																			"expression": {
																				"id": 1489,
																				"name": "FullMath",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 697,
																				"src": "1757:8:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_FullMath_$697_$",
																					"typeString": "type(library FullMath)"
																				}
																			},
																			"id": 1490,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "mulDiv",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 653,
																			"src": "1757:15:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																			}
																		},
																		"id": 1496,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1757:48:11",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1702:170:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1507,
															"nodeType": "ExpressionStatement",
															"src": "1702:170:11"
														}
													]
												},
												"id": 1509,
												"nodeType": "IfStatement",
												"src": "1292:591:11",
												"trueBody": {
													"id": 1473,
													"nodeType": "Block",
													"src": "1331:265:11",
													"statements": [
														{
															"assignments": [
																1442
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1442,
																	"mutability": "mutable",
																	"name": "ratioX192",
																	"nodeType": "VariableDeclaration",
																	"scope": 1473,
																	"src": "1345:17:11",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1441,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1345:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1449,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1448,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 1445,
																			"name": "sqrtRatioX96",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1428,
																			"src": "1373:12:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		],
																		"id": 1444,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "1365:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 1443,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "1365:7:11",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1446,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1365:21:11",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1447,
																	"name": "sqrtRatioX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1428,
																	"src": "1389:12:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "1365:36:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "1345:56:11"
														},
														{
															"expression": {
																"id": 1471,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1450,
																	"name": "quoteAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1425,
																	"src": "1415:11:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		"id": 1453,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1451,
																			"name": "baseToken",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1420,
																			"src": "1429:9:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"id": 1452,
																			"name": "quoteToken",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1422,
																			"src": "1441:10:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"src": "1429:22:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseExpression": {
																		"arguments": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_rational_6277101735386680763835789423207666416102355444464034512896_by_1",
																					"typeString": "int_const 6277...(50 digits omitted)...2896"
																				},
																				"id": 1466,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"leftExpression": {
																					"hexValue": "31",
																					"id": 1464,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "1553:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1_by_1",
																						"typeString": "int_const 1"
																					},
																					"value": "1"
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<<",
																				"rightExpression": {
																					"hexValue": "313932",
																					"id": 1465,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "1558:3:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_192_by_1",
																						"typeString": "int_const 192"
																					},
																					"value": "192"
																				},
																				"src": "1553:8:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_6277101735386680763835789423207666416102355444464034512896_by_1",
																					"typeString": "int_const 6277...(50 digits omitted)...2896"
																				}
																			},
																			{
																				"id": 1467,
																				"name": "baseAmount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1418,
																				"src": "1563:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				}
																			},
																			{
																				"id": 1468,
																				"name": "ratioX192",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1442,
																				"src": "1575:9:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_6277101735386680763835789423207666416102355444464034512896_by_1",
																					"typeString": "int_const 6277...(50 digits omitted)...2896"
																				},
																				{
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 1462,
																				"name": "FullMath",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 697,
																				"src": "1537:8:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_FullMath_$697_$",
																					"typeString": "type(library FullMath)"
																				}
																			},
																			"id": 1463,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "mulDiv",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 653,
																			"src": "1537:15:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																			}
																		},
																		"id": 1469,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1537:48:11",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1470,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "Conditional",
																	"src": "1429:156:11",
																	"trueExpression": {
																		"arguments": [
																			{
																				"id": 1456,
																				"name": "ratioX192",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1442,
																				"src": "1486:9:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"id": 1457,
																				"name": "baseAmount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1418,
																				"src": "1497:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_rational_6277101735386680763835789423207666416102355444464034512896_by_1",
																					"typeString": "int_const 6277...(50 digits omitted)...2896"
																				},
																				"id": 1460,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"leftExpression": {
																					"hexValue": "31",
																					"id": 1458,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "1509:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1_by_1",
																						"typeString": "int_const 1"
																					},
																					"value": "1"
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<<",
																				"rightExpression": {
																					"hexValue": "313932",
																					"id": 1459,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "1514:3:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_192_by_1",
																						"typeString": "int_const 192"
																					},
																					"value": "192"
																				},
																				"src": "1509:8:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_6277101735386680763835789423207666416102355444464034512896_by_1",
																					"typeString": "int_const 6277...(50 digits omitted)...2896"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				},
																				{
																					"typeIdentifier": "t_rational_6277101735386680763835789423207666416102355444464034512896_by_1",
																					"typeString": "int_const 6277...(50 digits omitted)...2896"
																				}
																			],
																			"expression": {
																				"id": 1454,
																				"name": "FullMath",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 697,
																				"src": "1470:8:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_FullMath_$697_$",
																					"typeString": "type(library FullMath)"
																				}
																			},
																			"id": 1455,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "mulDiv",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 653,
																			"src": "1470:15:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																			}
																		},
																		"id": 1461,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1470:48:11",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1415:170:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1472,
															"nodeType": "ExpressionStatement",
															"src": "1415:170:11"
														}
													]
												}
											}
										]
									},
									"id": 1511,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getQuoteAtTick",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1423,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1416,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 1511,
												"src": "967:10:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1415,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "967:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1418,
												"mutability": "mutable",
												"name": "baseAmount",
												"nodeType": "VariableDeclaration",
												"scope": 1511,
												"src": "987:18:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1417,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "987:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1420,
												"mutability": "mutable",
												"name": "baseToken",
												"nodeType": "VariableDeclaration",
												"scope": 1511,
												"src": "1015:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1419,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1015:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1422,
												"mutability": "mutable",
												"name": "quoteToken",
												"nodeType": "VariableDeclaration",
												"scope": 1511,
												"src": "1042:18:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1421,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1042:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "957:109:11"
									},
									"returnParameters": {
										"id": 1426,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1425,
												"mutability": "mutable",
												"name": "quoteAmount",
												"nodeType": "VariableDeclaration",
												"scope": 1511,
												"src": "1090:19:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1424,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1090:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1089:21:11"
									},
									"scope": 1512,
									"src": "934:955:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1513,
							"src": "244:1647:11"
						}
					],
					"src": "32:1860:11"
				},
				"id": 11
			},
			"contracts/libraries/UniswapV3.sol": {
				"ast": {
					"absolutePath": "contracts/libraries/UniswapV3.sol",
					"exportedSymbols": {
						"FullMath": [
							697
						],
						"IERC20": [
							1324
						],
						"IUniswapV3Factory": [
							82
						],
						"IUniswapV3Pool": [
							104
						],
						"IUniswapV3PoolActions": [
							200
						],
						"IUniswapV3PoolDerivedState": [
							231
						],
						"IUniswapV3PoolEvents": [
							350
						],
						"IUniswapV3PoolImmutables": [
							390
						],
						"IUniswapV3PoolOwnerActions": [
							416
						],
						"IUniswapV3PoolState": [
							524
						],
						"OracleLibrary": [
							1512
						],
						"TickMath": [
							1232
						],
						"UniswapV3": [
							1776
						]
					},
					"id": 1777,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1514,
							"literals": [
								"solidity",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "32:22:12"
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol",
							"file": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol",
							"id": 1515,
							"nodeType": "ImportDirective",
							"scope": 1777,
							"sourceUnit": 105,
							"src": "56:66:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol",
							"file": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol",
							"id": 1516,
							"nodeType": "ImportDirective",
							"scope": 1777,
							"sourceUnit": 83,
							"src": "123:69:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/libraries/OracleLibrary.sol",
							"file": "./OracleLibrary.sol",
							"id": 1517,
							"nodeType": "ImportDirective",
							"scope": 1777,
							"sourceUnit": 1513,
							"src": "193:29:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/IERC20.sol",
							"file": "../interfaces/IERC20.sol",
							"id": 1518,
							"nodeType": "ImportDirective",
							"scope": 1777,
							"sourceUnit": 1325,
							"src": "224:34:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"fullyImplemented": true,
							"id": 1776,
							"linearizedBaseContracts": [
								1776
							],
							"name": "UniswapV3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1682,
										"nodeType": "Block",
										"src": "391:829:12",
										"statements": [
											{
												"assignments": [
													1536
												],
												"declarations": [
													{
														"constant": false,
														"id": 1536,
														"mutability": "mutable",
														"name": "fees",
														"nodeType": "VariableDeclaration",
														"scope": 1682,
														"src": "401:21:12",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint16_$4_memory_ptr",
															"typeString": "uint16[4]"
														},
														"typeName": {
															"baseType": {
																"id": 1534,
																"name": "uint16",
																"nodeType": "ElementaryTypeName",
																"src": "401:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint16",
																	"typeString": "uint16"
																}
															},
															"id": 1535,
															"length": {
																"hexValue": "34",
																"id": 1533,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "408:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_4_by_1",
																	"typeString": "int_const 4"
																},
																"value": "4"
															},
															"nodeType": "ArrayTypeName",
															"src": "401:9:12",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint16_$4_storage_ptr",
																"typeString": "uint16[4]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1542,
												"initialValue": {
													"components": [
														{
															"hexValue": "313030",
															"id": 1537,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "426:3:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_100_by_1",
																"typeString": "int_const 100"
															},
															"value": "100"
														},
														{
															"hexValue": "353030",
															"id": 1538,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "430:3:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_500_by_1",
																"typeString": "int_const 500"
															},
															"value": "500"
														},
														{
															"hexValue": "33303030",
															"id": 1539,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "434:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_3000_by_1",
																"typeString": "int_const 3000"
															},
															"value": "3000"
														},
														{
															"hexValue": "3130303030",
															"id": 1540,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "439:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_10000_by_1",
																"typeString": "int_const 10000"
															},
															"value": "10000"
														}
													],
													"id": 1541,
													"isConstant": false,
													"isInlineArray": true,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "425:20:12",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint16_$4_memory_ptr",
														"typeString": "uint16[4] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "401:44:12"
											},
											{
												"body": {
													"id": 1676,
													"nodeType": "Block",
													"src": "477:709:12",
													"statements": [
														{
															"assignments": [
																1554
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1554,
																	"mutability": "mutable",
																	"name": "pool",
																	"nodeType": "VariableDeclaration",
																	"scope": 1676,
																	"src": "487:12:12",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"typeName": {
																		"id": 1553,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "487:7:12",
																		"stateMutability": "nonpayable",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1565,
															"initialValue": {
																"arguments": [
																	{
																		"id": 1559,
																		"name": "t0",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1522,
																		"src": "537:2:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1560,
																		"name": "t1",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1524,
																		"src": "540:2:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"baseExpression": {
																			"id": 1561,
																			"name": "fees",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1536,
																			"src": "543:4:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_uint16_$4_memory_ptr",
																				"typeString": "uint16[4] memory"
																			}
																		},
																		"id": 1563,
																		"indexExpression": {
																			"id": 1562,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1544,
																			"src": "548:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "543:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint16",
																			"typeString": "uint16"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint16",
																			"typeString": "uint16"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1556,
																				"name": "factory",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1520,
																				"src": "520:7:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1555,
																			"name": "IUniswapV3Factory",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 82,
																			"src": "502:17:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IUniswapV3Factory_$82_$",
																				"typeString": "type(contract IUniswapV3Factory)"
																			}
																		},
																		"id": 1557,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "502:26:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IUniswapV3Factory_$82",
																			"typeString": "contract IUniswapV3Factory"
																		}
																	},
																	"id": 1558,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "getPool",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 55,
																	"src": "502:34:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$_t_uint24_$returns$_t_address_$",
																		"typeString": "function (address,address,uint24) view external returns (address)"
																	}
																},
																"id": 1564,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "502:49:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "487:64:12"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 1571,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1566,
																	"name": "pool",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1554,
																	"src": "565:4:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"arguments": [
																		{
																			"hexValue": "30",
																			"id": 1569,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "581:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			}
																		],
																		"id": 1568,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "573:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1567,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "573:7:12",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1570,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "573:10:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																"src": "565:18:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1573,
															"nodeType": "IfStatement",
															"src": "561:32:12",
															"trueBody": {
																"id": 1572,
																"nodeType": "Continue",
																"src": "585:8:12"
															}
														},
														{
															"assignments": [
																1575
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1575,
																	"mutability": "mutable",
																	"name": "d0",
																	"nodeType": "VariableDeclaration",
																	"scope": 1676,
																	"src": "613:8:12",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	"typeName": {
																		"id": 1574,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "613:5:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1581,
															"initialValue": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1577,
																				"name": "t0",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1522,
																				"src": "631:2:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1576,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1324,
																			"src": "624:6:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$1324_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1578,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "624:10:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$1324",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1579,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "decimals",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1265,
																	"src": "624:19:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$__$returns$_t_uint8_$",
																		"typeString": "function () view external returns (uint8)"
																	}
																},
																"id": 1580,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "624:21:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "613:32:12"
														},
														{
															"assignments": [
																1583
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1583,
																	"mutability": "mutable",
																	"name": "d1",
																	"nodeType": "VariableDeclaration",
																	"scope": 1676,
																	"src": "655:8:12",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	"typeName": {
																		"id": 1582,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "655:5:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1589,
															"initialValue": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1585,
																				"name": "t1",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1524,
																				"src": "673:2:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1584,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1324,
																			"src": "666:6:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$1324_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1586,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "666:10:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$1324",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1587,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "decimals",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1265,
																	"src": "666:19:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$__$returns$_t_uint8_$",
																		"typeString": "function () view external returns (uint8)"
																	}
																},
																"id": 1588,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "666:21:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "655:32:12"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1599,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 1594,
																			"name": "pool",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1554,
																			"src": "731:4:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"expression": {
																			"arguments": [
																				{
																					"id": 1591,
																					"name": "t0",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1522,
																					"src": "717:2:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 1590,
																				"name": "IERC20",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1324,
																				"src": "710:6:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_IERC20_$1324_$",
																					"typeString": "type(contract IERC20)"
																				}
																			},
																			"id": 1592,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "710:10:12",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$1324",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 1593,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "balanceOf",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1277,
																		"src": "710:20:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
																			"typeString": "function (address) view external returns (uint256)"
																		}
																	},
																	"id": 1595,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "710:26:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1598,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"hexValue": "3130",
																		"id": 1596,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "739:2:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_10_by_1",
																			"typeString": "int_const 10"
																		},
																		"value": "10"
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "**",
																	"rightExpression": {
																		"id": 1597,
																		"name": "d0",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1575,
																		"src": "743:2:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"src": "739:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "710:35:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1601,
															"nodeType": "IfStatement",
															"src": "706:49:12",
															"trueBody": {
																"id": 1600,
																"nodeType": "Continue",
																"src": "747:8:12"
															}
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1611,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 1606,
																			"name": "pool",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1554,
																			"src": "791:4:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"expression": {
																			"arguments": [
																				{
																					"id": 1603,
																					"name": "t1",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1524,
																					"src": "777:2:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 1602,
																				"name": "IERC20",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1324,
																				"src": "770:6:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_IERC20_$1324_$",
																					"typeString": "type(contract IERC20)"
																				}
																			},
																			"id": 1604,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "770:10:12",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$1324",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 1605,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "balanceOf",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1277,
																		"src": "770:20:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
																			"typeString": "function (address) view external returns (uint256)"
																		}
																	},
																	"id": 1607,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "770:26:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1610,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"hexValue": "3130",
																		"id": 1608,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "799:2:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_10_by_1",
																			"typeString": "int_const 10"
																		},
																		"value": "10"
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "**",
																	"rightExpression": {
																		"id": 1609,
																		"name": "d1",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1583,
																		"src": "803:2:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"src": "799:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "770:35:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1613,
															"nodeType": "IfStatement",
															"src": "766:49:12",
															"trueBody": {
																"id": 1612,
																"nodeType": "Continue",
																"src": "807:8:12"
															}
														},
														{
															"assignments": [
																1615
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1615,
																	"mutability": "mutable",
																	"name": "tick",
																	"nodeType": "VariableDeclaration",
																	"scope": 1676,
																	"src": "828:10:12",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	},
																	"typeName": {
																		"id": 1614,
																		"name": "int24",
																		"nodeType": "ElementaryTypeName",
																		"src": "828:5:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1621,
															"initialValue": {
																"arguments": [
																	{
																		"id": 1618,
																		"name": "pool",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1554,
																		"src": "863:4:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"hexValue": "31",
																		"id": 1619,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "868:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		}
																	],
																	"expression": {
																		"id": 1616,
																		"name": "OracleLibrary",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1512,
																		"src": "841:13:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_OracleLibrary_$1512_$",
																			"typeString": "type(library OracleLibrary)"
																		}
																	},
																	"id": 1617,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "consult",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1414,
																	"src": "841:21:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$_t_uint32_$returns$_t_int24_$",
																		"typeString": "function (address,uint32) view returns (int24)"
																	}
																},
																"id": 1620,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "841:29:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "828:42:12"
														},
														{
															"assignments": [
																1623
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1623,
																	"mutability": "mutable",
																	"name": "amountOut",
																	"nodeType": "VariableDeclaration",
																	"scope": 1676,
																	"src": "880:17:12",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1622,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "880:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1636,
															"initialValue": {
																"arguments": [
																	{
																		"id": 1626,
																		"name": "tick",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1615,
																		"src": "929:4:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1631,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"hexValue": "3130",
																					"id": 1629,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "942:2:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_10_by_1",
																						"typeString": "int_const 10"
																					},
																					"value": "10"
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "**",
																				"rightExpression": {
																					"id": 1630,
																					"name": "d0",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1575,
																					"src": "946:2:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint8",
																						"typeString": "uint8"
																					}
																				},
																				"src": "942:6:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1628,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "934:7:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint128_$",
																				"typeString": "type(uint128)"
																			},
																			"typeName": {
																				"id": 1627,
																				"name": "uint128",
																				"nodeType": "ElementaryTypeName",
																				"src": "934:7:12",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1632,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "934:15:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		}
																	},
																	{
																		"id": 1633,
																		"name": "t0",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1522,
																		"src": "950:2:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1634,
																		"name": "t1",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1524,
																		"src": "953:2:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		},
																		{
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"expression": {
																		"id": 1624,
																		"name": "OracleLibrary",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1512,
																		"src": "900:13:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_OracleLibrary_$1512_$",
																			"typeString": "type(library OracleLibrary)"
																		}
																	},
																	"id": 1625,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "getQuoteAtTick",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1511,
																	"src": "900:28:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_int24_$_t_uint128_$_t_address_$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (int24,uint128,address,address) pure returns (uint256)"
																	}
																},
																"id": 1635,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "900:56:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "880:76:12"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																"id": 1639,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1637,
																	"name": "i",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1544,
																	"src": "970:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1638,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "975:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "970:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1651,
															"nodeType": "IfStatement",
															"src": "966:80:12",
															"trueBody": {
																"id": 1650,
																"nodeType": "Block",
																"src": "977:69:12",
																"statements": [
																	{
																		"expression": {
																			"id": 1642,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 1640,
																				"name": "price",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1527,
																				"src": "991:5:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 1641,
																				"name": "amountOut",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1623,
																				"src": "999:9:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "991:17:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1643,
																		"nodeType": "ExpressionStatement",
																		"src": "991:17:12"
																	},
																	{
																		"expression": {
																			"id": 1648,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 1644,
																				"name": "fee",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1529,
																				"src": "1022:3:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint24",
																					"typeString": "uint24"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"baseExpression": {
																					"id": 1645,
																					"name": "fees",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1536,
																					"src": "1028:4:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_uint16_$4_memory_ptr",
																						"typeString": "uint16[4] memory"
																					}
																				},
																				"id": 1647,
																				"indexExpression": {
																					"id": 1646,
																					"name": "i",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1544,
																					"src": "1033:1:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint8",
																						"typeString": "uint8"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "1028:7:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint16",
																					"typeString": "uint16"
																				}
																			},
																			"src": "1022:13:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint24",
																				"typeString": "uint24"
																			}
																		},
																		"id": 1649,
																		"nodeType": "ExpressionStatement",
																		"src": "1022:13:12"
																	}
																]
															}
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 1663,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	"id": 1654,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1652,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1544,
																		"src": "1059:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 1653,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1063:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "1059:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&&",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 1661,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1657,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1655,
																					"name": "price",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1527,
																					"src": "1069:5:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"hexValue": "30",
																					"id": 1656,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "1078:1:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					},
																					"value": "0"
																				},
																				"src": "1069:10:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "||",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1660,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1658,
																					"name": "amountOut",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1623,
																					"src": "1083:9:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 1659,
																					"name": "price",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1527,
																					"src": "1095:5:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "1083:17:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "1069:31:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		}
																	],
																	"id": 1662,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1068:33:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "1059:42:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1675,
															"nodeType": "IfStatement",
															"src": "1055:121:12",
															"trueBody": {
																"id": 1674,
																"nodeType": "Block",
																"src": "1103:73:12",
																"statements": [
																	{
																		"expression": {
																			"id": 1666,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 1664,
																				"name": "price",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1527,
																				"src": "1117:5:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 1665,
																				"name": "amountOut",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1623,
																				"src": "1125:9:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "1117:17:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1667,
																		"nodeType": "ExpressionStatement",
																		"src": "1117:17:12"
																	},
																	{
																		"expression": {
																			"id": 1672,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 1668,
																				"name": "fee",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1529,
																				"src": "1148:3:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint24",
																					"typeString": "uint24"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"baseExpression": {
																					"id": 1669,
																					"name": "fees",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1536,
																					"src": "1154:4:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_uint16_$4_memory_ptr",
																						"typeString": "uint16[4] memory"
																					}
																				},
																				"id": 1671,
																				"indexExpression": {
																					"id": 1670,
																					"name": "i",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1544,
																					"src": "1159:1:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint8",
																						"typeString": "uint8"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "1154:7:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint16",
																					"typeString": "uint16"
																				}
																			},
																			"src": "1148:13:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint24",
																				"typeString": "uint24"
																			}
																		},
																		"id": 1673,
																		"nodeType": "ExpressionStatement",
																		"src": "1148:13:12"
																	}
																]
															}
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 1549,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1547,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1544,
														"src": "469:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"hexValue": "34",
														"id": 1548,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "471:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_4_by_1",
															"typeString": "int_const 4"
														},
														"value": "4"
													},
													"src": "469:3:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1677,
												"initializationExpression": {
													"assignments": [
														1544
													],
													"declarations": [
														{
															"constant": false,
															"id": 1544,
															"mutability": "mutable",
															"name": "i",
															"nodeType": "VariableDeclaration",
															"scope": 1677,
															"src": "459:7:12",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															"typeName": {
																"id": 1543,
																"name": "uint8",
																"nodeType": "ElementaryTypeName",
																"src": "459:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1546,
													"initialValue": {
														"hexValue": "30",
														"id": 1545,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "467:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "459:9:12"
												},
												"loopExpression": {
													"expression": {
														"id": 1551,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "473:3:12",
														"subExpression": {
															"id": 1550,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1544,
															"src": "473:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"id": 1552,
													"nodeType": "ExpressionStatement",
													"src": "473:3:12"
												},
												"nodeType": "ForStatement",
												"src": "455:731:12"
											},
											{
												"expression": {
													"components": [
														{
															"id": 1678,
															"name": "price",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1527,
															"src": "1203:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1679,
															"name": "fee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1529,
															"src": "1209:3:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														}
													],
													"id": 1680,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "1202:11:12",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint256_$_t_uint24_$",
														"typeString": "tuple(uint256,uint24)"
													}
												},
												"functionReturnParameters": 1530,
												"id": 1681,
												"nodeType": "Return",
												"src": "1195:18:12"
											}
										]
									},
									"functionSelector": "c361e0b1",
									"id": 1683,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "Price",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1525,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1520,
												"mutability": "mutable",
												"name": "factory",
												"nodeType": "VariableDeclaration",
												"scope": 1683,
												"src": "304:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1519,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "304:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1522,
												"mutability": "mutable",
												"name": "t0",
												"nodeType": "VariableDeclaration",
												"scope": 1683,
												"src": "320:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1521,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "320:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1524,
												"mutability": "mutable",
												"name": "t1",
												"nodeType": "VariableDeclaration",
												"scope": 1683,
												"src": "331:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1523,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "331:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "303:39:12"
									},
									"returnParameters": {
										"id": 1530,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1527,
												"mutability": "mutable",
												"name": "price",
												"nodeType": "VariableDeclaration",
												"scope": 1683,
												"src": "366:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1526,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "366:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1529,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 1683,
												"src": "380:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1528,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "380:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "365:26:12"
									},
									"scope": 1776,
									"src": "289:931:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1774,
										"nodeType": "Block",
										"src": "1334:424:12",
										"statements": [
											{
												"assignments": [
													1703
												],
												"declarations": [
													{
														"constant": false,
														"id": 1703,
														"mutability": "mutable",
														"name": "fees",
														"nodeType": "VariableDeclaration",
														"scope": 1774,
														"src": "1344:21:12",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint16_$4_memory_ptr",
															"typeString": "uint16[4]"
														},
														"typeName": {
															"baseType": {
																"id": 1701,
																"name": "uint16",
																"nodeType": "ElementaryTypeName",
																"src": "1344:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint16",
																	"typeString": "uint16"
																}
															},
															"id": 1702,
															"length": {
																"hexValue": "34",
																"id": 1700,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1351:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_4_by_1",
																	"typeString": "int_const 4"
																},
																"value": "4"
															},
															"nodeType": "ArrayTypeName",
															"src": "1344:9:12",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint16_$4_storage_ptr",
																"typeString": "uint16[4]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1709,
												"initialValue": {
													"components": [
														{
															"hexValue": "313030",
															"id": 1704,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1369:3:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_100_by_1",
																"typeString": "int_const 100"
															},
															"value": "100"
														},
														{
															"hexValue": "353030",
															"id": 1705,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1373:3:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_500_by_1",
																"typeString": "int_const 500"
															},
															"value": "500"
														},
														{
															"hexValue": "33303030",
															"id": 1706,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1377:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_3000_by_1",
																"typeString": "int_const 3000"
															},
															"value": "3000"
														},
														{
															"hexValue": "3130303030",
															"id": 1707,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1382:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_10000_by_1",
																"typeString": "int_const 10000"
															},
															"value": "10000"
														}
													],
													"id": 1708,
													"isConstant": false,
													"isInlineArray": true,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "1368:20:12",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint16_$4_memory_ptr",
														"typeString": "uint16[4] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1344:44:12"
											},
											{
												"assignments": [
													1715
												],
												"declarations": [
													{
														"constant": false,
														"id": 1715,
														"mutability": "mutable",
														"name": "fs",
														"nodeType": "VariableDeclaration",
														"scope": 1774,
														"src": "1398:19:12",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint16_$4_memory_ptr",
															"typeString": "uint16[4]"
														},
														"typeName": {
															"baseType": {
																"id": 1713,
																"name": "uint16",
																"nodeType": "ElementaryTypeName",
																"src": "1398:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint16",
																	"typeString": "uint16"
																}
															},
															"id": 1714,
															"length": {
																"hexValue": "34",
																"id": 1712,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1405:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_4_by_1",
																	"typeString": "int_const 4"
																},
																"value": "4"
															},
															"nodeType": "ArrayTypeName",
															"src": "1398:9:12",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint16_$4_storage_ptr",
																"typeString": "uint16[4]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1716,
												"nodeType": "VariableDeclarationStatement",
												"src": "1398:19:12"
											},
											{
												"body": {
													"id": 1770,
													"nodeType": "Block",
													"src": "1449:281:12",
													"statements": [
														{
															"assignments": [
																1728
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1728,
																	"mutability": "mutable",
																	"name": "pool",
																	"nodeType": "VariableDeclaration",
																	"scope": 1770,
																	"src": "1462:12:12",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"typeName": {
																		"id": 1727,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1462:7:12",
																		"stateMutability": "nonpayable",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1739,
															"initialValue": {
																"arguments": [
																	{
																		"id": 1733,
																		"name": "t0",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1687,
																		"src": "1512:2:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1734,
																		"name": "t1",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1689,
																		"src": "1515:2:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"baseExpression": {
																			"id": 1735,
																			"name": "fees",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1703,
																			"src": "1518:4:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_uint16_$4_memory_ptr",
																				"typeString": "uint16[4] memory"
																			}
																		},
																		"id": 1737,
																		"indexExpression": {
																			"id": 1736,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1718,
																			"src": "1523:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "1518:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint16",
																			"typeString": "uint16"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint16",
																			"typeString": "uint16"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1730,
																				"name": "factory",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1685,
																				"src": "1495:7:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1729,
																			"name": "IUniswapV3Factory",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 82,
																			"src": "1477:17:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IUniswapV3Factory_$82_$",
																				"typeString": "type(contract IUniswapV3Factory)"
																			}
																		},
																		"id": 1731,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1477:26:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IUniswapV3Factory_$82",
																			"typeString": "contract IUniswapV3Factory"
																		}
																	},
																	"id": 1732,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "getPool",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 55,
																	"src": "1477:34:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$_t_uint24_$returns$_t_address_$",
																		"typeString": "function (address,address,uint24) view external returns (address)"
																	}
																},
																"id": 1738,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1477:49:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "1462:64:12"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 1745,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1740,
																	"name": "pool",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1728,
																	"src": "1543:4:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"arguments": [
																		{
																			"hexValue": "30",
																			"id": 1743,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1559:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			}
																		],
																		"id": 1742,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "1551:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1741,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "1551:7:12",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1744,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1551:10:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																"src": "1543:18:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1747,
															"nodeType": "IfStatement",
															"src": "1539:32:12",
															"trueBody": {
																"id": 1746,
																"nodeType": "Continue",
																"src": "1563:8:12"
															}
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1755,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 1752,
																			"name": "pool",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1728,
																			"src": "1610:4:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"expression": {
																			"arguments": [
																				{
																					"id": 1749,
																					"name": "t0",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1687,
																					"src": "1596:2:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 1748,
																				"name": "IERC20",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1324,
																				"src": "1589:6:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_IERC20_$1324_$",
																					"typeString": "type(contract IERC20)"
																				}
																			},
																			"id": 1750,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1589:10:12",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$1324",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 1751,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "balanceOf",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1277,
																		"src": "1589:20:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
																			"typeString": "function (address) view external returns (uint256)"
																		}
																	},
																	"id": 1753,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1589:26:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 1754,
																	"name": "min0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1691,
																	"src": "1618:4:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1589:33:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1757,
															"nodeType": "IfStatement",
															"src": "1585:47:12",
															"trueBody": {
																"id": 1756,
																"nodeType": "Continue",
																"src": "1624:8:12"
															}
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1765,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 1762,
																			"name": "pool",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1728,
																			"src": "1671:4:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"expression": {
																			"arguments": [
																				{
																					"id": 1759,
																					"name": "t1",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1689,
																					"src": "1657:2:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 1758,
																				"name": "IERC20",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1324,
																				"src": "1650:6:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_IERC20_$1324_$",
																					"typeString": "type(contract IERC20)"
																				}
																			},
																			"id": 1760,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1650:10:12",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$1324",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 1761,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "balanceOf",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1277,
																		"src": "1650:20:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
																			"typeString": "function (address) view external returns (uint256)"
																		}
																	},
																	"id": 1763,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1650:26:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 1764,
																	"name": "min1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1693,
																	"src": "1679:4:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1650:33:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1767,
															"nodeType": "IfStatement",
															"src": "1646:47:12",
															"trueBody": {
																"id": 1766,
																"nodeType": "Continue",
																"src": "1685:8:12"
															}
														},
														{
															"expression": {
																"hexValue": "74727565",
																"id": 1768,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1715:4:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 1697,
															"id": 1769,
															"nodeType": "Return",
															"src": "1708:11:12"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 1723,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1721,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1718,
														"src": "1441:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"hexValue": "34",
														"id": 1722,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1443:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_4_by_1",
															"typeString": "int_const 4"
														},
														"value": "4"
													},
													"src": "1441:3:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1771,
												"initializationExpression": {
													"assignments": [
														1718
													],
													"declarations": [
														{
															"constant": false,
															"id": 1718,
															"mutability": "mutable",
															"name": "i",
															"nodeType": "VariableDeclaration",
															"scope": 1771,
															"src": "1431:7:12",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															"typeName": {
																"id": 1717,
																"name": "uint8",
																"nodeType": "ElementaryTypeName",
																"src": "1431:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1720,
													"initialValue": {
														"hexValue": "30",
														"id": 1719,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1439:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1431:9:12"
												},
												"loopExpression": {
													"expression": {
														"id": 1725,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "1445:3:12",
														"subExpression": {
															"id": 1724,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1718,
															"src": "1445:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"id": 1726,
													"nodeType": "ExpressionStatement",
													"src": "1445:3:12"
												},
												"nodeType": "ForStatement",
												"src": "1427:303:12"
											},
											{
												"expression": {
													"hexValue": "66616c7365",
													"id": 1772,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1746:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "false"
												},
												"functionReturnParameters": 1697,
												"id": 1773,
												"nodeType": "Return",
												"src": "1739:12:12"
											}
										]
									},
									"functionSelector": "bcbcaa29",
									"id": 1775,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "PoolExists",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1694,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1685,
												"mutability": "mutable",
												"name": "factory",
												"nodeType": "VariableDeclaration",
												"scope": 1775,
												"src": "1247:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1684,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1247:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1687,
												"mutability": "mutable",
												"name": "t0",
												"nodeType": "VariableDeclaration",
												"scope": 1775,
												"src": "1263:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1686,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1263:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1689,
												"mutability": "mutable",
												"name": "t1",
												"nodeType": "VariableDeclaration",
												"scope": 1775,
												"src": "1274:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1688,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1274:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1691,
												"mutability": "mutable",
												"name": "min0",
												"nodeType": "VariableDeclaration",
												"scope": 1775,
												"src": "1285:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1690,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1285:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1693,
												"mutability": "mutable",
												"name": "min1",
												"nodeType": "VariableDeclaration",
												"scope": 1775,
												"src": "1295:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1692,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1295:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1246:59:12"
									},
									"returnParameters": {
										"id": 1697,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1696,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1775,
												"src": "1329:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1695,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1329:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1328:6:12"
									},
									"scope": 1776,
									"src": "1227:531:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1777,
							"src": "260:1501:12"
						}
					],
					"src": "32:1731:12"
				},
				"id": 12
			}
		}
	}
}