{
	"compiler": {
		"version": "0.8.18+commit.87f61d96"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "Balance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "BalanceETH",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "bridge",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "tokenIn",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "bridgeFee",
								"type": "uint256"
							},
							{
								"internalType": "bool",
								"name": "afterSwap",
								"type": "bool"
							},
							{
								"internalType": "uint256",
								"name": "amountIn",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "feeAmount",
								"type": "uint256"
							},
							{
								"internalType": "bytes",
								"name": "bridgeData",
								"type": "bytes"
							}
						],
						"internalType": "struct IBridgeAggregator.bridgeInput",
						"name": "data",
						"type": "tuple"
					},
					{
						"internalType": "bytes",
						"name": "sig",
						"type": "bytes"
					}
				],
				"name": "Bridge",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_feeReciever",
						"type": "address"
					}
				],
				"name": "ChangeFeeReciever",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "tokenIn",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "tokenOut",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "totalAmount",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "feeAmount",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amountIn",
								"type": "uint256"
							},
							{
								"internalType": "bool",
								"name": "fromContract",
								"type": "bool"
							},
							{
								"internalType": "address",
								"name": "swapper",
								"type": "address"
							},
							{
								"internalType": "bytes",
								"name": "swapperData",
								"type": "bytes"
							},
							{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "receiver",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "native",
								"type": "bool"
							}
						],
						"internalType": "struct IExchangeAggregator.swapInput",
						"name": "data",
						"type": "tuple"
					},
					{
						"internalType": "bytes",
						"name": "sig",
						"type": "bytes"
					}
				],
				"name": "Swap",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "WithdrawETH",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "priceProvider",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "provider",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tA",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tB",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amountIn",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "version",
						"type": "uint8"
					}
				],
				"name": "estimateAmountOut",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					},
					{
						"internalType": "uint24",
						"name": "fee",
						"type": "uint24"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "feeReciever",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes[]",
						"name": "data",
						"type": "bytes[]"
					}
				],
				"name": "multicall",
				"outputs": [
					{
						"internalType": "bytes[]",
						"name": "results",
						"type": "bytes[]"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "swapAmountOut",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/ExchangeAggregator.sol": "ExchangeAggregator"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673",
			"license": "MIT",
			"urls": [
				"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2",
				"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a",
			"license": "MIT",
			"urls": [
				"bzz-raw://8c969013129ba9e651a20735ef659fef6d8a1139ea3607bd4b26ddea2d645634",
				"dweb:/ipfs/QmVhVa6LGuzAcB8qgDtVHRkucn4ihj5UZr8xBLcJkP6ucb"
			]
		},
		"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
			"keccak256": "0x06b89300806c928957832871b00126458e42874127857569a5fff7ff28093b10",
			"license": "MIT",
			"urls": [
				"bzz-raw://7125301cdee2b0f9ec0b6c1796e4d19a7f601a8bab62a087b4e6c0fc9699f140",
				"dweb:/ipfs/QmZPh1JuMBL1eoJ9igYN1nDFZnnr1NAzSkq9FyvkSsKoKT"
			]
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6",
			"license": "MIT",
			"urls": [
				"bzz-raw://33bbf48cc069be677705037ba7520c22b1b622c23b33e1a71495f2d36549d40b",
				"dweb:/ipfs/Qmct36zWXv3j7LZB83uwbg7TXwnZSN1fqHNDZ93GG98bGz"
			]
		},
		"contracts/ExchangeAggregator.sol": {
			"keccak256": "0x49f72a4e759635aa60511034cf3f798d2ddf44bf9e44c3d7c01b6884e1cf4532",
			"license": "MIT",
			"urls": [
				"bzz-raw://b2e5e2799f85bd5a70290d9ff2ce519303cf090d07634b8dc8e24c64ffa74d11",
				"dweb:/ipfs/QmeE1Y2pfCfnyvYoG2V9fcG4rqpoVbm5Hs3rzDZzffwr8c"
			]
		},
		"contracts/Multicall.sol": {
			"keccak256": "0xf18f65c864400e394ca86ffa1d2336ab956fdd99c83b8949adb0bee24cee71e8",
			"license": "MIT",
			"urls": [
				"bzz-raw://ab48a518727f935ff342f5d508e0978240cd49176eae10ac921c29866166e201",
				"dweb:/ipfs/QmXifv5a6CNU2cASB74vuMcsX9FQ1Hxh9xaq24t1NqUEYZ"
			]
		},
		"contracts/interfaces/IBridge.sol": {
			"keccak256": "0xaa09f42d1aa0a6bc9d9b3fcd7a5edffeae644c9c9962f777c74efbc02440ab1a",
			"license": "MIT",
			"urls": [
				"bzz-raw://c09ccd67ae0936907c92ad6d49fcc9fe3407c1b5abf8b7286a589e3094c49660",
				"dweb:/ipfs/QmXNv5AndtoffyLVbCx5awpzjReC6zrSKRthCnzziignRB"
			]
		},
		"contracts/interfaces/IBridgeAggregator.sol": {
			"keccak256": "0x2892fd49643fcfd86dc7d9d1d58d48d7b15761171fa19bdb8391aea4ffcbc987",
			"license": "MIT",
			"urls": [
				"bzz-raw://beba1393229c95819f15c808285be261b49f11e60ebe2540dfebed914f4c14a5",
				"dweb:/ipfs/QmSdhLDecMwD9UDhPFD3pYqLjRwzHpLzYoSuUAh1WQK4y2"
			]
		},
		"contracts/interfaces/IERC20.sol": {
			"keccak256": "0x7df9d93243a890a6dc175905d65495ae5726330faa50409ab8460c4c00c672e1",
			"license": "MIT",
			"urls": [
				"bzz-raw://3ff91fe9d915b97343e152f1a15a46e5ff9477e90e90a4431dca38f79eb2cdba",
				"dweb:/ipfs/QmcHUAJs2MfcdbAFTzdQE1eGevxCGHNDXECiuGLDaUs34S"
			]
		},
		"contracts/interfaces/IExchangeAggregator.sol": {
			"keccak256": "0xa9f071dea29a73a2fe461d58d761d434f2673595edf8e205b7aa5514e94ca62f",
			"license": "MIT",
			"urls": [
				"bzz-raw://9051d0d54713b5b2bf27bbcb6bb52c9fb3cd883d48b6cb69203aeb0b07d2296c",
				"dweb:/ipfs/QmSPenvbCPwBRBQX7bg334RTM64zgjq8HD74AhNYhe2sDo"
			]
		},
		"contracts/interfaces/IPriceProvider.sol": {
			"keccak256": "0x10aafa5da81292a00f6ab5771e0ec63a5cd25cad193af3e2094efb369a21f3a6",
			"license": "MIT",
			"urls": [
				"bzz-raw://802646b8916e5eadc44dd30f1966802b4c0dd755df7436455a43e65abde2a7b4",
				"dweb:/ipfs/QmWpALwUNhctou2bAScQpncfF3rCc3GzLQhxAKrDk3gbkf"
			]
		},
		"contracts/interfaces/IWETH.sol": {
			"keccak256": "0xa668cdcacb61abf369391ced013ff54f6f319ae54b878bb249683c9c2ee8bb3a",
			"license": "MIT",
			"urls": [
				"bzz-raw://5f55dd8af9da29d57debce16f52ce92bfad90953abca33097a5b0a4ce1a1f9fd",
				"dweb:/ipfs/QmWs9ghCYqhENcphNGG9ZSdq5g2XeJfDBQR7EMqGsUrYYX"
			]
		},
		"contracts/libraries/safeCaller.sol": {
			"keccak256": "0x34515481fb168f22bb2eb11198251ce23448dd3e04a9680829803e07a2f42a98",
			"license": "MIT",
			"urls": [
				"bzz-raw://8e18be1d579c0ba509f6791a20aa4051980b9858d18fdbd9b39d58344a75e333",
				"dweb:/ipfs/QmWoK1L9w5fjAvVGeLSpwweDN5f1vJGScudAVDZC3pTzqX"
			]
		},
		"contracts/libraries/transferHelper.sol": {
			"keccak256": "0x1357eba41300b045aeef248f9060cdaebf1dae319fad1c4adddffa295793a1dd",
			"license": "GPL-3.0-or-later",
			"urls": [
				"bzz-raw://395e14440064ad4c3c402b458144ffbbb42f4cbdf81e21671713c809c1adf197",
				"dweb:/ipfs/Qmf7rQdfU6bLLUYc1cMsCJr3Kd8zUNXHHijUHjEowciwZN"
			]
		},
		"contracts/libraries/utils.sol": {
			"keccak256": "0x3dd3e4ca97b11674c426a2c9e0b9e0513019c16cd827e2acbea4b34cc3d128c7",
			"license": "MIT",
			"urls": [
				"bzz-raw://7676285fb314bbc66fdae93d8050a08f6a23ea1be80e69f8f509248d30e8974e",
				"dweb:/ipfs/QmWogAz4RLpgHs12tD39y5YvdPf1kABmAgRKJNgxfEyrKo"
			]
		}
	},
	"version": 1
}